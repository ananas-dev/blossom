#![allow(warnings)]
/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const IMGUI_HAS_DOCK: u32 = 1;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_cookie_io_functions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockRequest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNodeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextDeactivateData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnsSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_const_charPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_const_charPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_const_charPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_const_charPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_const_charPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_const_charPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_const_charPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Data)
        )
    );
}
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImU64 = ::std::os::raw::c_ulonglong;
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImGuiTableBgTarget = ::std::os::raw::c_int;
pub type ImDrawFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiChildFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiKeyChord = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTableFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnFlags = ::std::os::raw::c_int;
pub type ImGuiTableRowFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImTextureID = *mut ::std::os::raw::c_void;
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImWchar32 = ::std::os::raw::c_uint;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar = ImWchar16;
pub type ImGuiInputTextCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImGuiMemAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        sz: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ImGuiMemFreeFunc = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ImVec2() {
    const UNINIT: ::std::mem::MaybeUninit<ImVec2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVec2>(),
        8usize,
        concat!("Size of: ", stringify!(ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ImVec4() {
    const UNINIT: ::std::mem::MaybeUninit<ImVec4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec4>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(w))
    );
}
pub const ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 131072;
pub const ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 196608;
pub const ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 197120;
pub const ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub const ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 536870912;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_uint;
pub const ImGuiChildFlags_None: ImGuiChildFlags_ = 0;
pub const ImGuiChildFlags_Border: ImGuiChildFlags_ = 1;
pub const ImGuiChildFlags_AlwaysUseWindowPadding: ImGuiChildFlags_ = 2;
pub const ImGuiChildFlags_ResizeX: ImGuiChildFlags_ = 4;
pub const ImGuiChildFlags_ResizeY: ImGuiChildFlags_ = 8;
pub const ImGuiChildFlags_AutoResizeX: ImGuiChildFlags_ = 16;
pub const ImGuiChildFlags_AutoResizeY: ImGuiChildFlags_ = 32;
pub const ImGuiChildFlags_AlwaysAutoResize: ImGuiChildFlags_ = 64;
pub const ImGuiChildFlags_FrameStyle: ImGuiChildFlags_ = 128;
pub type ImGuiChildFlags_ = ::std::os::raw::c_uint;
pub const ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags_EscapeClearsAll: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags_ParseEmptyRefVal: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags_DisplayEmptyRefVal: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 262144;
pub const ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ = 1048576;
pub const ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 2097152;
pub const ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 4194304;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags_AllowOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags_SpanTextWidth: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags_SpanAllColumns: ImGuiTreeNodeFlags_ = 16384;
pub const ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 32768;
pub const ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_uint;
pub const ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags_NoReopen: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 1024;
pub const ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 2048;
pub const ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 3072;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_uint;
pub const ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags_AllowOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_uint;
pub const ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags_WidthFitPreview: ImGuiComboFlags_ = 128;
pub const ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 192;
pub const ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 64;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub const ImGuiTabItemFlags_NoAssumedClosure: ImGuiTabItemFlags_ = 256;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_uint;
pub const ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags_NoPopupHierarchy: ImGuiFocusedFlags_ = 8;
pub const ImGuiFocusedFlags_DockHierarchy: ImGuiFocusedFlags_ = 16;
pub const ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_uint;
pub const ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags_NoPopupHierarchy: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags_DockHierarchy: ImGuiHoveredFlags_ = 16;
pub const ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ = 128;
pub const ImGuiHoveredFlags_AllowWhenOverlappedByItem: ImGuiHoveredFlags_ = 256;
pub const ImGuiHoveredFlags_AllowWhenOverlappedByWindow: ImGuiHoveredFlags_ = 512;
pub const ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 1024;
pub const ImGuiHoveredFlags_NoNavOverride: ImGuiHoveredFlags_ = 2048;
pub const ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 768;
pub const ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 928;
pub const ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub const ImGuiHoveredFlags_ForTooltip: ImGuiHoveredFlags_ = 4096;
pub const ImGuiHoveredFlags_Stationary: ImGuiHoveredFlags_ = 8192;
pub const ImGuiHoveredFlags_DelayNone: ImGuiHoveredFlags_ = 16384;
pub const ImGuiHoveredFlags_DelayShort: ImGuiHoveredFlags_ = 32768;
pub const ImGuiHoveredFlags_DelayNormal: ImGuiHoveredFlags_ = 65536;
pub const ImGuiHoveredFlags_NoSharedDelay: ImGuiHoveredFlags_ = 131072;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags_NoDockingOverCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags_NoDockingSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub const ImGuiDockNodeFlags_NoUndocking: ImGuiDockNodeFlags_ = 128;
pub type ImGuiDockNodeFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ = 2048;
pub const ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType_COUNT: ImGuiDataType_ = 10;
pub type ImGuiDataType_ = ::std::os::raw::c_uint;
pub const ImGuiDir_None: ImGuiDir = -1;
pub const ImGuiDir_Left: ImGuiDir = 0;
pub const ImGuiDir_Right: ImGuiDir = 1;
pub const ImGuiDir_Up: ImGuiDir = 2;
pub const ImGuiDir_Down: ImGuiDir = 3;
pub const ImGuiDir_COUNT: ImGuiDir = 4;
pub type ImGuiDir = ::std::os::raw::c_int;
pub const ImGuiSortDirection_None: ImGuiSortDirection = 0;
pub const ImGuiSortDirection_Ascending: ImGuiSortDirection = 1;
pub const ImGuiSortDirection_Descending: ImGuiSortDirection = 2;
pub type ImGuiSortDirection = ::std::os::raw::c_uint;
pub const ImGuiKey_None: ImGuiKey = 0;
pub const ImGuiKey_Tab: ImGuiKey = 512;
pub const ImGuiKey_LeftArrow: ImGuiKey = 513;
pub const ImGuiKey_RightArrow: ImGuiKey = 514;
pub const ImGuiKey_UpArrow: ImGuiKey = 515;
pub const ImGuiKey_DownArrow: ImGuiKey = 516;
pub const ImGuiKey_PageUp: ImGuiKey = 517;
pub const ImGuiKey_PageDown: ImGuiKey = 518;
pub const ImGuiKey_Home: ImGuiKey = 519;
pub const ImGuiKey_End: ImGuiKey = 520;
pub const ImGuiKey_Insert: ImGuiKey = 521;
pub const ImGuiKey_Delete: ImGuiKey = 522;
pub const ImGuiKey_Backspace: ImGuiKey = 523;
pub const ImGuiKey_Space: ImGuiKey = 524;
pub const ImGuiKey_Enter: ImGuiKey = 525;
pub const ImGuiKey_Escape: ImGuiKey = 526;
pub const ImGuiKey_LeftCtrl: ImGuiKey = 527;
pub const ImGuiKey_LeftShift: ImGuiKey = 528;
pub const ImGuiKey_LeftAlt: ImGuiKey = 529;
pub const ImGuiKey_LeftSuper: ImGuiKey = 530;
pub const ImGuiKey_RightCtrl: ImGuiKey = 531;
pub const ImGuiKey_RightShift: ImGuiKey = 532;
pub const ImGuiKey_RightAlt: ImGuiKey = 533;
pub const ImGuiKey_RightSuper: ImGuiKey = 534;
pub const ImGuiKey_Menu: ImGuiKey = 535;
pub const ImGuiKey_0: ImGuiKey = 536;
pub const ImGuiKey_1: ImGuiKey = 537;
pub const ImGuiKey_2: ImGuiKey = 538;
pub const ImGuiKey_3: ImGuiKey = 539;
pub const ImGuiKey_4: ImGuiKey = 540;
pub const ImGuiKey_5: ImGuiKey = 541;
pub const ImGuiKey_6: ImGuiKey = 542;
pub const ImGuiKey_7: ImGuiKey = 543;
pub const ImGuiKey_8: ImGuiKey = 544;
pub const ImGuiKey_9: ImGuiKey = 545;
pub const ImGuiKey_A: ImGuiKey = 546;
pub const ImGuiKey_B: ImGuiKey = 547;
pub const ImGuiKey_C: ImGuiKey = 548;
pub const ImGuiKey_D: ImGuiKey = 549;
pub const ImGuiKey_E: ImGuiKey = 550;
pub const ImGuiKey_F: ImGuiKey = 551;
pub const ImGuiKey_G: ImGuiKey = 552;
pub const ImGuiKey_H: ImGuiKey = 553;
pub const ImGuiKey_I: ImGuiKey = 554;
pub const ImGuiKey_J: ImGuiKey = 555;
pub const ImGuiKey_K: ImGuiKey = 556;
pub const ImGuiKey_L: ImGuiKey = 557;
pub const ImGuiKey_M: ImGuiKey = 558;
pub const ImGuiKey_N: ImGuiKey = 559;
pub const ImGuiKey_O: ImGuiKey = 560;
pub const ImGuiKey_P: ImGuiKey = 561;
pub const ImGuiKey_Q: ImGuiKey = 562;
pub const ImGuiKey_R: ImGuiKey = 563;
pub const ImGuiKey_S: ImGuiKey = 564;
pub const ImGuiKey_T: ImGuiKey = 565;
pub const ImGuiKey_U: ImGuiKey = 566;
pub const ImGuiKey_V: ImGuiKey = 567;
pub const ImGuiKey_W: ImGuiKey = 568;
pub const ImGuiKey_X: ImGuiKey = 569;
pub const ImGuiKey_Y: ImGuiKey = 570;
pub const ImGuiKey_Z: ImGuiKey = 571;
pub const ImGuiKey_F1: ImGuiKey = 572;
pub const ImGuiKey_F2: ImGuiKey = 573;
pub const ImGuiKey_F3: ImGuiKey = 574;
pub const ImGuiKey_F4: ImGuiKey = 575;
pub const ImGuiKey_F5: ImGuiKey = 576;
pub const ImGuiKey_F6: ImGuiKey = 577;
pub const ImGuiKey_F7: ImGuiKey = 578;
pub const ImGuiKey_F8: ImGuiKey = 579;
pub const ImGuiKey_F9: ImGuiKey = 580;
pub const ImGuiKey_F10: ImGuiKey = 581;
pub const ImGuiKey_F11: ImGuiKey = 582;
pub const ImGuiKey_F12: ImGuiKey = 583;
pub const ImGuiKey_F13: ImGuiKey = 584;
pub const ImGuiKey_F14: ImGuiKey = 585;
pub const ImGuiKey_F15: ImGuiKey = 586;
pub const ImGuiKey_F16: ImGuiKey = 587;
pub const ImGuiKey_F17: ImGuiKey = 588;
pub const ImGuiKey_F18: ImGuiKey = 589;
pub const ImGuiKey_F19: ImGuiKey = 590;
pub const ImGuiKey_F20: ImGuiKey = 591;
pub const ImGuiKey_F21: ImGuiKey = 592;
pub const ImGuiKey_F22: ImGuiKey = 593;
pub const ImGuiKey_F23: ImGuiKey = 594;
pub const ImGuiKey_F24: ImGuiKey = 595;
pub const ImGuiKey_Apostrophe: ImGuiKey = 596;
pub const ImGuiKey_Comma: ImGuiKey = 597;
pub const ImGuiKey_Minus: ImGuiKey = 598;
pub const ImGuiKey_Period: ImGuiKey = 599;
pub const ImGuiKey_Slash: ImGuiKey = 600;
pub const ImGuiKey_Semicolon: ImGuiKey = 601;
pub const ImGuiKey_Equal: ImGuiKey = 602;
pub const ImGuiKey_LeftBracket: ImGuiKey = 603;
pub const ImGuiKey_Backslash: ImGuiKey = 604;
pub const ImGuiKey_RightBracket: ImGuiKey = 605;
pub const ImGuiKey_GraveAccent: ImGuiKey = 606;
pub const ImGuiKey_CapsLock: ImGuiKey = 607;
pub const ImGuiKey_ScrollLock: ImGuiKey = 608;
pub const ImGuiKey_NumLock: ImGuiKey = 609;
pub const ImGuiKey_PrintScreen: ImGuiKey = 610;
pub const ImGuiKey_Pause: ImGuiKey = 611;
pub const ImGuiKey_Keypad0: ImGuiKey = 612;
pub const ImGuiKey_Keypad1: ImGuiKey = 613;
pub const ImGuiKey_Keypad2: ImGuiKey = 614;
pub const ImGuiKey_Keypad3: ImGuiKey = 615;
pub const ImGuiKey_Keypad4: ImGuiKey = 616;
pub const ImGuiKey_Keypad5: ImGuiKey = 617;
pub const ImGuiKey_Keypad6: ImGuiKey = 618;
pub const ImGuiKey_Keypad7: ImGuiKey = 619;
pub const ImGuiKey_Keypad8: ImGuiKey = 620;
pub const ImGuiKey_Keypad9: ImGuiKey = 621;
pub const ImGuiKey_KeypadDecimal: ImGuiKey = 622;
pub const ImGuiKey_KeypadDivide: ImGuiKey = 623;
pub const ImGuiKey_KeypadMultiply: ImGuiKey = 624;
pub const ImGuiKey_KeypadSubtract: ImGuiKey = 625;
pub const ImGuiKey_KeypadAdd: ImGuiKey = 626;
pub const ImGuiKey_KeypadEnter: ImGuiKey = 627;
pub const ImGuiKey_KeypadEqual: ImGuiKey = 628;
pub const ImGuiKey_AppBack: ImGuiKey = 629;
pub const ImGuiKey_AppForward: ImGuiKey = 630;
pub const ImGuiKey_GamepadStart: ImGuiKey = 631;
pub const ImGuiKey_GamepadBack: ImGuiKey = 632;
pub const ImGuiKey_GamepadFaceLeft: ImGuiKey = 633;
pub const ImGuiKey_GamepadFaceRight: ImGuiKey = 634;
pub const ImGuiKey_GamepadFaceUp: ImGuiKey = 635;
pub const ImGuiKey_GamepadFaceDown: ImGuiKey = 636;
pub const ImGuiKey_GamepadDpadLeft: ImGuiKey = 637;
pub const ImGuiKey_GamepadDpadRight: ImGuiKey = 638;
pub const ImGuiKey_GamepadDpadUp: ImGuiKey = 639;
pub const ImGuiKey_GamepadDpadDown: ImGuiKey = 640;
pub const ImGuiKey_GamepadL1: ImGuiKey = 641;
pub const ImGuiKey_GamepadR1: ImGuiKey = 642;
pub const ImGuiKey_GamepadL2: ImGuiKey = 643;
pub const ImGuiKey_GamepadR2: ImGuiKey = 644;
pub const ImGuiKey_GamepadL3: ImGuiKey = 645;
pub const ImGuiKey_GamepadR3: ImGuiKey = 646;
pub const ImGuiKey_GamepadLStickLeft: ImGuiKey = 647;
pub const ImGuiKey_GamepadLStickRight: ImGuiKey = 648;
pub const ImGuiKey_GamepadLStickUp: ImGuiKey = 649;
pub const ImGuiKey_GamepadLStickDown: ImGuiKey = 650;
pub const ImGuiKey_GamepadRStickLeft: ImGuiKey = 651;
pub const ImGuiKey_GamepadRStickRight: ImGuiKey = 652;
pub const ImGuiKey_GamepadRStickUp: ImGuiKey = 653;
pub const ImGuiKey_GamepadRStickDown: ImGuiKey = 654;
pub const ImGuiKey_MouseLeft: ImGuiKey = 655;
pub const ImGuiKey_MouseRight: ImGuiKey = 656;
pub const ImGuiKey_MouseMiddle: ImGuiKey = 657;
pub const ImGuiKey_MouseX1: ImGuiKey = 658;
pub const ImGuiKey_MouseX2: ImGuiKey = 659;
pub const ImGuiKey_MouseWheelX: ImGuiKey = 660;
pub const ImGuiKey_MouseWheelY: ImGuiKey = 661;
pub const ImGuiKey_ReservedForModCtrl: ImGuiKey = 662;
pub const ImGuiKey_ReservedForModShift: ImGuiKey = 663;
pub const ImGuiKey_ReservedForModAlt: ImGuiKey = 664;
pub const ImGuiKey_ReservedForModSuper: ImGuiKey = 665;
pub const ImGuiKey_COUNT: ImGuiKey = 666;
pub const ImGuiMod_None: ImGuiKey = 0;
pub const ImGuiMod_Ctrl: ImGuiKey = 4096;
pub const ImGuiMod_Shift: ImGuiKey = 8192;
pub const ImGuiMod_Alt: ImGuiKey = 16384;
pub const ImGuiMod_Super: ImGuiKey = 32768;
pub const ImGuiMod_Mask_: ImGuiKey = 61440;
pub const ImGuiKey_NamedKey_BEGIN: ImGuiKey = 512;
pub const ImGuiKey_NamedKey_END: ImGuiKey = 666;
pub const ImGuiKey_NamedKey_COUNT: ImGuiKey = 154;
pub const ImGuiKey_KeysData_SIZE: ImGuiKey = 154;
pub const ImGuiKey_KeysData_OFFSET: ImGuiKey = 512;
pub type ImGuiKey = ::std::os::raw::c_uint;
pub const ImGuiInputFlags_None: ImGuiInputFlags_ = 0;
pub const ImGuiInputFlags_Repeat: ImGuiInputFlags_ = 1;
pub const ImGuiInputFlags_RouteActive: ImGuiInputFlags_ = 1024;
pub const ImGuiInputFlags_RouteFocused: ImGuiInputFlags_ = 2048;
pub const ImGuiInputFlags_RouteGlobal: ImGuiInputFlags_ = 4096;
pub const ImGuiInputFlags_RouteAlways: ImGuiInputFlags_ = 8192;
pub const ImGuiInputFlags_RouteOverFocused: ImGuiInputFlags_ = 16384;
pub const ImGuiInputFlags_RouteOverActive: ImGuiInputFlags_ = 32768;
pub const ImGuiInputFlags_RouteUnlessBgFocused: ImGuiInputFlags_ = 65536;
pub const ImGuiInputFlags_RouteFromRootWindow: ImGuiInputFlags_ = 131072;
pub const ImGuiInputFlags_Tooltip: ImGuiInputFlags_ = 262144;
pub type ImGuiInputFlags_ = ::std::os::raw::c_uint;
pub const ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub const ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags_DpiEnableScaleViewports: ImGuiConfigFlags_ = 16384;
pub const ImGuiConfigFlags_DpiEnableScaleFonts: ImGuiConfigFlags_ = 32768;
pub const ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_uint;
pub const ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_uint;
pub const ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol_Tab: ImGuiCol_ = 33;
pub const ImGuiCol_TabHovered: ImGuiCol_ = 34;
pub const ImGuiCol_TabActive: ImGuiCol_ = 35;
pub const ImGuiCol_TabUnfocused: ImGuiCol_ = 36;
pub const ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 37;
pub const ImGuiCol_DockingPreview: ImGuiCol_ = 38;
pub const ImGuiCol_DockingEmptyBg: ImGuiCol_ = 39;
pub const ImGuiCol_PlotLines: ImGuiCol_ = 40;
pub const ImGuiCol_PlotLinesHovered: ImGuiCol_ = 41;
pub const ImGuiCol_PlotHistogram: ImGuiCol_ = 42;
pub const ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 43;
pub const ImGuiCol_TableHeaderBg: ImGuiCol_ = 44;
pub const ImGuiCol_TableBorderStrong: ImGuiCol_ = 45;
pub const ImGuiCol_TableBorderLight: ImGuiCol_ = 46;
pub const ImGuiCol_TableRowBg: ImGuiCol_ = 47;
pub const ImGuiCol_TableRowBgAlt: ImGuiCol_ = 48;
pub const ImGuiCol_TextSelectedBg: ImGuiCol_ = 49;
pub const ImGuiCol_DragDropTarget: ImGuiCol_ = 50;
pub const ImGuiCol_NavHighlight: ImGuiCol_ = 51;
pub const ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 52;
pub const ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 53;
pub const ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 54;
pub const ImGuiCol_COUNT: ImGuiCol_ = 55;
pub type ImGuiCol_ = ::std::os::raw::c_uint;
pub const ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar_DisabledAlpha: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar_TabBorderSize: ImGuiStyleVar_ = 23;
pub const ImGuiStyleVar_TabBarBorderSize: ImGuiStyleVar_ = 24;
pub const ImGuiStyleVar_TableAngledHeadersAngle: ImGuiStyleVar_ = 25;
pub const ImGuiStyleVar_TableAngledHeadersTextAlign: ImGuiStyleVar_ = 26;
pub const ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 27;
pub const ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 28;
pub const ImGuiStyleVar_SeparatorTextBorderSize: ImGuiStyleVar_ = 29;
pub const ImGuiStyleVar_SeparatorTextAlign: ImGuiStyleVar_ = 30;
pub const ImGuiStyleVar_SeparatorTextPadding: ImGuiStyleVar_ = 31;
pub const ImGuiStyleVar_DockingSeparatorSize: ImGuiStyleVar_ = 32;
pub const ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 33;
pub type ImGuiStyleVar_ = ::std::os::raw::c_uint;
pub const ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_uint;
pub const ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 131072;
pub const ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 262144;
pub const ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags_DefaultOptions_: ImGuiColorEditFlags_ = 177209344;
pub const ImGuiColorEditFlags_DisplayMask_: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags_DataTypeMask_: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags_PickerMask_: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags_InputMask_: ImGuiColorEditFlags_ = 402653184;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_uint;
pub const ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 16;
pub const ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_uint;
pub const ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_uint;
pub const ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 9;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiMouseSource_Mouse: ImGuiMouseSource = 0;
pub const ImGuiMouseSource_TouchScreen: ImGuiMouseSource = 1;
pub const ImGuiMouseSource_Pen: ImGuiMouseSource = 2;
pub const ImGuiMouseSource_COUNT: ImGuiMouseSource = 3;
pub type ImGuiMouseSource = ::std::os::raw::c_uint;
pub const ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_uint;
pub const ImGuiTableFlags_None: ImGuiTableFlags_ = 0;
pub const ImGuiTableFlags_Resizable: ImGuiTableFlags_ = 1;
pub const ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = 2;
pub const ImGuiTableFlags_Hideable: ImGuiTableFlags_ = 4;
pub const ImGuiTableFlags_Sortable: ImGuiTableFlags_ = 8;
pub const ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = 16;
pub const ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = 32;
pub const ImGuiTableFlags_RowBg: ImGuiTableFlags_ = 64;
pub const ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = 128;
pub const ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = 256;
pub const ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = 512;
pub const ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = 1024;
pub const ImGuiTableFlags_BordersH: ImGuiTableFlags_ = 384;
pub const ImGuiTableFlags_BordersV: ImGuiTableFlags_ = 1536;
pub const ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = 640;
pub const ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = 1280;
pub const ImGuiTableFlags_Borders: ImGuiTableFlags_ = 1920;
pub const ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = 2048;
pub const ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = 4096;
pub const ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = 8192;
pub const ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = 16384;
pub const ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = 24576;
pub const ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = 32768;
pub const ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = 65536;
pub const ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = 131072;
pub const ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = 262144;
pub const ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = 524288;
pub const ImGuiTableFlags_NoClip: ImGuiTableFlags_ = 1048576;
pub const ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = 2097152;
pub const ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = 4194304;
pub const ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = 8388608;
pub const ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = 16777216;
pub const ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = 33554432;
pub const ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = 67108864;
pub const ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = 134217728;
pub const ImGuiTableFlags_HighlightHoveredColumn: ImGuiTableFlags_ = 268435456;
pub const ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = 57344;
pub type ImGuiTableFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = 0;
pub const ImGuiTableColumnFlags_Disabled: ImGuiTableColumnFlags_ = 1;
pub const ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = 2;
pub const ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = 4;
pub const ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = 8;
pub const ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = 16;
pub const ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = 32;
pub const ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = 64;
pub const ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = 128;
pub const ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = 256;
pub const ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = 512;
pub const ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ = 1024;
pub const ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ = 2048;
pub const ImGuiTableColumnFlags_NoHeaderLabel: ImGuiTableColumnFlags_ = 4096;
pub const ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = 8192;
pub const ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ = 16384;
pub const ImGuiTableColumnFlags_PreferSortDescending: ImGuiTableColumnFlags_ = 32768;
pub const ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = 65536;
pub const ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ = 131072;
pub const ImGuiTableColumnFlags_AngledHeader: ImGuiTableColumnFlags_ = 262144;
pub const ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = 16777216;
pub const ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = 33554432;
pub const ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = 67108864;
pub const ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ = 134217728;
pub const ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = 24;
pub const ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = 196608;
pub const ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ = 251658240;
pub const ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ = 1073741824;
pub type ImGuiTableColumnFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = 0;
pub const ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = 1;
pub type ImGuiTableRowFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = 0;
pub const ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = 1;
pub const ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = 2;
pub const ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = 3;
pub type ImGuiTableBgTarget_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSortSpecs {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::std::os::raw::c_int,
    pub SpecsDirty: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTableSortSpecs() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableSortSpecs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableSortSpecs>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTableSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableSortSpecs>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTableSortSpecs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Specs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs),
            "::",
            stringify!(Specs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SpecsCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs),
            "::",
            stringify!(SpecsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SpecsDirty) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs),
            "::",
            stringify!(SpecsDirty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSortSpecs {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub SortDirection: ImGuiSortDirection,
}
#[test]
fn bindgen_test_layout_ImGuiTableColumnSortSpecs() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableColumnSortSpecs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumnSortSpecs>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumnSortSpecs>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnUserID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(ColumnUserID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(ColumnIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortOrder) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(SortOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortDirection) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(SortDirection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStyle {
    pub Alpha: f32,
    pub DisabledAlpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub CellPadding: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabMinWidthForCloseButton: f32,
    pub TabBarBorderSize: f32,
    pub TableAngledHeadersAngle: f32,
    pub TableAngledHeadersTextAlign: ImVec2,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub SeparatorTextBorderSize: f32,
    pub SeparatorTextAlign: ImVec2,
    pub SeparatorTextPadding: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub DockingSeparatorSize: f32,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleTessellationMaxError: f32,
    pub Colors: [ImVec4; 55usize],
    pub HoverStationaryDelay: f32,
    pub HoverDelayShort: f32,
    pub HoverDelayNormal: f32,
    pub HoverFlagsForTooltipMouse: ImGuiHoveredFlags,
    pub HoverFlagsForTooltipNav: ImGuiHoveredFlags,
}
#[test]
fn bindgen_test_layout_ImGuiStyle() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStyle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyle>(),
        1140usize,
        concat!("Size of: ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Alpha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(Alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisabledAlpha) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisabledAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowPadding) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowRounding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowBorderSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowMinSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowTitleAlign) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowTitleAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowMenuButtonPosition) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMenuButtonPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildRounding) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildBorderSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopupRounding) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopupBorderSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramePadding) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameRounding) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameBorderSize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemSpacing) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemInnerSpacing) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemInnerSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CellPadding) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CellPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TouchExtraPadding) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TouchExtraPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndentSpacing) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(IndentSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsMinSpacing) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColumnsMinSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarSize) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarRounding) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GrabMinSize) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabMinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GrabRounding) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogSliderDeadzone) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(LogSliderDeadzone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabRounding) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabBorderSize) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabMinWidthForCloseButton) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabMinWidthForCloseButton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabBarBorderSize) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabBarBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TableAngledHeadersAngle) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TableAngledHeadersAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TableAngledHeadersTextAlign) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TableAngledHeadersTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorButtonPosition) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColorButtonPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ButtonTextAlign) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ButtonTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectableTextAlign) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SelectableTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorTextBorderSize) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SeparatorTextBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorTextAlign) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SeparatorTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorTextPadding) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SeparatorTextPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayWindowPadding) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplayWindowPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplaySafeAreaPadding) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplaySafeAreaPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockingSeparatorSize) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DockingSeparatorSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseCursorScale) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(MouseCursorScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AntiAliasedLines) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AntiAliasedLinesUseTex) as usize - ptr as usize },
        229usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLinesUseTex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AntiAliasedFill) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedFill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurveTessellationTol) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CircleTessellationMaxError) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CircleTessellationMaxError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Colors) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(Colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverStationaryDelay) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverStationaryDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverDelayShort) as usize - ptr as usize },
        1124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverDelayShort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverDelayNormal) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverDelayNormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverFlagsForTooltipMouse) as usize - ptr as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverFlagsForTooltipMouse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverFlagsForTooltipNav) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverFlagsForTooltipNav)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyData {
    pub Down: bool,
    pub DownDuration: f32,
    pub DownDurationPrev: f32,
    pub AnalogValue: f32,
}
#[test]
fn bindgen_test_layout_ImGuiKeyData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiKeyData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiKeyData>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiKeyData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiKeyData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiKeyData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Down) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData),
            "::",
            stringify!(Down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DownDuration) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData),
            "::",
            stringify!(DownDuration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DownDurationPrev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData),
            "::",
            stringify!(DownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AnalogValue) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData),
            "::",
            stringify!(AnalogValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImWchar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImWchar,
}
#[test]
fn bindgen_test_layout_ImVector_ImWchar() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImWchar> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImWchar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImWchar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImWchar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImWchar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontGlobalScale: f32,
    pub FontAllowUserScaling: bool,
    pub FontDefault: *mut ImFont,
    pub DisplayFramebufferScale: ImVec2,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTrickleEventQueue: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigInputTextEnterKeepActive: bool,
    pub ConfigDragClickToInputText: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub ConfigDebugIsDebuggerPresent: bool,
    pub ConfigDebugBeginReturnValueOnce: bool,
    pub ConfigDebugBeginReturnValueLoop: bool,
    pub ConfigDebugIgnoreFocusLoss: bool,
    pub ConfigDebugIniSettings: bool,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub ClipboardUserData: *mut ::std::os::raw::c_void,
    pub SetPlatformImeDataFn: ::std::option::Option<
        unsafe extern "C" fn(viewport: *mut ImGuiViewport, data: *mut ImGuiPlatformImeData),
    >,
    pub PlatformLocaleDecimalPoint: ImWchar,
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub Ctx: *mut ImGuiContext,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseSource: ImGuiMouseSource,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeyMods: ImGuiKeyChord,
    pub KeysData: [ImGuiKeyData; 154usize],
    pub WantCaptureMouseUnlessPopupClose: bool,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseClickedCount: [ImU16; 5usize],
    pub MouseClickedLastCount: [ImU16; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownOwnedUnlessPopupClose: [bool; 5usize],
    pub MouseWheelRequestAxisSwap: bool,
    pub MouseCtrlLeftAsRightClick: bool,
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub PenPressure: f32,
    pub AppFocusLost: bool,
    pub AppAcceptingEvents: bool,
    pub BackendUsingLegacyKeyArrays: ImS8,
    pub BackendUsingLegacyNavInputArray: bool,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector_ImWchar,
}
#[test]
fn bindgen_test_layout_ImGuiIO() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiIO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiIO>(),
        3024usize,
        concat!("Size of: ", stringify!(ImGuiIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiIO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplaySize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeltaTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DeltaTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IniSavingRate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(IniSavingRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IniFilename) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(IniFilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogFilename) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(LogFilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fonts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontGlobalScale) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontGlobalScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontAllowUserScaling) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontAllowUserScaling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDefault) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayFramebufferScale) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DisplayFramebufferScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDockingNoSplit) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingNoSplit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDockingWithShift) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingWithShift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDockingAlwaysTabBar) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDockingTransparentPayload) as usize - ptr as usize
        },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingTransparentPayload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigViewportsNoAutoMerge) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoAutoMerge)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigViewportsNoTaskBarIcon) as usize - ptr as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoTaskBarIcon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigViewportsNoDecoration) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoDecoration)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigViewportsNoDefaultParent) as usize - ptr as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoDefaultParent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDrawCursor) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDrawCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigMacOSXBehaviors) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigMacOSXBehaviors)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigInputTrickleEventQueue) as usize - ptr as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigInputTrickleEventQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigInputTextCursorBlink) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigInputTextCursorBlink)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigInputTextEnterKeepActive) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigInputTextEnterKeepActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDragClickToInputText) as usize - ptr as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDragClickToInputText)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigWindowsResizeFromEdges) as usize - ptr as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsResizeFromEdges)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigWindowsMoveFromTitleBarOnly) as usize - ptr as usize
        },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsMoveFromTitleBarOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigMemoryCompactTimer) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigMemoryCompactTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDoubleClickTime) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDoubleClickMaxDist) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickMaxDist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDragThreshold) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyRepeatDelay) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyRepeatRate) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatRate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDebugIsDebuggerPresent) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugIsDebuggerPresent)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDebugBeginReturnValueOnce) as usize - ptr as usize
        },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugBeginReturnValueOnce)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDebugBeginReturnValueLoop) as usize - ptr as usize
        },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugBeginReturnValueLoop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDebugIgnoreFocusLoss) as usize - ptr as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugIgnoreFocusLoss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDebugIniSettings) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugIniSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendPlatformName) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendRendererName) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendPlatformUserData) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendRendererUserData) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendLanguageUserData) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendLanguageUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClipboardTextFn) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(GetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetClipboardTextFn) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(SetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipboardUserData) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ClipboardUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPlatformImeDataFn) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(SetPlatformImeDataFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformLocaleDecimalPoint) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(PlatformLocaleDecimalPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantCaptureMouse) as usize - ptr as usize },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureMouse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantCaptureKeyboard) as usize - ptr as usize },
        203usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureKeyboard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantTextInput) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantTextInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantSetMousePos) as usize - ptr as usize },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSetMousePos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantSaveIniSettings) as usize - ptr as usize },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSaveIniSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavActive) as usize - ptr as usize },
        207usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavVisible) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Framerate) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Framerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsRenderVertices) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderVertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsRenderIndices) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsRenderWindows) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsActiveWindows) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsActiveWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDelta) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDelta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MousePos) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MousePos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDown) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheel) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheelH) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheelH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseSource) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseHoveredViewport) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseHoveredViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyCtrl) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyCtrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyShift) as usize - ptr as usize },
        281usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyShift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyAlt) as usize - ptr as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyAlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeySuper) as usize - ptr as usize },
        283usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeySuper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyMods) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyMods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeysData) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysData)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).WantCaptureMouseUnlessPopupClose) as usize - ptr as usize
        },
        2752usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureMouseUnlessPopupClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MousePosPrev) as usize - ptr as usize },
        2756usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MousePosPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedPos) as usize - ptr as usize },
        2764usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedTime) as usize - ptr as usize },
        2808usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClicked) as usize - ptr as usize },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClicked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDoubleClicked) as usize - ptr as usize },
        2853usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClicked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedCount) as usize - ptr as usize },
        2858usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedLastCount) as usize - ptr as usize },
        2868usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedLastCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseReleased) as usize - ptr as usize },
        2878usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseReleased)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDownOwned) as usize - ptr as usize },
        2883usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownOwned)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).MouseDownOwnedUnlessPopupClose) as usize - ptr as usize
        },
        2888usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownOwnedUnlessPopupClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheelRequestAxisSwap) as usize - ptr as usize },
        2893usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheelRequestAxisSwap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseCtrlLeftAsRightClick) as usize - ptr as usize },
        2894usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseCtrlLeftAsRightClick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDownDuration) as usize - ptr as usize },
        2896usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDuration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDownDurationPrev) as usize - ptr as usize },
        2916usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDragMaxDistanceAbs) as usize - ptr as usize },
        2936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceAbs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDragMaxDistanceSqr) as usize - ptr as usize },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceSqr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PenPressure) as usize - ptr as usize },
        2996usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(PenPressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AppFocusLost) as usize - ptr as usize },
        3000usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(AppFocusLost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AppAcceptingEvents) as usize - ptr as usize },
        3001usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(AppAcceptingEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendUsingLegacyKeyArrays) as usize - ptr as usize },
        3002usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendUsingLegacyKeyArrays)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BackendUsingLegacyNavInputArray) as usize - ptr as usize
        },
        3003usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendUsingLegacyNavInputArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputQueueSurrogate) as usize - ptr as usize },
        3004usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueSurrogate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputQueueCharacters) as usize - ptr as usize },
        3008usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueCharacters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextCallbackData {
    pub Ctx: *mut ImGuiContext,
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextCallbackData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputTextCallbackData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextCallbackData>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventFlag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventChar) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventKey) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufTextLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufTextLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufSize) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufDirty) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufDirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorPos) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectionStart) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectionEnd) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiSizeCallbackData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiSizeCallbackData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiSizeCallbackData>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSizeCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(CurrentSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DesiredSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(DesiredSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub FocusRouteParentWindowId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowClass() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiWindowClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowClass>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiWindowClass))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowClass>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClassId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ClassId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentViewportId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FocusRouteParentWindowId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(FocusRouteParentWindowId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportFlagsOverrideSet) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ViewportFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportFlagsOverrideClear) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ViewportFlagsOverrideClear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabItemFlagsOverrideSet) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(TabItemFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockNodeFlagsOverrideSet) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockNodeFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockingAlwaysTabBar) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockingAllowUnclassed) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockingAllowUnclassed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[test]
fn bindgen_test_layout_ImGuiPayload() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPayload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPayload>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPayload>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SourceId) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SourceParentId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceParentId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataFrameCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Preview) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Preview)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Delivery) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Delivery)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiOnceUponAFrame() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiOnceUponAFrame> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefFrame) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOnceUponAFrame),
            "::",
            stringify!(RefFrame)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextRange {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextRange() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextRange),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextRange),
            "::",
            stringify!(e)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTextRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTextRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTextRange() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTextRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTextRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector_ImGuiTextRange,
    pub CountGrep: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextFilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter>(),
        280usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputBuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(InputBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filters) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(Filters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CountGrep) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(CountGrep)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_char() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_char> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_char))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextBuffer),
            "::",
            stringify!(Buf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStoragePair__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_p)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStoragePair> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStoragePair {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStoragePair() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiStoragePair> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStoragePair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStorage {
    pub Data: ImVector_ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImGuiStorage() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStorage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipper {
    pub Ctx: *mut ImGuiContext,
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f32,
    pub TempData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiListClipper() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiListClipper> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipper>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipper>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayStart) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayEnd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemsCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemsHeight) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StartPosY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(StartPosY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(TempData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImColor {
    pub Value: ImVec4,
}
#[test]
fn bindgen_test_layout_ImColor() {
    const UNINIT: ::std::mem::MaybeUninit<ImColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImColor>(),
        16usize,
        concat!("Size of: ", stringify!(ImColor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImColor>(),
        4usize,
        concat!("Alignment of ", stringify!(ImColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImColor),
            "::",
            stringify!(Value)
        )
    );
}
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImDrawCmd() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawCmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmd>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VtxOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(VtxOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IdxOffset) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(IdxOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ElemCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(ElemCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserCallback) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserCallbackData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallbackData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[test]
fn bindgen_test_layout_ImDrawVert() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawVert> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawVert>(),
        20usize,
        concat!("Size of: ", stringify!(ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawVert>(),
        4usize,
        concat!("Alignment of ", stringify!(ImDrawVert))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(uv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(col)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ImDrawCmdHeader() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawCmdHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmdHeader>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawCmdHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmdHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmdHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VtxOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(VtxOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawCmd {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawCmd,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawCmd() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawCmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawCmd>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawCmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawIdx {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawIdx() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawIdx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawIdx>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawIdx))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawIdx>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawIdx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector_ImDrawCmd,
    pub _IdxBuffer: ImVector_ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImDrawChannel() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawChannel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawChannel>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._CmdBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IdxBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_IdxBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawChannel {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawChannel() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawChannel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawChannel>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawChannel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector_ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImDrawListSplitter() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawListSplitter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSplitter>(),
        24usize,
        concat!("Size of: ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSplitter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Current) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Channels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Channels)
        )
    );
}
pub const ImDrawFlags_None: ImDrawFlags_ = 0;
pub const ImDrawFlags_Closed: ImDrawFlags_ = 1;
pub const ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = 16;
pub const ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = 32;
pub const ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = 64;
pub const ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = 128;
pub const ImDrawFlags_RoundCornersNone: ImDrawFlags_ = 256;
pub const ImDrawFlags_RoundCornersTop: ImDrawFlags_ = 48;
pub const ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = 192;
pub const ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = 80;
pub const ImDrawFlags_RoundCornersRight: ImDrawFlags_ = 160;
pub const ImDrawFlags_RoundCornersAll: ImDrawFlags_ = 240;
pub const ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = 240;
pub const ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = 496;
pub type ImDrawFlags_ = ::std::os::raw::c_uint;
pub const ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawVert {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawVert,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawVert() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawVert> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawVert>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawVert>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawVert))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec2 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec2,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec2() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImVec2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec2>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec2>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec4 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec4,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec4() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImVec4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec4>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImTextureID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImTextureID,
}
#[test]
fn bindgen_test_layout_ImVector_ImTextureID() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImTextureID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImTextureID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImTextureID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImTextureID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImTextureID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector_ImDrawCmd,
    pub IdxBuffer: ImVector_ImDrawIdx,
    pub VtxBuffer: ImVector_ImDrawVert,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _Data: *mut ImDrawListSharedData,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _Path: ImVector_ImVec2,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
    pub _ClipRectStack: ImVector_ImVec4,
    pub _TextureIdStack: ImVector_ImTextureID,
    pub _FringeScale: f32,
    pub _OwnerName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImDrawList() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawList>(),
        200usize,
        concat!("Size of: ", stringify!(ImDrawList))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawList>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CmdBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IdxBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(IdxBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VtxBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(VtxBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._VtxCurrentIdx) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxCurrentIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._VtxWritePtr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxWritePtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IdxWritePtr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_IdxWritePtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Path) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._CmdHeader) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_CmdHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Splitter) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Splitter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ClipRectStack) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_ClipRectStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._TextureIdStack) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_TextureIdStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._FringeScale) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_FringeScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._OwnerName) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_OwnerName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawListPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImDrawList,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawListPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawListPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawListPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawListPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawListPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawListPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub CmdLists: ImVector_ImDrawListPtr,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImDrawData() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawData>(),
        64usize,
        concat!("Size of: ", stringify!(ImDrawData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Valid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(Valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CmdListsCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(CmdListsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalIdxCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalIdxCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalVtxCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalVtxCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CmdLists) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(CmdLists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayPos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplayPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplaySize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramebufferScale) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(FramebufferScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnerViewport) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(OwnerViewport)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontConfig {
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub FontNo: ::std::os::raw::c_int,
    pub SizePixels: f32,
    pub OversampleH: ::std::os::raw::c_int,
    pub OversampleV: ::std::os::raw::c_int,
    pub PixelSnapH: bool,
    pub GlyphExtraSpacing: ImVec2,
    pub GlyphOffset: ImVec2,
    pub GlyphRanges: *const ImWchar,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub MergeMode: bool,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub RasterizerDensity: f32,
    pub EllipsisChar: ImWchar,
    pub Name: [::std::os::raw::c_char; 40usize],
    pub DstFont: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontConfig() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontConfig>(),
        144usize,
        concat!("Size of: ", stringify!(ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDataSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDataOwnedByAtlas) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataOwnedByAtlas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontNo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizePixels) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(SizePixels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OversampleH) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OversampleV) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PixelSnapH) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(PixelSnapH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphExtraSpacing) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphExtraSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphOffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphRanges) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphRanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphMinAdvanceX) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMinAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphMaxAdvanceX) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMaxAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MergeMode) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(MergeMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilderFlags) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontBuilderFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RasterizerMultiply) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(RasterizerMultiply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RasterizerDensity) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(RasterizerDensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisChar) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DstFont) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(DstFont)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyph {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
}
#[test]
fn bindgen_test_layout_ImFontGlyph() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontGlyph> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyph>(),
        40usize,
        concat!("Size of: ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyph>(),
        4usize,
        concat!("Alignment of ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AdvanceX) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(AdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(X0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(Y0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(X1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(Y1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).U0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(U0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).V0) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(V0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).U1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(U1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).V1) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(V1)
        )
    );
}
impl ImFontGlyph {
    #[inline]
    pub fn Colored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
        Codepoint: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImU32 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU32,
}
#[test]
fn bindgen_test_layout_ImVector_ImU32() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImU32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImU32>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImU32))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImU32>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImU32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector_ImU32,
}
#[test]
fn bindgen_test_layout_ImFontGlyphRangesBuilder() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontGlyphRangesBuilder> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyphRangesBuilder>(),
        16usize,
        concat!("Size of: ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyphRangesBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UsedChars) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyphRangesBuilder),
            "::",
            stringify!(UsedChars)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasCustomRect {
    pub Width: ::std::os::raw::c_ushort,
    pub Height: ::std::os::raw::c_ushort,
    pub X: ::std::os::raw::c_ushort,
    pub Y: ::std::os::raw::c_ushort,
    pub GlyphID: ::std::os::raw::c_uint,
    pub GlyphAdvanceX: f32,
    pub GlyphOffset: ImVec2,
    pub Font: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontAtlasCustomRect() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontAtlasCustomRect> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlasCustomRect>(),
        32usize,
        concat!("Size of: ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphAdvanceX) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Font) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Font)
        )
    );
}
pub const ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontPtr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontAtlasCustomRect {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontAtlasCustomRect,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontAtlasCustomRect() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontAtlasCustomRect> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontAtlasCustomRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontConfig {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontConfig,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontConfig() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontConfig>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlas {
    pub Flags: ImFontAtlasFlags,
    pub TexID: ImTextureID,
    pub TexDesiredWidth: ::std::os::raw::c_int,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub Locked: bool,
    pub UserData: *mut ::std::os::raw::c_void,
    pub TexReady: bool,
    pub TexPixelsUseColors: bool,
    pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar,
    pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint,
    pub TexWidth: ::std::os::raw::c_int,
    pub TexHeight: ::std::os::raw::c_int,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector_ImFontPtr,
    pub CustomRects: ImVector_ImFontAtlasCustomRect,
    pub ConfigData: ImVector_ImFontConfig,
    pub TexUvLines: [ImVec4; 64usize],
    pub FontBuilderIO: *const ImFontBuilderIO,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub PackIdMouseCursors: ::std::os::raw::c_int,
    pub PackIdLines: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImFontAtlas() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontAtlas> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlas>(),
        1184usize,
        concat!("Size of: ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlas>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexDesiredWidth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexDesiredWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexGlyphPadding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexGlyphPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Locked) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexReady) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexReady)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexPixelsUseColors) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsUseColors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexPixelsAlpha8) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsAlpha8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexPixelsRGBA32) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsRGBA32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexWidth) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexHeight) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvScale) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvWhitePixel) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fonts) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CustomRects) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(CustomRects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigData) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvLines) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilderIO) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(FontBuilderIO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilderFlags) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(FontBuilderFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PackIdMouseCursors) as usize - ptr as usize },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdMouseCursors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PackIdLines) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdLines)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_float {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut f32,
}
#[test]
fn bindgen_test_layout_ImVector_float() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_float> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_float>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_float))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_float>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_float))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontGlyph {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontGlyph,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontGlyph() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontGlyph> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontGlyph>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontGlyph>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontGlyph))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFont {
    pub IndexAdvanceX: ImVector_float,
    pub FallbackAdvanceX: f32,
    pub FontSize: f32,
    pub IndexLookup: ImVector_ImWchar,
    pub Glyphs: ImVector_ImFontGlyph,
    pub FallbackGlyph: *const ImFontGlyph,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub ConfigData: *const ImFontConfig,
    pub ConfigDataCount: ::std::os::raw::c_short,
    pub FallbackChar: ImWchar,
    pub EllipsisChar: ImWchar,
    pub EllipsisCharCount: ::std::os::raw::c_short,
    pub EllipsisWidth: f32,
    pub EllipsisCharStep: f32,
    pub DirtyLookupTables: bool,
    pub Scale: f32,
    pub Ascent: f32,
    pub Descent: f32,
    pub MetricsTotalSurface: ::std::os::raw::c_int,
    pub Used4kPagesMap: [ImU8; 2usize],
}
#[test]
fn bindgen_test_layout_ImFont() {
    const UNINIT: ::std::mem::MaybeUninit<ImFont> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFont>(),
        120usize,
        concat!("Size of: ", stringify!(ImFont))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFont>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFont))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndexAdvanceX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(IndexAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackAdvanceX) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndexLookup) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(IndexLookup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Glyphs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Glyphs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackGlyph) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackGlyph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContainerAtlas) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ContainerAtlas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigData) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDataCount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ConfigDataCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackChar) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisChar) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisCharCount) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisCharCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisWidth) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisCharStep) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisCharStep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DirtyLookupTables) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(DirtyLookupTables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Scale) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ascent) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Ascent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Descent) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Descent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsTotalSurface) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(MetricsTotalSurface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Used4kPagesMap) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Used4kPagesMap)
        )
    );
}
pub const ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 512;
pub const ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 1024;
pub const ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 2048;
pub const ImGuiViewportFlags_IsMinimized: ImGuiViewportFlags_ = 4096;
pub const ImGuiViewportFlags_IsFocused: ImGuiViewportFlags_ = 8192;
pub type ImGuiViewportFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformWindowCreated: bool,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiViewport() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiViewport> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewport>(),
        96usize,
        concat!("Size of: ", stringify!(ImGuiViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewport>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkPos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(WorkPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(WorkSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DpiScale) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(DpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentViewportId) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(DrawData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RendererUserData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(RendererUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformUserData) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformHandle) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformHandleRaw) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformHandleRaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformWindowCreated) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformWindowCreated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformRequestMove) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestMove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformRequestResize) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestResize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformRequestClose) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestClose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPlatformMonitor {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPlatformMonitor,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPlatformMonitor() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiPlatformMonitor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPlatformMonitor>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPlatformMonitor>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiViewportPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformIO {
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector_ImGuiPlatformMonitor,
    pub Viewports: ImVector_ImGuiViewportPtr,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformIO() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPlatformIO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformIO>(),
        216usize,
        concat!("Size of: ", stringify!(ImGuiPlatformIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformIO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_CreateWindow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_CreateWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_DestroyWindow) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_ShowWindow) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_ShowWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowPos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowPos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowFocus) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowFocus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowFocus) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowFocus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowMinimized) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowMinimized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowTitle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowTitle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowAlpha) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_UpdateWindow) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_UpdateWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_RenderWindow) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_RenderWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SwapBuffers) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowDpiScale) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowDpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_OnChangedViewport) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_OnChangedViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_CreateVkSurface) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_CreateVkSurface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_CreateWindow) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_CreateWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_DestroyWindow) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_SetWindowSize) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_RenderWindow) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_RenderWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_SwapBuffers) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Monitors) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Monitors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Viewports) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Viewports)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformMonitor() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPlatformMonitor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformMonitor>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformMonitor>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformMonitor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MainPos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(MainPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MainSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(MainSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkPos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(WorkPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(WorkSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DpiScale) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(DpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformHandle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(PlatformHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformImeData {
    pub WantVisible: bool,
    pub InputPos: ImVec2,
    pub InputLineHeight: f32,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformImeData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPlatformImeData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformImeData>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiPlatformImeData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformImeData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformImeData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantVisible) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformImeData),
            "::",
            stringify!(WantVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputPos) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformImeData),
            "::",
            stringify!(InputPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputLineHeight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformImeData),
            "::",
            stringify!(InputLineHeight)
        )
    );
}
pub type ImGuiDataAuthority = ::std::os::raw::c_int;
pub type ImGuiLayoutType = ::std::os::raw::c_int;
pub type ImGuiActivateFlags = ::std::os::raw::c_int;
pub type ImGuiDebugLogFlags = ::std::os::raw::c_int;
pub type ImGuiFocusRequestFlags = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiItemStatusFlags = ::std::os::raw::c_int;
pub type ImGuiOldColumnFlags = ::std::os::raw::c_int;
pub type ImGuiNavHighlightFlags = ::std::os::raw::c_int;
pub type ImGuiNavMoveFlags = ::std::os::raw::c_int;
pub type ImGuiNextItemDataFlags = ::std::os::raw::c_int;
pub type ImGuiNextWindowDataFlags = ::std::os::raw::c_int;
pub type ImGuiScrollFlags = ::std::os::raw::c_int;
pub type ImGuiSeparatorFlags = ::std::os::raw::c_int;
pub type ImGuiTextFlags = ::std::os::raw::c_int;
pub type ImGuiTooltipFlags = ::std::os::raw::c_int;
pub type ImGuiTypingSelectFlags = ::std::os::raw::c_int;
pub type ImGuiWindowRefreshFlags = ::std::os::raw::c_int;
pub type ImGuiErrorLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ),
>;
extern "C" {
    pub static mut GImGui: *mut ImGuiContext;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbUndoRecord {
    pub where_: ::std::os::raw::c_int,
    pub insert_length: ::std::os::raw::c_int,
    pub delete_length: ::std::os::raw::c_int,
    pub char_storage: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StbUndoRecord() {
    const UNINIT: ::std::mem::MaybeUninit<StbUndoRecord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StbUndoRecord>(),
        16usize,
        concat!("Size of: ", stringify!(StbUndoRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<StbUndoRecord>(),
        4usize,
        concat!("Alignment of ", stringify!(StbUndoRecord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).where_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(where_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).insert_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(insert_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delete_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(delete_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_storage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(char_storage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbUndoState {
    pub undo_rec: [StbUndoRecord; 99usize],
    pub undo_char: [ImWchar; 999usize],
    pub undo_point: ::std::os::raw::c_short,
    pub redo_point: ::std::os::raw::c_short,
    pub undo_char_point: ::std::os::raw::c_int,
    pub redo_char_point: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StbUndoState() {
    const UNINIT: ::std::mem::MaybeUninit<StbUndoState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StbUndoState>(),
        3596usize,
        concat!("Size of: ", stringify!(StbUndoState))
    );
    assert_eq!(
        ::std::mem::align_of::<StbUndoState>(),
        4usize,
        concat!("Alignment of ", stringify!(StbUndoState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undo_rec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_rec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undo_char) as usize - ptr as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undo_point) as usize - ptr as usize },
        3582usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redo_point) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(redo_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undo_char_point) as usize - ptr as usize },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_char_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redo_char_point) as usize - ptr as usize },
        3592usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(redo_char_point)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct STB_TexteditState {
    pub cursor: ::std::os::raw::c_int,
    pub select_start: ::std::os::raw::c_int,
    pub select_end: ::std::os::raw::c_int,
    pub insert_mode: ::std::os::raw::c_uchar,
    pub row_count_per_page: ::std::os::raw::c_int,
    pub cursor_at_end_of_line: ::std::os::raw::c_uchar,
    pub initialized: ::std::os::raw::c_uchar,
    pub has_preferred_x: ::std::os::raw::c_uchar,
    pub single_line: ::std::os::raw::c_uchar,
    pub padding1: ::std::os::raw::c_uchar,
    pub padding2: ::std::os::raw::c_uchar,
    pub padding3: ::std::os::raw::c_uchar,
    pub preferred_x: f32,
    pub undostate: StbUndoState,
}
#[test]
fn bindgen_test_layout_STB_TexteditState() {
    const UNINIT: ::std::mem::MaybeUninit<STB_TexteditState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<STB_TexteditState>(),
        3628usize,
        concat!("Size of: ", stringify!(STB_TexteditState))
    );
    assert_eq!(
        ::std::mem::align_of::<STB_TexteditState>(),
        4usize,
        concat!("Alignment of ", stringify!(STB_TexteditState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).select_start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(select_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).select_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(select_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).insert_mode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(insert_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_count_per_page) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(row_count_per_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor_at_end_of_line) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(cursor_at_end_of_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_preferred_x) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(has_preferred_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).single_line) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(single_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preferred_x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(preferred_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undostate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(undostate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbTexteditRow {
    pub x0: f32,
    pub x1: f32,
    pub baseline_y_delta: f32,
    pub ymin: f32,
    pub ymax: f32,
    pub num_chars: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StbTexteditRow() {
    const UNINIT: ::std::mem::MaybeUninit<StbTexteditRow> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StbTexteditRow>(),
        24usize,
        concat!("Size of: ", stringify!(StbTexteditRow))
    );
    assert_eq!(
        ::std::mem::align_of::<StbTexteditRow>(),
        4usize,
        concat!("Alignment of ", stringify!(StbTexteditRow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline_y_delta) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(baseline_y_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymin) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(ymin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymax) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(ymax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_chars) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(num_chars)
        )
    );
}
pub type ImFileHandle = *mut FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec1 {
    pub x: f32,
}
#[test]
fn bindgen_test_layout_ImVec1() {
    const UNINIT: ::std::mem::MaybeUninit<ImVec1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVec1>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec1), "::", stringify!(x))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2ih {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_ImVec2ih() {
    const UNINIT: ::std::mem::MaybeUninit<ImVec2ih> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVec2ih>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec2ih))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2ih>(),
        2usize,
        concat!("Alignment of ", stringify!(ImVec2ih))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec2ih),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVec2ih),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImRect {
    pub Min: ImVec2,
    pub Max: ImVec2,
}
#[test]
fn bindgen_test_layout_ImRect() {
    const UNINIT: ::std::mem::MaybeUninit<ImRect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImRect>(),
        4usize,
        concat!("Alignment of ", stringify!(ImRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImRect),
            "::",
            stringify!(Min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImRect),
            "::",
            stringify!(Max)
        )
    );
}
pub type ImBitArrayPtr = *mut ImU32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImBitVector {
    pub Storage: ImVector_ImU32,
}
#[test]
fn bindgen_test_layout_ImBitVector() {
    const UNINIT: ::std::mem::MaybeUninit<ImBitVector> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImBitVector>(),
        16usize,
        concat!("Size of: ", stringify!(ImBitVector))
    );
    assert_eq!(
        ::std::mem::align_of::<ImBitVector>(),
        8usize,
        concat!("Alignment of ", stringify!(ImBitVector))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Storage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImBitVector),
            "::",
            stringify!(Storage)
        )
    );
}
pub type ImPoolIdx = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_int {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImVector_int() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_int> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_int>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_int))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_int>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_int))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_int),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_int),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_int),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextIndex {
    pub LineOffsets: ImVector_int,
    pub EndOffset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiTextIndex() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextIndex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextIndex>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiTextIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LineOffsets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextIndex),
            "::",
            stringify!(LineOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EndOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextIndex),
            "::",
            stringify!(EndOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSharedData {
    pub TexUvWhitePixel: ImVec2,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub ClipRectFullscreen: ImVec4,
    pub InitialFlags: ImDrawListFlags,
    pub TempBuffer: ImVector_ImVec2,
    pub ArcFastVtx: [ImVec2; 48usize],
    pub ArcFastRadiusCutoff: f32,
    pub CircleSegmentCounts: [ImU8; 64usize],
    pub TexUvLines: *const ImVec4,
}
#[test]
fn bindgen_test_layout_ImDrawListSharedData() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawListSharedData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSharedData>(),
        528usize,
        concat!("Size of: ", stringify!(ImDrawListSharedData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSharedData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSharedData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvWhitePixel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Font) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(Font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurveTessellationTol) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CircleSegmentMaxError) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CircleSegmentMaxError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRectFullscreen) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ClipRectFullscreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InitialFlags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(InitialFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempBuffer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(TempBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArcFastVtx) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ArcFastVtx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArcFastRadiusCutoff) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ArcFastRadiusCutoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CircleSegmentCounts) as usize - ptr as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CircleSegmentCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvLines) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(TexUvLines)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawDataBuilder {
    pub Layers: [*mut ImVector_ImDrawListPtr; 2usize],
    pub LayerData1: ImVector_ImDrawListPtr,
}
#[test]
fn bindgen_test_layout_ImDrawDataBuilder() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawDataBuilder> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawDataBuilder>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawDataBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawDataBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawDataBuilder))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Layers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawDataBuilder),
            "::",
            stringify!(Layers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LayerData1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawDataBuilder),
            "::",
            stringify!(LayerData1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataVarInfo {
    pub Type: ImGuiDataType,
    pub Count: ImU32,
    pub Offset: ImU32,
}
#[test]
fn bindgen_test_layout_ImGuiDataVarInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiDataVarInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataVarInfo>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiDataVarInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataVarInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiDataVarInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataVarInfo),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataVarInfo),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataVarInfo),
            "::",
            stringify!(Offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeStorage {
    pub Data: [ImU8; 8usize],
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeStorage() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiDataTypeStorage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeStorage>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeStorage>(),
        1usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeStorage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeStorage),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeInfo {
    pub Size: usize,
    pub Name: *const ::std::os::raw::c_char,
    pub PrintFmt: *const ::std::os::raw::c_char,
    pub ScanFmt: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiDataTypeInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeInfo>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintFmt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(PrintFmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScanFmt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(ScanFmt)
        )
    );
}
pub const ImGuiDataType_String: ImGuiDataTypePrivate_ = 11;
pub const ImGuiDataType_Pointer: ImGuiDataTypePrivate_ = 12;
pub const ImGuiDataType_ID: ImGuiDataTypePrivate_ = 13;
pub type ImGuiDataTypePrivate_ = ::std::os::raw::c_uint;
pub const ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags_Disabled: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags_SelectableDontClosePopup: ImGuiItemFlags_ = 32;
pub const ImGuiItemFlags_MixedValue: ImGuiItemFlags_ = 64;
pub const ImGuiItemFlags_ReadOnly: ImGuiItemFlags_ = 128;
pub const ImGuiItemFlags_NoWindowHoverableCheck: ImGuiItemFlags_ = 256;
pub const ImGuiItemFlags_AllowOverlap: ImGuiItemFlags_ = 512;
pub const ImGuiItemFlags_Inputable: ImGuiItemFlags_ = 1024;
pub const ImGuiItemFlags_HasSelectionUserData: ImGuiItemFlags_ = 2048;
pub type ImGuiItemFlags_ = ::std::os::raw::c_uint;
pub const ImGuiItemStatusFlags_None: ImGuiItemStatusFlags_ = 0;
pub const ImGuiItemStatusFlags_HoveredRect: ImGuiItemStatusFlags_ = 1;
pub const ImGuiItemStatusFlags_HasDisplayRect: ImGuiItemStatusFlags_ = 2;
pub const ImGuiItemStatusFlags_Edited: ImGuiItemStatusFlags_ = 4;
pub const ImGuiItemStatusFlags_ToggledSelection: ImGuiItemStatusFlags_ = 8;
pub const ImGuiItemStatusFlags_ToggledOpen: ImGuiItemStatusFlags_ = 16;
pub const ImGuiItemStatusFlags_HasDeactivated: ImGuiItemStatusFlags_ = 32;
pub const ImGuiItemStatusFlags_Deactivated: ImGuiItemStatusFlags_ = 64;
pub const ImGuiItemStatusFlags_HoveredWindow: ImGuiItemStatusFlags_ = 128;
pub const ImGuiItemStatusFlags_Visible: ImGuiItemStatusFlags_ = 256;
pub const ImGuiItemStatusFlags_HasClipRect: ImGuiItemStatusFlags_ = 512;
pub const ImGuiItemStatusFlags_HasShortcut: ImGuiItemStatusFlags_ = 1024;
pub type ImGuiItemStatusFlags_ = ::std::os::raw::c_uint;
pub const ImGuiHoveredFlags_DelayMask_: ImGuiHoveredFlagsPrivate_ = 245760;
pub const ImGuiHoveredFlags_AllowedMaskForIsWindowHovered: ImGuiHoveredFlagsPrivate_ = 12479;
pub const ImGuiHoveredFlags_AllowedMaskForIsItemHovered: ImGuiHoveredFlagsPrivate_ = 262048;
pub type ImGuiHoveredFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiInputTextFlags_Multiline: ImGuiInputTextFlagsPrivate_ = 67108864;
pub const ImGuiInputTextFlags_NoMarkEdited: ImGuiInputTextFlagsPrivate_ = 134217728;
pub const ImGuiInputTextFlags_MergedItem: ImGuiInputTextFlagsPrivate_ = 268435456;
pub const ImGuiInputTextFlags_LocalizeDecimalPoint: ImGuiInputTextFlagsPrivate_ = 536870912;
pub type ImGuiInputTextFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiButtonFlags_PressedOnClick: ImGuiButtonFlagsPrivate_ = 16;
pub const ImGuiButtonFlags_PressedOnClickRelease: ImGuiButtonFlagsPrivate_ = 32;
pub const ImGuiButtonFlags_PressedOnClickReleaseAnywhere: ImGuiButtonFlagsPrivate_ = 64;
pub const ImGuiButtonFlags_PressedOnRelease: ImGuiButtonFlagsPrivate_ = 128;
pub const ImGuiButtonFlags_PressedOnDoubleClick: ImGuiButtonFlagsPrivate_ = 256;
pub const ImGuiButtonFlags_PressedOnDragDropHold: ImGuiButtonFlagsPrivate_ = 512;
pub const ImGuiButtonFlags_Repeat: ImGuiButtonFlagsPrivate_ = 1024;
pub const ImGuiButtonFlags_FlattenChildren: ImGuiButtonFlagsPrivate_ = 2048;
pub const ImGuiButtonFlags_AllowOverlap: ImGuiButtonFlagsPrivate_ = 4096;
pub const ImGuiButtonFlags_DontClosePopups: ImGuiButtonFlagsPrivate_ = 8192;
pub const ImGuiButtonFlags_AlignTextBaseLine: ImGuiButtonFlagsPrivate_ = 32768;
pub const ImGuiButtonFlags_NoKeyModifiers: ImGuiButtonFlagsPrivate_ = 65536;
pub const ImGuiButtonFlags_NoHoldingActiveId: ImGuiButtonFlagsPrivate_ = 131072;
pub const ImGuiButtonFlags_NoNavFocus: ImGuiButtonFlagsPrivate_ = 262144;
pub const ImGuiButtonFlags_NoHoveredOnFocus: ImGuiButtonFlagsPrivate_ = 524288;
pub const ImGuiButtonFlags_NoSetKeyOwner: ImGuiButtonFlagsPrivate_ = 1048576;
pub const ImGuiButtonFlags_NoTestKeyOwner: ImGuiButtonFlagsPrivate_ = 2097152;
pub const ImGuiButtonFlags_PressedOnMask_: ImGuiButtonFlagsPrivate_ = 1008;
pub const ImGuiButtonFlags_PressedOnDefault_: ImGuiButtonFlagsPrivate_ = 32;
pub type ImGuiButtonFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiComboFlags_CustomPreview: ImGuiComboFlagsPrivate_ = 1048576;
pub type ImGuiComboFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiSliderFlags_Vertical: ImGuiSliderFlagsPrivate_ = 1048576;
pub const ImGuiSliderFlags_ReadOnly: ImGuiSliderFlagsPrivate_ = 2097152;
pub type ImGuiSliderFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiSelectableFlags_NoHoldingActiveID: ImGuiSelectableFlagsPrivate_ = 1048576;
pub const ImGuiSelectableFlags_SelectOnNav: ImGuiSelectableFlagsPrivate_ = 2097152;
pub const ImGuiSelectableFlags_SelectOnClick: ImGuiSelectableFlagsPrivate_ = 4194304;
pub const ImGuiSelectableFlags_SelectOnRelease: ImGuiSelectableFlagsPrivate_ = 8388608;
pub const ImGuiSelectableFlags_SpanAvailWidth: ImGuiSelectableFlagsPrivate_ = 16777216;
pub const ImGuiSelectableFlags_SetNavIdOnHover: ImGuiSelectableFlagsPrivate_ = 33554432;
pub const ImGuiSelectableFlags_NoPadWithHalfSpacing: ImGuiSelectableFlagsPrivate_ = 67108864;
pub const ImGuiSelectableFlags_NoSetKeyOwner: ImGuiSelectableFlagsPrivate_ = 134217728;
pub type ImGuiSelectableFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiTreeNodeFlags_ClipLabelForTrailingButton: ImGuiTreeNodeFlagsPrivate_ = 1048576;
pub const ImGuiTreeNodeFlags_UpsideDownArrow: ImGuiTreeNodeFlagsPrivate_ = 2097152;
pub type ImGuiTreeNodeFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiSeparatorFlags_None: ImGuiSeparatorFlags_ = 0;
pub const ImGuiSeparatorFlags_Horizontal: ImGuiSeparatorFlags_ = 1;
pub const ImGuiSeparatorFlags_Vertical: ImGuiSeparatorFlags_ = 2;
pub const ImGuiSeparatorFlags_SpanAllColumns: ImGuiSeparatorFlags_ = 4;
pub type ImGuiSeparatorFlags_ = ::std::os::raw::c_uint;
pub const ImGuiFocusRequestFlags_None: ImGuiFocusRequestFlags_ = 0;
pub const ImGuiFocusRequestFlags_RestoreFocusedChild: ImGuiFocusRequestFlags_ = 1;
pub const ImGuiFocusRequestFlags_UnlessBelowModal: ImGuiFocusRequestFlags_ = 2;
pub type ImGuiFocusRequestFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTextFlags_None: ImGuiTextFlags_ = 0;
pub const ImGuiTextFlags_NoWidthForLargeClippedText: ImGuiTextFlags_ = 1;
pub type ImGuiTextFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTooltipFlags_None: ImGuiTooltipFlags_ = 0;
pub const ImGuiTooltipFlags_OverridePrevious: ImGuiTooltipFlags_ = 2;
pub type ImGuiTooltipFlags_ = ::std::os::raw::c_uint;
pub const ImGuiLayoutType_Horizontal: ImGuiLayoutType_ = 0;
pub const ImGuiLayoutType_Vertical: ImGuiLayoutType_ = 1;
pub type ImGuiLayoutType_ = ::std::os::raw::c_uint;
pub const ImGuiLogType_None: ImGuiLogType = 0;
pub const ImGuiLogType_TTY: ImGuiLogType = 1;
pub const ImGuiLogType_File: ImGuiLogType = 2;
pub const ImGuiLogType_Buffer: ImGuiLogType = 3;
pub const ImGuiLogType_Clipboard: ImGuiLogType = 4;
pub type ImGuiLogType = ::std::os::raw::c_uint;
pub const ImGuiAxis_None: ImGuiAxis = -1;
pub const ImGuiAxis_X: ImGuiAxis = 0;
pub const ImGuiAxis_Y: ImGuiAxis = 1;
pub type ImGuiAxis = ::std::os::raw::c_int;
pub const ImGuiPlotType_Lines: ImGuiPlotType = 0;
pub const ImGuiPlotType_Histogram: ImGuiPlotType = 1;
pub type ImGuiPlotType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiColorMod {
    pub Col: ImGuiCol,
    pub BackupValue: ImVec4,
}
#[test]
fn bindgen_test_layout_ImGuiColorMod() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiColorMod> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiColorMod>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiColorMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiColorMod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Col) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColorMod),
            "::",
            stringify!(Col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupValue) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColorMod),
            "::",
            stringify!(BackupValue)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyleMod {
    pub VarIdx: ImGuiStyleVar,
    pub __bindgen_anon_1: ImGuiStyleMod__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStyleMod__bindgen_ty_1 {
    pub BackupInt: [::std::os::raw::c_int; 2usize],
    pub BackupFloat: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStyleMod__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupInt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod__bindgen_ty_1),
            "::",
            stringify!(BackupInt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupFloat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod__bindgen_ty_1),
            "::",
            stringify!(BackupFloat)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStyleMod> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VarIdx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod),
            "::",
            stringify!(VarIdx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiComboPreviewData {
    pub PreviewRect: ImRect,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupPrevLineTextBaseOffset: f32,
    pub BackupLayout: ImGuiLayoutType,
}
#[test]
fn bindgen_test_layout_ImGuiComboPreviewData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiComboPreviewData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiComboPreviewData>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiComboPreviewData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiComboPreviewData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiComboPreviewData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PreviewRect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiComboPreviewData),
            "::",
            stringify!(PreviewRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupCursorPos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiComboPreviewData),
            "::",
            stringify!(BackupCursorPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupCursorMaxPos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiComboPreviewData),
            "::",
            stringify!(BackupCursorMaxPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupCursorPosPrevLine) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiComboPreviewData),
            "::",
            stringify!(BackupCursorPosPrevLine)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BackupPrevLineTextBaseOffset) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiComboPreviewData),
            "::",
            stringify!(BackupPrevLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupLayout) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiComboPreviewData),
            "::",
            stringify!(BackupLayout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiGroupData {
    pub WindowID: ImGuiID,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupIndent: ImVec1,
    pub BackupGroupOffset: ImVec1,
    pub BackupCurrLineSize: ImVec2,
    pub BackupCurrLineTextBaseOffset: f32,
    pub BackupActiveIdIsAlive: ImGuiID,
    pub BackupActiveIdPreviousFrameIsAlive: bool,
    pub BackupHoveredIdIsAlive: bool,
    pub BackupIsSameLine: bool,
    pub EmitItem: bool,
}
#[test]
fn bindgen_test_layout_ImGuiGroupData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiGroupData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiGroupData>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiGroupData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiGroupData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(WindowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupCursorPos) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCursorPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupCursorMaxPos) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCursorMaxPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupCursorPosPrevLine) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCursorPosPrevLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupIndent) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupIndent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupGroupOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupGroupOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupCurrLineSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCurrLineSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BackupCurrLineTextBaseOffset) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCurrLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupActiveIdIsAlive) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupActiveIdIsAlive)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BackupActiveIdPreviousFrameIsAlive) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupActiveIdPreviousFrameIsAlive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupHoveredIdIsAlive) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupHoveredIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupIsSameLine) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupIsSameLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EmitItem) as usize - ptr as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(EmitItem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMenuColumns {
    pub TotalWidth: ImU32,
    pub NextTotalWidth: ImU32,
    pub Spacing: ImU16,
    pub OffsetIcon: ImU16,
    pub OffsetLabel: ImU16,
    pub OffsetShortcut: ImU16,
    pub OffsetMark: ImU16,
    pub Widths: [ImU16; 4usize],
}
#[test]
fn bindgen_test_layout_ImGuiMenuColumns() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiMenuColumns> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiMenuColumns>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiMenuColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMenuColumns>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiMenuColumns))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalWidth) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(TotalWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NextTotalWidth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(NextTotalWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Spacing) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetIcon) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(OffsetIcon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetLabel) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(OffsetLabel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetShortcut) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(OffsetShortcut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetMark) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(OffsetMark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Widths) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Widths)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextDeactivatedState {
    pub ID: ImGuiID,
    pub TextA: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextDeactivatedState() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputTextDeactivatedState> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextDeactivatedState>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiInputTextDeactivatedState))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextDeactivatedState>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextDeactivatedState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextDeactivatedState),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextA) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextDeactivatedState),
            "::",
            stringify!(TextA)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextState {
    pub Ctx: *mut ImGuiContext,
    pub ID: ImGuiID,
    pub CurLenW: ::std::os::raw::c_int,
    pub CurLenA: ::std::os::raw::c_int,
    pub TextW: ImVector_ImWchar,
    pub TextA: ImVector_char,
    pub InitialTextA: ImVector_char,
    pub TextAIsValid: bool,
    pub BufCapacityA: ::std::os::raw::c_int,
    pub ScrollX: f32,
    pub Stb: STB_TexteditState,
    pub CursorAnim: f32,
    pub CursorFollow: bool,
    pub SelectedAllMouseLock: bool,
    pub Edited: bool,
    pub Flags: ImGuiInputTextFlags,
    pub ReloadUserBuf: bool,
    pub ReloadSelectionStart: ::std::os::raw::c_int,
    pub ReloadSelectionEnd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextState() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputTextState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextState>(),
        3736usize,
        concat!("Size of: ", stringify!(ImGuiInputTextState))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextState>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurLenW) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CurLenW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurLenA) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CurLenA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextW) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextA) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InitialTextA) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(InitialTextA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextAIsValid) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextAIsValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufCapacityA) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(BufCapacityA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollX) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ScrollX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Stb) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Stb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorAnim) as usize - ptr as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CursorAnim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorFollow) as usize - ptr as usize },
        3716usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CursorFollow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectedAllMouseLock) as usize - ptr as usize },
        3717usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(SelectedAllMouseLock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Edited) as usize - ptr as usize },
        3718usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Edited)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        3720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReloadUserBuf) as usize - ptr as usize },
        3724usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ReloadUserBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReloadSelectionStart) as usize - ptr as usize },
        3728usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ReloadSelectionStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReloadSelectionEnd) as usize - ptr as usize },
        3732usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ReloadSelectionEnd)
        )
    );
}
pub const ImGuiWindowRefreshFlags_None: ImGuiWindowRefreshFlags_ = 0;
pub const ImGuiWindowRefreshFlags_TryToAvoidRefresh: ImGuiWindowRefreshFlags_ = 1;
pub const ImGuiWindowRefreshFlags_RefreshOnHover: ImGuiWindowRefreshFlags_ = 2;
pub const ImGuiWindowRefreshFlags_RefreshOnFocus: ImGuiWindowRefreshFlags_ = 4;
pub type ImGuiWindowRefreshFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNextWindowDataFlags_None: ImGuiNextWindowDataFlags_ = 0;
pub const ImGuiNextWindowDataFlags_HasPos: ImGuiNextWindowDataFlags_ = 1;
pub const ImGuiNextWindowDataFlags_HasSize: ImGuiNextWindowDataFlags_ = 2;
pub const ImGuiNextWindowDataFlags_HasContentSize: ImGuiNextWindowDataFlags_ = 4;
pub const ImGuiNextWindowDataFlags_HasCollapsed: ImGuiNextWindowDataFlags_ = 8;
pub const ImGuiNextWindowDataFlags_HasSizeConstraint: ImGuiNextWindowDataFlags_ = 16;
pub const ImGuiNextWindowDataFlags_HasFocus: ImGuiNextWindowDataFlags_ = 32;
pub const ImGuiNextWindowDataFlags_HasBgAlpha: ImGuiNextWindowDataFlags_ = 64;
pub const ImGuiNextWindowDataFlags_HasScroll: ImGuiNextWindowDataFlags_ = 128;
pub const ImGuiNextWindowDataFlags_HasChildFlags: ImGuiNextWindowDataFlags_ = 256;
pub const ImGuiNextWindowDataFlags_HasRefreshPolicy: ImGuiNextWindowDataFlags_ = 512;
pub const ImGuiNextWindowDataFlags_HasViewport: ImGuiNextWindowDataFlags_ = 1024;
pub const ImGuiNextWindowDataFlags_HasDock: ImGuiNextWindowDataFlags_ = 2048;
pub const ImGuiNextWindowDataFlags_HasWindowClass: ImGuiNextWindowDataFlags_ = 4096;
pub type ImGuiNextWindowDataFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextWindowData {
    pub Flags: ImGuiNextWindowDataFlags,
    pub PosCond: ImGuiCond,
    pub SizeCond: ImGuiCond,
    pub CollapsedCond: ImGuiCond,
    pub DockCond: ImGuiCond,
    pub PosVal: ImVec2,
    pub PosPivotVal: ImVec2,
    pub SizeVal: ImVec2,
    pub ContentSizeVal: ImVec2,
    pub ScrollVal: ImVec2,
    pub ChildFlags: ImGuiChildFlags,
    pub PosUndock: bool,
    pub CollapsedVal: bool,
    pub SizeConstraintRect: ImRect,
    pub SizeCallback: ImGuiSizeCallback,
    pub SizeCallbackUserData: *mut ::std::os::raw::c_void,
    pub BgAlphaVal: f32,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub WindowClass: ImGuiWindowClass,
    pub MenuBarOffsetMinVal: ImVec2,
    pub RefreshFlagsVal: ImGuiWindowRefreshFlags,
}
#[test]
fn bindgen_test_layout_ImGuiNextWindowData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiNextWindowData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextWindowData>(),
        160usize,
        concat!("Size of: ", stringify!(ImGuiNextWindowData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextWindowData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNextWindowData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PosCond) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosCond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeCond) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CollapsedCond) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(CollapsedCond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockCond) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(DockCond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PosVal) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PosPivotVal) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosPivotVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeVal) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentSizeVal) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ContentSizeVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollVal) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ScrollVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildFlags) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ChildFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PosUndock) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosUndock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CollapsedVal) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(CollapsedVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeConstraintRect) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeConstraintRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeCallback) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeCallbackUserData) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCallbackUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BgAlphaVal) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(BgAlphaVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportId) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockId) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(DockId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowClass) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(WindowClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MenuBarOffsetMinVal) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(MenuBarOffsetMinVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefreshFlagsVal) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(RefreshFlagsVal)
        )
    );
}
pub type ImGuiSelectionUserData = ImS64;
pub const ImGuiNextItemDataFlags_None: ImGuiNextItemDataFlags_ = 0;
pub const ImGuiNextItemDataFlags_HasWidth: ImGuiNextItemDataFlags_ = 1;
pub const ImGuiNextItemDataFlags_HasOpen: ImGuiNextItemDataFlags_ = 2;
pub const ImGuiNextItemDataFlags_HasShortcut: ImGuiNextItemDataFlags_ = 4;
pub const ImGuiNextItemDataFlags_HasRefVal: ImGuiNextItemDataFlags_ = 8;
pub type ImGuiNextItemDataFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextItemData {
    pub Flags: ImGuiNextItemDataFlags,
    pub ItemFlags: ImGuiItemFlags,
    pub SelectionUserData: ImGuiSelectionUserData,
    pub Width: f32,
    pub Shortcut: ImGuiKeyChord,
    pub ShortcutFlags: ImGuiInputFlags,
    pub OpenVal: bool,
    pub OpenCond: ImU8,
    pub RefVal: ImGuiDataTypeStorage,
}
#[test]
fn bindgen_test_layout_ImGuiNextItemData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiNextItemData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextItemData>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiNextItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextItemData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNextItemData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(ItemFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectionUserData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(SelectionUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Shortcut) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(Shortcut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortcutFlags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(ShortcutFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OpenVal) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(OpenVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OpenCond) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(OpenCond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefVal) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(RefVal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiLastItemData {
    pub ID: ImGuiID,
    pub InFlags: ImGuiItemFlags,
    pub StatusFlags: ImGuiItemStatusFlags,
    pub Rect: ImRect,
    pub NavRect: ImRect,
    pub DisplayRect: ImRect,
    pub ClipRect: ImRect,
    pub Shortcut: ImGuiKeyChord,
}
#[test]
fn bindgen_test_layout_ImGuiLastItemData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiLastItemData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiLastItemData>(),
        80usize,
        concat!("Size of: ", stringify!(ImGuiLastItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiLastItemData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiLastItemData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemData),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemData),
            "::",
            stringify!(InFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusFlags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemData),
            "::",
            stringify!(StatusFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rect) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemData),
            "::",
            stringify!(Rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavRect) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemData),
            "::",
            stringify!(NavRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayRect) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemData),
            "::",
            stringify!(DisplayRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemData),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Shortcut) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemData),
            "::",
            stringify!(Shortcut)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNavTreeNodeData {
    pub ID: ImGuiID,
    pub InFlags: ImGuiItemFlags,
    pub NavRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiNavTreeNodeData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiNavTreeNodeData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiNavTreeNodeData>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiNavTreeNodeData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNavTreeNodeData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiNavTreeNodeData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavTreeNodeData),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavTreeNodeData),
            "::",
            stringify!(InFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavRect) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavTreeNodeData),
            "::",
            stringify!(NavRect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackSizes {
    pub SizeOfIDStack: ::std::os::raw::c_short,
    pub SizeOfColorStack: ::std::os::raw::c_short,
    pub SizeOfStyleVarStack: ::std::os::raw::c_short,
    pub SizeOfFontStack: ::std::os::raw::c_short,
    pub SizeOfFocusScopeStack: ::std::os::raw::c_short,
    pub SizeOfGroupStack: ::std::os::raw::c_short,
    pub SizeOfItemFlagsStack: ::std::os::raw::c_short,
    pub SizeOfBeginPopupStack: ::std::os::raw::c_short,
    pub SizeOfDisabledStack: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_ImGuiStackSizes() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStackSizes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStackSizes>(),
        18usize,
        concat!("Size of: ", stringify!(ImGuiStackSizes))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStackSizes>(),
        2usize,
        concat!("Alignment of ", stringify!(ImGuiStackSizes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfIDStack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfIDStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfColorStack) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfColorStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfStyleVarStack) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfStyleVarStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfFontStack) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfFontStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfFocusScopeStack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfFocusScopeStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfGroupStack) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfGroupStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfItemFlagsStack) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfItemFlagsStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfBeginPopupStack) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfBeginPopupStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfDisabledStack) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfDisabledStack)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowStackData {
    pub Window: *mut ImGuiWindow,
    pub ParentLastItemDataBackup: ImGuiLastItemData,
    pub StackSizesOnBegin: ImGuiStackSizes,
    pub DisabledOverrideReenable: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowStackData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiWindowStackData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowStackData>(),
        112usize,
        concat!("Size of: ", stringify!(ImGuiWindowStackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowStackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindowStackData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowStackData),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentLastItemDataBackup) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowStackData),
            "::",
            stringify!(ParentLastItemDataBackup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StackSizesOnBegin) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowStackData),
            "::",
            stringify!(StackSizesOnBegin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisabledOverrideReenable) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowStackData),
            "::",
            stringify!(DisabledOverrideReenable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiShrinkWidthItem {
    pub Index: ::std::os::raw::c_int,
    pub Width: f32,
    pub InitialWidth: f32,
}
#[test]
fn bindgen_test_layout_ImGuiShrinkWidthItem() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiShrinkWidthItem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiShrinkWidthItem>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiShrinkWidthItem>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiShrinkWidthItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiShrinkWidthItem),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiShrinkWidthItem),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InitialWidth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiShrinkWidthItem),
            "::",
            stringify!(InitialWidth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPtrOrIndex {
    pub Ptr: *mut ::std::os::raw::c_void,
    pub Index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiPtrOrIndex() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPtrOrIndex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPtrOrIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPtrOrIndex),
            "::",
            stringify!(Ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPtrOrIndex),
            "::",
            stringify!(Index)
        )
    );
}
pub const ImGuiPopupPositionPolicy_Default: ImGuiPopupPositionPolicy = 0;
pub const ImGuiPopupPositionPolicy_ComboBox: ImGuiPopupPositionPolicy = 1;
pub const ImGuiPopupPositionPolicy_Tooltip: ImGuiPopupPositionPolicy = 2;
pub type ImGuiPopupPositionPolicy = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPopupData {
    pub PopupId: ImGuiID,
    pub Window: *mut ImGuiWindow,
    pub RestoreNavWindow: *mut ImGuiWindow,
    pub ParentNavLayer: ::std::os::raw::c_int,
    pub OpenFrameCount: ::std::os::raw::c_int,
    pub OpenParentId: ImGuiID,
    pub OpenPopupPos: ImVec2,
    pub OpenMousePos: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiPopupData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPopupData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPopupData>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPopupData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopupId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(PopupId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RestoreNavWindow) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(RestoreNavWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentNavLayer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(ParentNavLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OpenFrameCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OpenParentId) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenParentId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OpenPopupPos) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenPopupPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OpenMousePos) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenMousePos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN {
    pub Storage: [ImU32; 5usize],
}
#[test]
fn bindgen_test_layout_ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN() {
    const UNINIT: ::std::mem::MaybeUninit<
        ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Storage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN),
            "::",
            stringify!(Storage)
        )
    );
}
pub type ImBitArrayForNamedKeys = ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN;
pub const ImGuiInputEventType_None: ImGuiInputEventType = 0;
pub const ImGuiInputEventType_MousePos: ImGuiInputEventType = 1;
pub const ImGuiInputEventType_MouseWheel: ImGuiInputEventType = 2;
pub const ImGuiInputEventType_MouseButton: ImGuiInputEventType = 3;
pub const ImGuiInputEventType_MouseViewport: ImGuiInputEventType = 4;
pub const ImGuiInputEventType_Key: ImGuiInputEventType = 5;
pub const ImGuiInputEventType_Text: ImGuiInputEventType = 6;
pub const ImGuiInputEventType_Focus: ImGuiInputEventType = 7;
pub const ImGuiInputEventType_COUNT: ImGuiInputEventType = 8;
pub type ImGuiInputEventType = ::std::os::raw::c_uint;
pub const ImGuiInputSource_None: ImGuiInputSource = 0;
pub const ImGuiInputSource_Mouse: ImGuiInputSource = 1;
pub const ImGuiInputSource_Keyboard: ImGuiInputSource = 2;
pub const ImGuiInputSource_Gamepad: ImGuiInputSource = 3;
pub const ImGuiInputSource_COUNT: ImGuiInputSource = 4;
pub type ImGuiInputSource = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMousePos {
    pub PosX: f32,
    pub PosY: f32,
    pub MouseSource: ImGuiMouseSource,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventMousePos() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputEventMousePos> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventMousePos>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiInputEventMousePos))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventMousePos>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventMousePos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PosX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMousePos),
            "::",
            stringify!(PosX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PosY) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMousePos),
            "::",
            stringify!(PosY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseSource) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMousePos),
            "::",
            stringify!(MouseSource)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseWheel {
    pub WheelX: f32,
    pub WheelY: f32,
    pub MouseSource: ImGuiMouseSource,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventMouseWheel() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputEventMouseWheel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventMouseWheel>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiInputEventMouseWheel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventMouseWheel>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventMouseWheel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WheelX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMouseWheel),
            "::",
            stringify!(WheelX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WheelY) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMouseWheel),
            "::",
            stringify!(WheelY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseSource) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMouseWheel),
            "::",
            stringify!(MouseSource)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseButton {
    pub Button: ::std::os::raw::c_int,
    pub Down: bool,
    pub MouseSource: ImGuiMouseSource,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventMouseButton() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputEventMouseButton> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventMouseButton>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiInputEventMouseButton))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventMouseButton>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventMouseButton))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Button) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMouseButton),
            "::",
            stringify!(Button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Down) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMouseButton),
            "::",
            stringify!(Down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseSource) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMouseButton),
            "::",
            stringify!(MouseSource)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseViewport {
    pub HoveredViewportID: ImGuiID,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventMouseViewport() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputEventMouseViewport> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventMouseViewport>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiInputEventMouseViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventMouseViewport>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventMouseViewport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredViewportID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventMouseViewport),
            "::",
            stringify!(HoveredViewportID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventKey {
    pub Key: ImGuiKey,
    pub Down: bool,
    pub AnalogValue: f32,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventKey() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputEventKey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventKey>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiInputEventKey))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventKey>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventKey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventKey),
            "::",
            stringify!(Key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Down) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventKey),
            "::",
            stringify!(Down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AnalogValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventKey),
            "::",
            stringify!(AnalogValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventText {
    pub Char: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventText() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputEventText> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventText>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiInputEventText))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventText>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventText))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Char) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventText),
            "::",
            stringify!(Char)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventAppFocused {
    pub Focused: bool,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventAppFocused() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputEventAppFocused> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventAppFocused>(),
        1usize,
        concat!("Size of: ", stringify!(ImGuiInputEventAppFocused))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventAppFocused>(),
        1usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventAppFocused))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Focused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEventAppFocused),
            "::",
            stringify!(Focused)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiInputEvent {
    pub Type: ImGuiInputEventType,
    pub Source: ImGuiInputSource,
    pub EventId: ImU32,
    pub __bindgen_anon_1: ImGuiInputEvent__bindgen_ty_1,
    pub AddedByTestEngine: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiInputEvent__bindgen_ty_1 {
    pub MousePos: ImGuiInputEventMousePos,
    pub MouseWheel: ImGuiInputEventMouseWheel,
    pub MouseButton: ImGuiInputEventMouseButton,
    pub MouseViewport: ImGuiInputEventMouseViewport,
    pub Key: ImGuiInputEventKey,
    pub Text: ImGuiInputEventText,
    pub AppFocused: ImGuiInputEventAppFocused,
}
#[test]
fn bindgen_test_layout_ImGuiInputEvent__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputEvent__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEvent__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiInputEvent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEvent__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEvent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MousePos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent__bindgen_ty_1),
            "::",
            stringify!(MousePos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent__bindgen_ty_1),
            "::",
            stringify!(MouseWheel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseButton) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent__bindgen_ty_1),
            "::",
            stringify!(MouseButton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseViewport) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent__bindgen_ty_1),
            "::",
            stringify!(MouseViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent__bindgen_ty_1),
            "::",
            stringify!(Key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent__bindgen_ty_1),
            "::",
            stringify!(Text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AppFocused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent__bindgen_ty_1),
            "::",
            stringify!(AppFocused)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiInputEvent() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEvent>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiInputEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Source) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent),
            "::",
            stringify!(Source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent),
            "::",
            stringify!(EventId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddedByTestEngine) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputEvent),
            "::",
            stringify!(AddedByTestEngine)
        )
    );
}
pub type ImGuiKeyRoutingIndex = ImS16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyRoutingData {
    pub NextEntryIndex: ImGuiKeyRoutingIndex,
    pub Mods: ImU16,
    pub RoutingCurrScore: ImU8,
    pub RoutingNextScore: ImU8,
    pub RoutingCurr: ImGuiID,
    pub RoutingNext: ImGuiID,
}
#[test]
fn bindgen_test_layout_ImGuiKeyRoutingData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiKeyRoutingData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiKeyRoutingData>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiKeyRoutingData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiKeyRoutingData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiKeyRoutingData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NextEntryIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyRoutingData),
            "::",
            stringify!(NextEntryIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mods) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyRoutingData),
            "::",
            stringify!(Mods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RoutingCurrScore) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyRoutingData),
            "::",
            stringify!(RoutingCurrScore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RoutingNextScore) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyRoutingData),
            "::",
            stringify!(RoutingNextScore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RoutingCurr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyRoutingData),
            "::",
            stringify!(RoutingCurr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RoutingNext) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyRoutingData),
            "::",
            stringify!(RoutingNext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiKeyRoutingData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiKeyRoutingData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiKeyRoutingData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiKeyRoutingData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiKeyRoutingData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiKeyRoutingData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiKeyRoutingData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiKeyRoutingData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiKeyRoutingData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiKeyRoutingData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiKeyRoutingData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyRoutingTable {
    pub Index: [ImGuiKeyRoutingIndex; 154usize],
    pub Entries: ImVector_ImGuiKeyRoutingData,
    pub EntriesNext: ImVector_ImGuiKeyRoutingData,
}
#[test]
fn bindgen_test_layout_ImGuiKeyRoutingTable() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiKeyRoutingTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiKeyRoutingTable>(),
        344usize,
        concat!("Size of: ", stringify!(ImGuiKeyRoutingTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiKeyRoutingTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiKeyRoutingTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyRoutingTable),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Entries) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyRoutingTable),
            "::",
            stringify!(Entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EntriesNext) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyRoutingTable),
            "::",
            stringify!(EntriesNext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyOwnerData {
    pub OwnerCurr: ImGuiID,
    pub OwnerNext: ImGuiID,
    pub LockThisFrame: bool,
    pub LockUntilRelease: bool,
}
#[test]
fn bindgen_test_layout_ImGuiKeyOwnerData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiKeyOwnerData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiKeyOwnerData>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiKeyOwnerData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiKeyOwnerData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiKeyOwnerData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnerCurr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyOwnerData),
            "::",
            stringify!(OwnerCurr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnerNext) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyOwnerData),
            "::",
            stringify!(OwnerNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LockThisFrame) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyOwnerData),
            "::",
            stringify!(LockThisFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LockUntilRelease) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyOwnerData),
            "::",
            stringify!(LockUntilRelease)
        )
    );
}
pub const ImGuiInputFlags_RepeatRateDefault: ImGuiInputFlagsPrivate_ = 2;
pub const ImGuiInputFlags_RepeatRateNavMove: ImGuiInputFlagsPrivate_ = 4;
pub const ImGuiInputFlags_RepeatRateNavTweak: ImGuiInputFlagsPrivate_ = 8;
pub const ImGuiInputFlags_RepeatUntilRelease: ImGuiInputFlagsPrivate_ = 16;
pub const ImGuiInputFlags_RepeatUntilKeyModsChange: ImGuiInputFlagsPrivate_ = 32;
pub const ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone: ImGuiInputFlagsPrivate_ = 64;
pub const ImGuiInputFlags_RepeatUntilOtherKeyPress: ImGuiInputFlagsPrivate_ = 128;
pub const ImGuiInputFlags_LockThisFrame: ImGuiInputFlagsPrivate_ = 1048576;
pub const ImGuiInputFlags_LockUntilRelease: ImGuiInputFlagsPrivate_ = 2097152;
pub const ImGuiInputFlags_CondHovered: ImGuiInputFlagsPrivate_ = 4194304;
pub const ImGuiInputFlags_CondActive: ImGuiInputFlagsPrivate_ = 8388608;
pub const ImGuiInputFlags_CondDefault_: ImGuiInputFlagsPrivate_ = 12582912;
pub const ImGuiInputFlags_RepeatRateMask_: ImGuiInputFlagsPrivate_ = 14;
pub const ImGuiInputFlags_RepeatUntilMask_: ImGuiInputFlagsPrivate_ = 240;
pub const ImGuiInputFlags_RepeatMask_: ImGuiInputFlagsPrivate_ = 255;
pub const ImGuiInputFlags_CondMask_: ImGuiInputFlagsPrivate_ = 12582912;
pub const ImGuiInputFlags_RouteTypeMask_: ImGuiInputFlagsPrivate_ = 15360;
pub const ImGuiInputFlags_RouteOptionsMask_: ImGuiInputFlagsPrivate_ = 245760;
pub const ImGuiInputFlags_SupportedByIsKeyPressed: ImGuiInputFlagsPrivate_ = 255;
pub const ImGuiInputFlags_SupportedByIsMouseClicked: ImGuiInputFlagsPrivate_ = 1;
pub const ImGuiInputFlags_SupportedByShortcut: ImGuiInputFlagsPrivate_ = 261375;
pub const ImGuiInputFlags_SupportedBySetNextItemShortcut: ImGuiInputFlagsPrivate_ = 523519;
pub const ImGuiInputFlags_SupportedBySetKeyOwner: ImGuiInputFlagsPrivate_ = 3145728;
pub const ImGuiInputFlags_SupportedBySetItemKeyOwner: ImGuiInputFlagsPrivate_ = 15728640;
pub type ImGuiInputFlagsPrivate_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipperRange {
    pub Min: ::std::os::raw::c_int,
    pub Max: ::std::os::raw::c_int,
    pub PosToIndexConvert: bool,
    pub PosToIndexOffsetMin: ImS8,
    pub PosToIndexOffsetMax: ImS8,
}
#[test]
fn bindgen_test_layout_ImGuiListClipperRange() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiListClipperRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipperRange>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiListClipperRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipperRange>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiListClipperRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperRange),
            "::",
            stringify!(Min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperRange),
            "::",
            stringify!(Max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PosToIndexConvert) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperRange),
            "::",
            stringify!(PosToIndexConvert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PosToIndexOffsetMin) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperRange),
            "::",
            stringify!(PosToIndexOffsetMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PosToIndexOffsetMax) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperRange),
            "::",
            stringify!(PosToIndexOffsetMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiListClipperRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiListClipperRange() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiListClipperRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiListClipperRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiListClipperRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiListClipperRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiListClipperRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperRange),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperRange),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperRange),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipperData {
    pub ListClipper: *mut ImGuiListClipper,
    pub LossynessOffset: f32,
    pub StepNo: ::std::os::raw::c_int,
    pub ItemsFrozen: ::std::os::raw::c_int,
    pub Ranges: ImVector_ImGuiListClipperRange,
}
#[test]
fn bindgen_test_layout_ImGuiListClipperData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiListClipperData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipperData>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiListClipperData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipperData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiListClipperData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ListClipper) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperData),
            "::",
            stringify!(ListClipper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LossynessOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperData),
            "::",
            stringify!(LossynessOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StepNo) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperData),
            "::",
            stringify!(StepNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemsFrozen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperData),
            "::",
            stringify!(ItemsFrozen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ranges) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipperData),
            "::",
            stringify!(Ranges)
        )
    );
}
pub const ImGuiActivateFlags_None: ImGuiActivateFlags_ = 0;
pub const ImGuiActivateFlags_PreferInput: ImGuiActivateFlags_ = 1;
pub const ImGuiActivateFlags_PreferTweak: ImGuiActivateFlags_ = 2;
pub const ImGuiActivateFlags_TryToPreserveState: ImGuiActivateFlags_ = 4;
pub const ImGuiActivateFlags_FromTabbing: ImGuiActivateFlags_ = 8;
pub const ImGuiActivateFlags_FromShortcut: ImGuiActivateFlags_ = 16;
pub type ImGuiActivateFlags_ = ::std::os::raw::c_uint;
pub const ImGuiScrollFlags_None: ImGuiScrollFlags_ = 0;
pub const ImGuiScrollFlags_KeepVisibleEdgeX: ImGuiScrollFlags_ = 1;
pub const ImGuiScrollFlags_KeepVisibleEdgeY: ImGuiScrollFlags_ = 2;
pub const ImGuiScrollFlags_KeepVisibleCenterX: ImGuiScrollFlags_ = 4;
pub const ImGuiScrollFlags_KeepVisibleCenterY: ImGuiScrollFlags_ = 8;
pub const ImGuiScrollFlags_AlwaysCenterX: ImGuiScrollFlags_ = 16;
pub const ImGuiScrollFlags_AlwaysCenterY: ImGuiScrollFlags_ = 32;
pub const ImGuiScrollFlags_NoScrollParent: ImGuiScrollFlags_ = 64;
pub const ImGuiScrollFlags_MaskX_: ImGuiScrollFlags_ = 21;
pub const ImGuiScrollFlags_MaskY_: ImGuiScrollFlags_ = 42;
pub type ImGuiScrollFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavHighlightFlags_None: ImGuiNavHighlightFlags_ = 0;
pub const ImGuiNavHighlightFlags_Compact: ImGuiNavHighlightFlags_ = 2;
pub const ImGuiNavHighlightFlags_AlwaysDraw: ImGuiNavHighlightFlags_ = 4;
pub const ImGuiNavHighlightFlags_NoRounding: ImGuiNavHighlightFlags_ = 8;
pub type ImGuiNavHighlightFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavMoveFlags_None: ImGuiNavMoveFlags_ = 0;
pub const ImGuiNavMoveFlags_LoopX: ImGuiNavMoveFlags_ = 1;
pub const ImGuiNavMoveFlags_LoopY: ImGuiNavMoveFlags_ = 2;
pub const ImGuiNavMoveFlags_WrapX: ImGuiNavMoveFlags_ = 4;
pub const ImGuiNavMoveFlags_WrapY: ImGuiNavMoveFlags_ = 8;
pub const ImGuiNavMoveFlags_WrapMask_: ImGuiNavMoveFlags_ = 15;
pub const ImGuiNavMoveFlags_AllowCurrentNavId: ImGuiNavMoveFlags_ = 16;
pub const ImGuiNavMoveFlags_AlsoScoreVisibleSet: ImGuiNavMoveFlags_ = 32;
pub const ImGuiNavMoveFlags_ScrollToEdgeY: ImGuiNavMoveFlags_ = 64;
pub const ImGuiNavMoveFlags_Forwarded: ImGuiNavMoveFlags_ = 128;
pub const ImGuiNavMoveFlags_DebugNoResult: ImGuiNavMoveFlags_ = 256;
pub const ImGuiNavMoveFlags_FocusApi: ImGuiNavMoveFlags_ = 512;
pub const ImGuiNavMoveFlags_IsTabbing: ImGuiNavMoveFlags_ = 1024;
pub const ImGuiNavMoveFlags_IsPageMove: ImGuiNavMoveFlags_ = 2048;
pub const ImGuiNavMoveFlags_Activate: ImGuiNavMoveFlags_ = 4096;
pub const ImGuiNavMoveFlags_NoSelect: ImGuiNavMoveFlags_ = 8192;
pub const ImGuiNavMoveFlags_NoSetNavHighlight: ImGuiNavMoveFlags_ = 16384;
pub const ImGuiNavMoveFlags_NoClearActiveId: ImGuiNavMoveFlags_ = 32768;
pub type ImGuiNavMoveFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavLayer_Main: ImGuiNavLayer = 0;
pub const ImGuiNavLayer_Menu: ImGuiNavLayer = 1;
pub const ImGuiNavLayer_COUNT: ImGuiNavLayer = 2;
pub type ImGuiNavLayer = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNavItemData {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub FocusScopeId: ImGuiID,
    pub RectRel: ImRect,
    pub InFlags: ImGuiItemFlags,
    pub DistBox: f32,
    pub DistCenter: f32,
    pub DistAxial: f32,
    pub SelectionUserData: ImGuiSelectionUserData,
}
#[test]
fn bindgen_test_layout_ImGuiNavItemData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiNavItemData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiNavItemData>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiNavItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNavItemData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNavItemData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavItemData),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavItemData),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FocusScopeId) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavItemData),
            "::",
            stringify!(FocusScopeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RectRel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavItemData),
            "::",
            stringify!(RectRel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InFlags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavItemData),
            "::",
            stringify!(InFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DistBox) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavItemData),
            "::",
            stringify!(DistBox)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DistCenter) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavItemData),
            "::",
            stringify!(DistCenter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DistAxial) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavItemData),
            "::",
            stringify!(DistAxial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectionUserData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavItemData),
            "::",
            stringify!(SelectionUserData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiFocusScopeData {
    pub ID: ImGuiID,
    pub WindowID: ImGuiID,
}
#[test]
fn bindgen_test_layout_ImGuiFocusScopeData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiFocusScopeData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiFocusScopeData>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiFocusScopeData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiFocusScopeData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiFocusScopeData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiFocusScopeData),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowID) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiFocusScopeData),
            "::",
            stringify!(WindowID)
        )
    );
}
pub const ImGuiTypingSelectFlags_None: ImGuiTypingSelectFlags_ = 0;
pub const ImGuiTypingSelectFlags_AllowBackspace: ImGuiTypingSelectFlags_ = 1;
pub const ImGuiTypingSelectFlags_AllowSingleCharMode: ImGuiTypingSelectFlags_ = 2;
pub type ImGuiTypingSelectFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTypingSelectRequest {
    pub Flags: ImGuiTypingSelectFlags,
    pub SearchBufferLen: ::std::os::raw::c_int,
    pub SearchBuffer: *const ::std::os::raw::c_char,
    pub SelectRequest: bool,
    pub SingleCharMode: bool,
    pub SingleCharSize: ImS8,
}
#[test]
fn bindgen_test_layout_ImGuiTypingSelectRequest() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTypingSelectRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTypingSelectRequest>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiTypingSelectRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTypingSelectRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTypingSelectRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectRequest),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SearchBufferLen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectRequest),
            "::",
            stringify!(SearchBufferLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SearchBuffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectRequest),
            "::",
            stringify!(SearchBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectRequest) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectRequest),
            "::",
            stringify!(SelectRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SingleCharMode) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectRequest),
            "::",
            stringify!(SingleCharMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SingleCharSize) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectRequest),
            "::",
            stringify!(SingleCharSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTypingSelectState {
    pub Request: ImGuiTypingSelectRequest,
    pub SearchBuffer: [::std::os::raw::c_char; 64usize],
    pub FocusScope: ImGuiID,
    pub LastRequestFrame: ::std::os::raw::c_int,
    pub LastRequestTime: f32,
    pub SingleCharModeLock: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTypingSelectState() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTypingSelectState> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTypingSelectState>(),
        104usize,
        concat!("Size of: ", stringify!(ImGuiTypingSelectState))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTypingSelectState>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTypingSelectState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectState),
            "::",
            stringify!(Request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SearchBuffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectState),
            "::",
            stringify!(SearchBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FocusScope) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectState),
            "::",
            stringify!(FocusScope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastRequestFrame) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectState),
            "::",
            stringify!(LastRequestFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastRequestTime) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectState),
            "::",
            stringify!(LastRequestTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SingleCharModeLock) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTypingSelectState),
            "::",
            stringify!(SingleCharModeLock)
        )
    );
}
pub const ImGuiOldColumnFlags_None: ImGuiOldColumnFlags_ = 0;
pub const ImGuiOldColumnFlags_NoBorder: ImGuiOldColumnFlags_ = 1;
pub const ImGuiOldColumnFlags_NoResize: ImGuiOldColumnFlags_ = 2;
pub const ImGuiOldColumnFlags_NoPreserveWidths: ImGuiOldColumnFlags_ = 4;
pub const ImGuiOldColumnFlags_NoForceWithinWindow: ImGuiOldColumnFlags_ = 8;
pub const ImGuiOldColumnFlags_GrowParentContentsSize: ImGuiOldColumnFlags_ = 16;
pub type ImGuiOldColumnFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumnData {
    pub OffsetNorm: f32,
    pub OffsetNormBeforeResize: f32,
    pub Flags: ImGuiOldColumnFlags,
    pub ClipRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiOldColumnData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiOldColumnData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiOldColumnData>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiOldColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOldColumnData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOldColumnData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetNorm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(OffsetNorm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetNormBeforeResize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(OffsetNormBeforeResize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(ClipRect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumnData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumnData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiOldColumnData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiOldColumnData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiOldColumnData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiOldColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiOldColumnData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiOldColumnData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumnData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumnData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumnData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumns {
    pub ID: ImGuiID,
    pub Flags: ImGuiOldColumnFlags,
    pub IsFirstFrame: bool,
    pub IsBeingResized: bool,
    pub Current: ::std::os::raw::c_int,
    pub Count: ::std::os::raw::c_int,
    pub OffMinX: f32,
    pub OffMaxX: f32,
    pub LineMinY: f32,
    pub LineMaxY: f32,
    pub HostCursorPosY: f32,
    pub HostCursorMaxPosX: f32,
    pub HostInitialClipRect: ImRect,
    pub HostBackupClipRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub Columns: ImVector_ImGuiOldColumnData,
    pub Splitter: ImDrawListSplitter,
}
#[test]
fn bindgen_test_layout_ImGuiOldColumns() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiOldColumns> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiOldColumns>(),
        136usize,
        concat!("Size of: ", stringify!(ImGuiOldColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOldColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiOldColumns))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsFirstFrame) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(IsFirstFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsBeingResized) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(IsBeingResized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Current) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffMinX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(OffMinX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffMaxX) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(OffMaxX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LineMinY) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(LineMinY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LineMaxY) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(LineMaxY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostCursorPosY) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostCursorPosY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostCursorMaxPosX) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostCursorMaxPosX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostInitialClipRect) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostInitialClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupClipRect) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostBackupClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupParentWorkRect) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostBackupParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Columns) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Columns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Splitter) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Splitter)
        )
    );
}
pub const ImGuiDockNodeFlags_DockSpace: ImGuiDockNodeFlagsPrivate_ = 1024;
pub const ImGuiDockNodeFlags_CentralNode: ImGuiDockNodeFlagsPrivate_ = 2048;
pub const ImGuiDockNodeFlags_NoTabBar: ImGuiDockNodeFlagsPrivate_ = 4096;
pub const ImGuiDockNodeFlags_HiddenTabBar: ImGuiDockNodeFlagsPrivate_ = 8192;
pub const ImGuiDockNodeFlags_NoWindowMenuButton: ImGuiDockNodeFlagsPrivate_ = 16384;
pub const ImGuiDockNodeFlags_NoCloseButton: ImGuiDockNodeFlagsPrivate_ = 32768;
pub const ImGuiDockNodeFlags_NoResizeX: ImGuiDockNodeFlagsPrivate_ = 65536;
pub const ImGuiDockNodeFlags_NoResizeY: ImGuiDockNodeFlagsPrivate_ = 131072;
pub const ImGuiDockNodeFlags_DockedWindowsInFocusRoute: ImGuiDockNodeFlagsPrivate_ = 262144;
pub const ImGuiDockNodeFlags_NoDockingSplitOther: ImGuiDockNodeFlagsPrivate_ = 524288;
pub const ImGuiDockNodeFlags_NoDockingOverMe: ImGuiDockNodeFlagsPrivate_ = 1048576;
pub const ImGuiDockNodeFlags_NoDockingOverOther: ImGuiDockNodeFlagsPrivate_ = 2097152;
pub const ImGuiDockNodeFlags_NoDockingOverEmpty: ImGuiDockNodeFlagsPrivate_ = 4194304;
pub const ImGuiDockNodeFlags_NoDocking: ImGuiDockNodeFlagsPrivate_ = 7864336;
pub const ImGuiDockNodeFlags_SharedFlagsInheritMask_: ImGuiDockNodeFlagsPrivate_ = -1;
pub const ImGuiDockNodeFlags_NoResizeFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 196640;
pub const ImGuiDockNodeFlags_LocalFlagsTransferMask_: ImGuiDockNodeFlagsPrivate_ = 260208;
pub const ImGuiDockNodeFlags_SavedFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 261152;
pub type ImGuiDockNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiDataAuthority_Auto: ImGuiDataAuthority_ = 0;
pub const ImGuiDataAuthority_DockNode: ImGuiDataAuthority_ = 1;
pub const ImGuiDataAuthority_Window: ImGuiDataAuthority_ = 2;
pub type ImGuiDataAuthority_ = ::std::os::raw::c_uint;
pub const ImGuiDockNodeState_Unknown: ImGuiDockNodeState = 0;
pub const ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow: ImGuiDockNodeState = 1;
pub const ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing: ImGuiDockNodeState = 2;
pub const ImGuiDockNodeState_HostWindowVisible: ImGuiDockNodeState = 3;
pub type ImGuiDockNodeState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiWindow,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiWindowPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNode {
    pub ID: ImGuiID,
    pub SharedFlags: ImGuiDockNodeFlags,
    pub LocalFlags: ImGuiDockNodeFlags,
    pub LocalFlagsInWindows: ImGuiDockNodeFlags,
    pub MergedFlags: ImGuiDockNodeFlags,
    pub State: ImGuiDockNodeState,
    pub ParentNode: *mut ImGuiDockNode,
    pub ChildNodes: [*mut ImGuiDockNode; 2usize],
    pub Windows: ImVector_ImGuiWindowPtr,
    pub TabBar: *mut ImGuiTabBar,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeRef: ImVec2,
    pub SplitAxis: ImGuiAxis,
    pub WindowClass: ImGuiWindowClass,
    pub LastBgColor: ImU32,
    pub HostWindow: *mut ImGuiWindow,
    pub VisibleWindow: *mut ImGuiWindow,
    pub CentralNode: *mut ImGuiDockNode,
    pub OnlyNodeWithWindows: *mut ImGuiDockNode,
    pub CountNodeWithWindows: ::std::os::raw::c_int,
    pub LastFrameAlive: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameFocused: ::std::os::raw::c_int,
    pub LastFocusedNodeId: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub WantCloseTabId: ImGuiID,
    pub RefViewportId: ImGuiID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
#[test]
fn bindgen_test_layout_ImGuiDockNode() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiDockNode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiDockNode>(),
        208usize,
        concat!("Size of: ", stringify!(ImGuiDockNode))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDockNode>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDockNode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SharedFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SharedFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocalFlags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LocalFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocalFlagsInWindows) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LocalFlagsInWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MergedFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(MergedFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentNode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(ParentNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildNodes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(ChildNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Windows) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(Windows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabBar) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(TabBar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeRef) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SizeRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SplitAxis) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SplitAxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowClass) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(WindowClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastBgColor) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastBgColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostWindow) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(HostWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VisibleWindow) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(VisibleWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CentralNode) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(CentralNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OnlyNodeWithWindows) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(OnlyNodeWithWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CountNodeWithWindows) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(CountNodeWithWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrameAlive) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFrameAlive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrameActive) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrameFocused) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFrameFocused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFocusedNodeId) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFocusedNodeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectedTabId) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SelectedTabId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantCloseTabId) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(WantCloseTabId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefViewportId) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(RefViewportId)
        )
    );
}
impl ImGuiDockNode {
    #[inline]
    pub fn AuthorityForPos(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForPos(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn AuthorityForSize(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForSize(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn AuthorityForViewport(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForViewport(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn IsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsFocused(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsFocused(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsBgDrawnThisFrame(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsBgDrawnThisFrame(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasCloseButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCloseButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasWindowMenuButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasWindowMenuButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasCentralNodeChild(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCentralNodeChild(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantCloseAll(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantCloseAll(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantLockSizeOnce(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantLockSizeOnce(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantMouseMove(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantMouseMove(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantHiddenTabBarUpdate(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarUpdate(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantHiddenTabBarToggle(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarToggle(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AuthorityForPos: ImGuiDataAuthority,
        AuthorityForSize: ImGuiDataAuthority,
        AuthorityForViewport: ImGuiDataAuthority,
        IsVisible: bool,
        IsFocused: bool,
        IsBgDrawnThisFrame: bool,
        HasCloseButton: bool,
        HasWindowMenuButton: bool,
        HasCentralNodeChild: bool,
        WantCloseAll: bool,
        WantLockSizeOnce: bool,
        WantMouseMove: bool,
        WantHiddenTabBarUpdate: bool,
        WantHiddenTabBarToggle: bool,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let AuthorityForPos: u32 = unsafe { ::std::mem::transmute(AuthorityForPos) };
            AuthorityForPos as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let AuthorityForSize: u32 = unsafe { ::std::mem::transmute(AuthorityForSize) };
            AuthorityForSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let AuthorityForViewport: u32 = unsafe { ::std::mem::transmute(AuthorityForViewport) };
            AuthorityForViewport as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let IsVisible: u8 = unsafe { ::std::mem::transmute(IsVisible) };
            IsVisible as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let IsFocused: u8 = unsafe { ::std::mem::transmute(IsFocused) };
            IsFocused as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let IsBgDrawnThisFrame: u8 = unsafe { ::std::mem::transmute(IsBgDrawnThisFrame) };
            IsBgDrawnThisFrame as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let HasCloseButton: u8 = unsafe { ::std::mem::transmute(HasCloseButton) };
            HasCloseButton as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let HasWindowMenuButton: u8 = unsafe { ::std::mem::transmute(HasWindowMenuButton) };
            HasWindowMenuButton as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let HasCentralNodeChild: u8 = unsafe { ::std::mem::transmute(HasCentralNodeChild) };
            HasCentralNodeChild as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let WantCloseAll: u8 = unsafe { ::std::mem::transmute(WantCloseAll) };
            WantCloseAll as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let WantLockSizeOnce: u8 = unsafe { ::std::mem::transmute(WantLockSizeOnce) };
            WantLockSizeOnce as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let WantMouseMove: u8 = unsafe { ::std::mem::transmute(WantMouseMove) };
            WantMouseMove as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let WantHiddenTabBarUpdate: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarUpdate) };
            WantHiddenTabBarUpdate as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let WantHiddenTabBarToggle: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarToggle) };
            WantHiddenTabBarToggle as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ImGuiWindowDockStyleCol_Text: ImGuiWindowDockStyleCol = 0;
pub const ImGuiWindowDockStyleCol_Tab: ImGuiWindowDockStyleCol = 1;
pub const ImGuiWindowDockStyleCol_TabHovered: ImGuiWindowDockStyleCol = 2;
pub const ImGuiWindowDockStyleCol_TabActive: ImGuiWindowDockStyleCol = 3;
pub const ImGuiWindowDockStyleCol_TabUnfocused: ImGuiWindowDockStyleCol = 4;
pub const ImGuiWindowDockStyleCol_TabUnfocusedActive: ImGuiWindowDockStyleCol = 5;
pub const ImGuiWindowDockStyleCol_COUNT: ImGuiWindowDockStyleCol = 6;
pub type ImGuiWindowDockStyleCol = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowDockStyle {
    pub Colors: [ImU32; 6usize],
}
#[test]
fn bindgen_test_layout_ImGuiWindowDockStyle() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiWindowDockStyle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowDockStyle>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiWindowDockStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowDockStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowDockStyle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Colors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowDockStyle),
            "::",
            stringify!(Colors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockRequest {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockRequest,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockRequest() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiDockRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockRequest>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockNodeSettings {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockNodeSettings,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockNodeSettings() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiDockNodeSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockNodeSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockNodeSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockContext {
    pub Nodes: ImGuiStorage,
    pub Requests: ImVector_ImGuiDockRequest,
    pub NodesSettings: ImVector_ImGuiDockNodeSettings,
    pub WantFullRebuild: bool,
}
#[test]
fn bindgen_test_layout_ImGuiDockContext() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiDockContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiDockContext>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiDockContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDockContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDockContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Nodes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(Nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Requests) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(Requests)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NodesSettings) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(NodesSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantFullRebuild) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(WantFullRebuild)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiViewportP {
    pub _ImGuiViewport: ImGuiViewport,
    pub Window: *mut ImGuiWindow,
    pub Idx: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFocusedStampCount: ::std::os::raw::c_int,
    pub LastNameHash: ImGuiID,
    pub LastPos: ImVec2,
    pub Alpha: f32,
    pub LastAlpha: f32,
    pub LastFocusedHadNavWindow: bool,
    pub PlatformMonitor: ::std::os::raw::c_short,
    pub BgFgDrawListsLastFrame: [::std::os::raw::c_int; 2usize],
    pub BgFgDrawLists: [*mut ImDrawList; 2usize],
    pub DrawDataP: ImDrawData,
    pub DrawDataBuilder: ImDrawDataBuilder,
    pub LastPlatformPos: ImVec2,
    pub LastPlatformSize: ImVec2,
    pub LastRendererSize: ImVec2,
    pub WorkOffsetMin: ImVec2,
    pub WorkOffsetMax: ImVec2,
    pub BuildWorkOffsetMin: ImVec2,
    pub BuildWorkOffsetMax: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiViewportP() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiViewportP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewportP>(),
        320usize,
        concat!("Size of: ", stringify!(ImGuiViewportP))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewportP>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewportP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ImGuiViewport) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(_ImGuiViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Idx) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(Idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrameActive) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFocusedStampCount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastFocusedStampCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastNameHash) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastNameHash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastPos) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Alpha) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(Alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastAlpha) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFocusedHadNavWindow) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastFocusedHadNavWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformMonitor) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(PlatformMonitor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BgFgDrawListsLastFrame) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(BgFgDrawListsLastFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BgFgDrawLists) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(BgFgDrawLists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawDataP) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(DrawDataP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawDataBuilder) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(DrawDataBuilder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastPlatformPos) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastPlatformPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastPlatformSize) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastPlatformSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastRendererSize) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastRendererSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkOffsetMin) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(WorkOffsetMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkOffsetMax) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(WorkOffsetMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BuildWorkOffsetMin) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(BuildWorkOffsetMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BuildWorkOffsetMax) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(BuildWorkOffsetMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowSettings {
    pub ID: ImGuiID,
    pub Pos: ImVec2ih,
    pub Size: ImVec2ih,
    pub ViewportPos: ImVec2ih,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub ClassId: ImGuiID,
    pub DockOrder: ::std::os::raw::c_short,
    pub Collapsed: bool,
    pub IsChild: bool,
    pub WantApply: bool,
    pub WantDelete: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowSettings() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiWindowSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowSettings>(),
        36usize,
        concat!("Size of: ", stringify!(ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportPos) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ViewportPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockId) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(DockId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClassId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ClassId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockOrder) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(DockOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Collapsed) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Collapsed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsChild) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(IsChild)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantApply) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(WantApply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantDelete) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(WantDelete)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSettingsHandler {
    pub TypeName: *const ::std::os::raw::c_char,
    pub TypeHash: ImGuiID,
    pub ClearAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadInitFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadOpenFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReadLineFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            entry: *mut ::std::os::raw::c_void,
            line: *const ::std::os::raw::c_char,
        ),
    >,
    pub ApplyAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub WriteAllFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            out_buf: *mut ImGuiTextBuffer,
        ),
    >,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiSettingsHandler() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiSettingsHandler> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiSettingsHandler>(),
        72usize,
        concat!("Size of: ", stringify!(ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSettingsHandler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TypeName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(TypeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TypeHash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(TypeHash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearAllFn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ClearAllFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadInitFn) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadInitFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadOpenFn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadOpenFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadLineFn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadLineFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ApplyAllFn) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ApplyAllFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteAllFn) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(WriteAllFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(UserData)
        )
    );
}
pub const ImGuiLocKey_VersionStr: ImGuiLocKey = 0;
pub const ImGuiLocKey_TableSizeOne: ImGuiLocKey = 1;
pub const ImGuiLocKey_TableSizeAllFit: ImGuiLocKey = 2;
pub const ImGuiLocKey_TableSizeAllDefault: ImGuiLocKey = 3;
pub const ImGuiLocKey_TableResetOrder: ImGuiLocKey = 4;
pub const ImGuiLocKey_WindowingMainMenuBar: ImGuiLocKey = 5;
pub const ImGuiLocKey_WindowingPopup: ImGuiLocKey = 6;
pub const ImGuiLocKey_WindowingUntitled: ImGuiLocKey = 7;
pub const ImGuiLocKey_DockingHideTabBar: ImGuiLocKey = 8;
pub const ImGuiLocKey_DockingHoldShiftToDock: ImGuiLocKey = 9;
pub const ImGuiLocKey_DockingDragToUndockOrMoveNode: ImGuiLocKey = 10;
pub const ImGuiLocKey_COUNT: ImGuiLocKey = 11;
pub type ImGuiLocKey = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiLocEntry {
    pub Key: ImGuiLocKey,
    pub Text: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiLocEntry() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiLocEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiLocEntry>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiLocEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiLocEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiLocEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLocEntry),
            "::",
            stringify!(Key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLocEntry),
            "::",
            stringify!(Text)
        )
    );
}
pub const ImGuiDebugLogFlags_None: ImGuiDebugLogFlags_ = 0;
pub const ImGuiDebugLogFlags_EventActiveId: ImGuiDebugLogFlags_ = 1;
pub const ImGuiDebugLogFlags_EventFocus: ImGuiDebugLogFlags_ = 2;
pub const ImGuiDebugLogFlags_EventPopup: ImGuiDebugLogFlags_ = 4;
pub const ImGuiDebugLogFlags_EventNav: ImGuiDebugLogFlags_ = 8;
pub const ImGuiDebugLogFlags_EventClipper: ImGuiDebugLogFlags_ = 16;
pub const ImGuiDebugLogFlags_EventSelection: ImGuiDebugLogFlags_ = 32;
pub const ImGuiDebugLogFlags_EventIO: ImGuiDebugLogFlags_ = 64;
pub const ImGuiDebugLogFlags_EventInputRouting: ImGuiDebugLogFlags_ = 128;
pub const ImGuiDebugLogFlags_EventDocking: ImGuiDebugLogFlags_ = 256;
pub const ImGuiDebugLogFlags_EventViewport: ImGuiDebugLogFlags_ = 512;
pub const ImGuiDebugLogFlags_EventMask_: ImGuiDebugLogFlags_ = 1023;
pub const ImGuiDebugLogFlags_OutputToTTY: ImGuiDebugLogFlags_ = 1048576;
pub const ImGuiDebugLogFlags_OutputToTestEngine: ImGuiDebugLogFlags_ = 2097152;
pub type ImGuiDebugLogFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDebugAllocEntry {
    pub FrameCount: ::std::os::raw::c_int,
    pub AllocCount: ImS16,
    pub FreeCount: ImS16,
}
#[test]
fn bindgen_test_layout_ImGuiDebugAllocEntry() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiDebugAllocEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiDebugAllocEntry>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiDebugAllocEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDebugAllocEntry>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiDebugAllocEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDebugAllocEntry),
            "::",
            stringify!(FrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDebugAllocEntry),
            "::",
            stringify!(AllocCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeCount) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDebugAllocEntry),
            "::",
            stringify!(FreeCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDebugAllocInfo {
    pub TotalAllocCount: ::std::os::raw::c_int,
    pub TotalFreeCount: ::std::os::raw::c_int,
    pub LastEntriesIdx: ImS16,
    pub LastEntriesBuf: [ImGuiDebugAllocEntry; 6usize],
}
#[test]
fn bindgen_test_layout_ImGuiDebugAllocInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiDebugAllocInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiDebugAllocInfo>(),
        60usize,
        concat!("Size of: ", stringify!(ImGuiDebugAllocInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDebugAllocInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiDebugAllocInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalAllocCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDebugAllocInfo),
            "::",
            stringify!(TotalAllocCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalFreeCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDebugAllocInfo),
            "::",
            stringify!(TotalFreeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastEntriesIdx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDebugAllocInfo),
            "::",
            stringify!(LastEntriesIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastEntriesBuf) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDebugAllocInfo),
            "::",
            stringify!(LastEntriesBuf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMetricsConfig {
    pub ShowDebugLog: bool,
    pub ShowIDStackTool: bool,
    pub ShowWindowsRects: bool,
    pub ShowWindowsBeginOrder: bool,
    pub ShowTablesRects: bool,
    pub ShowDrawCmdMesh: bool,
    pub ShowDrawCmdBoundingBoxes: bool,
    pub ShowTextEncodingViewer: bool,
    pub ShowAtlasTintedWithTextColor: bool,
    pub ShowDockingNodes: bool,
    pub ShowWindowsRectsType: ::std::os::raw::c_int,
    pub ShowTablesRectsType: ::std::os::raw::c_int,
    pub HighlightMonitorIdx: ::std::os::raw::c_int,
    pub HighlightViewportID: ImGuiID,
}
#[test]
fn bindgen_test_layout_ImGuiMetricsConfig() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiMetricsConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiMetricsConfig>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiMetricsConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMetricsConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiMetricsConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowDebugLog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowDebugLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowIDStackTool) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowIDStackTool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowWindowsRects) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowWindowsRects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowWindowsBeginOrder) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowWindowsBeginOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowTablesRects) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowTablesRects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowDrawCmdMesh) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowDrawCmdMesh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowDrawCmdBoundingBoxes) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowDrawCmdBoundingBoxes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowTextEncodingViewer) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowTextEncodingViewer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ShowAtlasTintedWithTextColor) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowAtlasTintedWithTextColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowDockingNodes) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowDockingNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowWindowsRectsType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowWindowsRectsType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowTablesRectsType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowTablesRectsType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HighlightMonitorIdx) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(HighlightMonitorIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HighlightViewportID) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(HighlightViewportID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackLevelInfo {
    pub ID: ImGuiID,
    pub QueryFrameCount: ImS8,
    pub QuerySuccess: bool,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub Desc: [::std::os::raw::c_char; 57usize],
}
#[test]
fn bindgen_test_layout_ImGuiStackLevelInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStackLevelInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStackLevelInfo>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiStackLevelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStackLevelInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStackLevelInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackLevelInfo),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryFrameCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackLevelInfo),
            "::",
            stringify!(QueryFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QuerySuccess) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackLevelInfo),
            "::",
            stringify!(QuerySuccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Desc) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackLevelInfo),
            "::",
            stringify!(Desc)
        )
    );
}
impl ImGuiStackLevelInfo {
    #[inline]
    pub fn DataType(&self) -> ImGuiDataType {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_DataType(&mut self, val: ImGuiDataType) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(DataType: ImGuiDataType) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let DataType: u32 = unsafe { ::std::mem::transmute(DataType) };
            DataType as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStackLevelInfo {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStackLevelInfo,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStackLevelInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiStackLevelInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStackLevelInfo>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStackLevelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStackLevelInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStackLevelInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStackLevelInfo),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStackLevelInfo),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStackLevelInfo),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiIDStackTool {
    pub LastActiveFrame: ::std::os::raw::c_int,
    pub StackLevel: ::std::os::raw::c_int,
    pub QueryId: ImGuiID,
    pub Results: ImVector_ImGuiStackLevelInfo,
    pub CopyToClipboardOnCtrlC: bool,
    pub CopyToClipboardLastTime: f32,
}
#[test]
fn bindgen_test_layout_ImGuiIDStackTool() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiIDStackTool> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiIDStackTool>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiIDStackTool))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiIDStackTool>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiIDStackTool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastActiveFrame) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIDStackTool),
            "::",
            stringify!(LastActiveFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StackLevel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIDStackTool),
            "::",
            stringify!(StackLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIDStackTool),
            "::",
            stringify!(QueryId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Results) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIDStackTool),
            "::",
            stringify!(Results)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CopyToClipboardOnCtrlC) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIDStackTool),
            "::",
            stringify!(CopyToClipboardOnCtrlC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CopyToClipboardLastTime) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIDStackTool),
            "::",
            stringify!(CopyToClipboardLastTime)
        )
    );
}
pub type ImGuiContextHookCallback = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ImGuiContext, hook: *mut ImGuiContextHook),
>;
pub const ImGuiContextHookType_NewFramePre: ImGuiContextHookType = 0;
pub const ImGuiContextHookType_NewFramePost: ImGuiContextHookType = 1;
pub const ImGuiContextHookType_EndFramePre: ImGuiContextHookType = 2;
pub const ImGuiContextHookType_EndFramePost: ImGuiContextHookType = 3;
pub const ImGuiContextHookType_RenderPre: ImGuiContextHookType = 4;
pub const ImGuiContextHookType_RenderPost: ImGuiContextHookType = 5;
pub const ImGuiContextHookType_Shutdown: ImGuiContextHookType = 6;
pub const ImGuiContextHookType_PendingRemoval_: ImGuiContextHookType = 7;
pub type ImGuiContextHookType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContextHook {
    pub HookId: ImGuiID,
    pub Type: ImGuiContextHookType,
    pub Owner: ImGuiID,
    pub Callback: ImGuiContextHookCallback,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiContextHook() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiContextHook> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiContextHook>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiContextHook))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiContextHook>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiContextHook))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HookId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(HookId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(Owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Callback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(Callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(UserData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiInputEvent {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiInputEvent,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiInputEvent() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiInputEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiInputEvent>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiInputEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiInputEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiInputEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiInputEvent),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiInputEvent),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiInputEvent),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowStackData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiWindowStackData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowStackData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiWindowStackData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowStackData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowStackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowStackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowStackData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowStackData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowStackData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowStackData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiColorMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiColorMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiColorMod() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiColorMod> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiColorMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiColorMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiColorMod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStyleMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStyleMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStyleMod() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiStyleMod> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStyleMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStyleMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStyleMod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiFocusScopeData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiFocusScopeData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiFocusScopeData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiFocusScopeData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiFocusScopeData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiFocusScopeData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiFocusScopeData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiFocusScopeData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiFocusScopeData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiFocusScopeData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiFocusScopeData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiItemFlags {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiItemFlags,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiItemFlags() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiItemFlags> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiItemFlags>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiItemFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiItemFlags>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiItemFlags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiGroupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiGroupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiGroupData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiGroupData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiGroupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiGroupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiGroupData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPopupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPopupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPopupData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiPopupData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPopupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPopupData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiNavTreeNodeData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiNavTreeNodeData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiNavTreeNodeData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiNavTreeNodeData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiNavTreeNodeData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiNavTreeNodeData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiNavTreeNodeData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiNavTreeNodeData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiNavTreeNodeData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiNavTreeNodeData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiNavTreeNodeData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewportP,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiViewportPPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_unsigned_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ImVector_unsigned_char() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_unsigned_char> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_unsigned_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_unsigned_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_unsigned_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_unsigned_char))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiListClipperData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiListClipperData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiListClipperData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiListClipperData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiListClipperData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiListClipperData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiListClipperData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableTempData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableTempData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableTempData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTableTempData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableTempData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTableTempData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableTempData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableTempData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableTempData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTable {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTable,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTable() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTable>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTable),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTable),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTable),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPool_ImGuiTable {
    pub Buf: ImVector_ImGuiTable,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImGuiTable() {
    const UNINIT: ::std::mem::MaybeUninit<ImPool_ImGuiTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImGuiTable>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImGuiTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(FreeIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(AliveCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabBar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabBar,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabBar() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTabBar> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabBar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabBar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPool_ImGuiTabBar {
    pub Buf: ImVector_ImGuiTabBar,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImGuiTabBar() {
    const UNINIT: ::std::mem::MaybeUninit<ImPool_ImGuiTabBar> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImGuiTabBar>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImGuiTabBar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(FreeIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(AliveCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPtrOrIndex {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPtrOrIndex,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPtrOrIndex() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiPtrOrIndex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiShrinkWidthItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiShrinkWidthItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiShrinkWidthItem() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiShrinkWidthItem> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiShrinkWidthItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiShrinkWidthItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiID,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiID() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiSettingsHandler {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiSettingsHandler,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiSettingsHandler() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiSettingsHandler> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiSettingsHandler>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImChunkStream_ImGuiWindowSettings {
    pub Buf: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImChunkStream_ImGuiWindowSettings() {
    const UNINIT: ::std::mem::MaybeUninit<ImChunkStream_ImGuiWindowSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImChunkStream_ImGuiWindowSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImChunkStream_ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImChunkStream_ImGuiWindowSettings>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImChunkStream_ImGuiWindowSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImChunkStream_ImGuiWindowSettings),
            "::",
            stringify!(Buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImChunkStream_ImGuiTableSettings {
    pub Buf: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImChunkStream_ImGuiTableSettings() {
    const UNINIT: ::std::mem::MaybeUninit<ImChunkStream_ImGuiTableSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImChunkStream_ImGuiTableSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImChunkStream_ImGuiTableSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImChunkStream_ImGuiTableSettings>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImChunkStream_ImGuiTableSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImChunkStream_ImGuiTableSettings),
            "::",
            stringify!(Buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiContextHook {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiContextHook,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiContextHook() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiContextHook> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiContextHook>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiContextHook))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiContextHook>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiContextHook))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiContextHook),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiContextHook),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiContextHook),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContext {
    pub Initialized: bool,
    pub FontAtlasOwnedByContext: bool,
    pub IO: ImGuiIO,
    pub PlatformIO: ImGuiPlatformIO,
    pub Style: ImGuiStyle,
    pub ConfigFlagsCurrFrame: ImGuiConfigFlags,
    pub ConfigFlagsLastFrame: ImGuiConfigFlags,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontBaseSize: f32,
    pub CurrentDpiScale: f32,
    pub DrawListSharedData: ImDrawListSharedData,
    pub Time: f64,
    pub FrameCount: ::std::os::raw::c_int,
    pub FrameCountEnded: ::std::os::raw::c_int,
    pub FrameCountPlatformEnded: ::std::os::raw::c_int,
    pub FrameCountRendered: ::std::os::raw::c_int,
    pub WithinFrameScope: bool,
    pub WithinFrameScopeWithImplicitWindow: bool,
    pub WithinEndChild: bool,
    pub GcCompactAll: bool,
    pub TestEngineHookItems: bool,
    pub TestEngine: *mut ::std::os::raw::c_void,
    pub InputEventsQueue: ImVector_ImGuiInputEvent,
    pub InputEventsTrail: ImVector_ImGuiInputEvent,
    pub InputEventsNextMouseSource: ImGuiMouseSource,
    pub InputEventsNextEventId: ImU32,
    pub Windows: ImVector_ImGuiWindowPtr,
    pub WindowsFocusOrder: ImVector_ImGuiWindowPtr,
    pub WindowsTempSortBuffer: ImVector_ImGuiWindowPtr,
    pub CurrentWindowStack: ImVector_ImGuiWindowStackData,
    pub WindowsById: ImGuiStorage,
    pub WindowsActiveCount: ::std::os::raw::c_int,
    pub WindowsHoverPadding: ImVec2,
    pub DebugBreakInWindow: ImGuiID,
    pub CurrentWindow: *mut ImGuiWindow,
    pub HoveredWindow: *mut ImGuiWindow,
    pub HoveredWindowUnderMovingWindow: *mut ImGuiWindow,
    pub MovingWindow: *mut ImGuiWindow,
    pub WheelingWindow: *mut ImGuiWindow,
    pub WheelingWindowRefMousePos: ImVec2,
    pub WheelingWindowStartFrame: ::std::os::raw::c_int,
    pub WheelingWindowScrolledFrame: ::std::os::raw::c_int,
    pub WheelingWindowReleaseTimer: f32,
    pub WheelingWindowWheelRemainder: ImVec2,
    pub WheelingAxisAvg: ImVec2,
    pub DebugHookIdInfo: ImGuiID,
    pub HoveredId: ImGuiID,
    pub HoveredIdPreviousFrame: ImGuiID,
    pub HoveredIdTimer: f32,
    pub HoveredIdNotActiveTimer: f32,
    pub HoveredIdAllowOverlap: bool,
    pub HoveredIdDisabled: bool,
    pub ItemUnclipByLog: bool,
    pub ActiveId: ImGuiID,
    pub ActiveIdIsAlive: ImGuiID,
    pub ActiveIdTimer: f32,
    pub ActiveIdIsJustActivated: bool,
    pub ActiveIdAllowOverlap: bool,
    pub ActiveIdNoClearOnFocusLoss: bool,
    pub ActiveIdHasBeenPressedBefore: bool,
    pub ActiveIdHasBeenEditedBefore: bool,
    pub ActiveIdHasBeenEditedThisFrame: bool,
    pub ActiveIdFromShortcut: bool,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ActiveIdClickOffset: ImVec2,
    pub ActiveIdWindow: *mut ImGuiWindow,
    pub ActiveIdSource: ImGuiInputSource,
    pub ActiveIdPreviousFrame: ImGuiID,
    pub ActiveIdPreviousFrameIsAlive: bool,
    pub ActiveIdPreviousFrameHasBeenEditedBefore: bool,
    pub ActiveIdPreviousFrameWindow: *mut ImGuiWindow,
    pub LastActiveId: ImGuiID,
    pub LastActiveIdTimer: f32,
    pub LastKeyModsChangeTime: f64,
    pub LastKeyModsChangeFromNoneTime: f64,
    pub LastKeyboardKeyPressTime: f64,
    pub KeysMayBeCharInput: ImBitArrayForNamedKeys,
    pub KeysOwnerData: [ImGuiKeyOwnerData; 154usize],
    pub KeysRoutingTable: ImGuiKeyRoutingTable,
    pub ActiveIdUsingNavDirMask: ImU32,
    pub ActiveIdUsingAllKeyboardKeys: bool,
    pub DebugBreakInShortcutRouting: ImGuiKeyChord,
    pub CurrentFocusScopeId: ImGuiID,
    pub CurrentItemFlags: ImGuiItemFlags,
    pub DebugLocateId: ImGuiID,
    pub NextItemData: ImGuiNextItemData,
    pub LastItemData: ImGuiLastItemData,
    pub NextWindowData: ImGuiNextWindowData,
    pub DebugShowGroupRects: bool,
    pub DebugFlashStyleColorIdx: ImGuiCol,
    pub ColorStack: ImVector_ImGuiColorMod,
    pub StyleVarStack: ImVector_ImGuiStyleMod,
    pub FontStack: ImVector_ImFontPtr,
    pub FocusScopeStack: ImVector_ImGuiFocusScopeData,
    pub ItemFlagsStack: ImVector_ImGuiItemFlags,
    pub GroupStack: ImVector_ImGuiGroupData,
    pub OpenPopupStack: ImVector_ImGuiPopupData,
    pub BeginPopupStack: ImVector_ImGuiPopupData,
    pub NavTreeNodeStack: ImVector_ImGuiNavTreeNodeData,
    pub Viewports: ImVector_ImGuiViewportPPtr,
    pub CurrentViewport: *mut ImGuiViewportP,
    pub MouseViewport: *mut ImGuiViewportP,
    pub MouseLastHoveredViewport: *mut ImGuiViewportP,
    pub PlatformLastFocusedViewportId: ImGuiID,
    pub FallbackMonitor: ImGuiPlatformMonitor,
    pub PlatformMonitorsFullWorkRect: ImRect,
    pub ViewportCreatedCount: ::std::os::raw::c_int,
    pub PlatformWindowsCreatedCount: ::std::os::raw::c_int,
    pub ViewportFocusedStampCount: ::std::os::raw::c_int,
    pub NavWindow: *mut ImGuiWindow,
    pub NavId: ImGuiID,
    pub NavFocusScopeId: ImGuiID,
    pub NavActivateId: ImGuiID,
    pub NavActivateDownId: ImGuiID,
    pub NavActivatePressedId: ImGuiID,
    pub NavActivateFlags: ImGuiActivateFlags,
    pub NavFocusRoute: ImVector_ImGuiFocusScopeData,
    pub NavHighlightActivatedId: ImGuiID,
    pub NavHighlightActivatedTimer: f32,
    pub NavJustMovedToId: ImGuiID,
    pub NavJustMovedToFocusScopeId: ImGuiID,
    pub NavJustMovedToKeyMods: ImGuiKeyChord,
    pub NavNextActivateId: ImGuiID,
    pub NavNextActivateFlags: ImGuiActivateFlags,
    pub NavInputSource: ImGuiInputSource,
    pub NavLayer: ImGuiNavLayer,
    pub NavLastValidSelectionUserData: ImGuiSelectionUserData,
    pub NavIdIsAlive: bool,
    pub NavMousePosDirty: bool,
    pub NavDisableHighlight: bool,
    pub NavDisableMouseHover: bool,
    pub NavAnyRequest: bool,
    pub NavInitRequest: bool,
    pub NavInitRequestFromMove: bool,
    pub NavInitResult: ImGuiNavItemData,
    pub NavMoveSubmitted: bool,
    pub NavMoveScoringItems: bool,
    pub NavMoveForwardToNextFrame: bool,
    pub NavMoveFlags: ImGuiNavMoveFlags,
    pub NavMoveScrollFlags: ImGuiScrollFlags,
    pub NavMoveKeyMods: ImGuiKeyChord,
    pub NavMoveDir: ImGuiDir,
    pub NavMoveDirForDebug: ImGuiDir,
    pub NavMoveClipDir: ImGuiDir,
    pub NavScoringRect: ImRect,
    pub NavScoringNoClipRect: ImRect,
    pub NavScoringDebugCount: ::std::os::raw::c_int,
    pub NavTabbingDir: ::std::os::raw::c_int,
    pub NavTabbingCounter: ::std::os::raw::c_int,
    pub NavMoveResultLocal: ImGuiNavItemData,
    pub NavMoveResultLocalVisible: ImGuiNavItemData,
    pub NavMoveResultOther: ImGuiNavItemData,
    pub NavTabbingResultFirst: ImGuiNavItemData,
    pub ConfigNavWindowingKeyNext: ImGuiKeyChord,
    pub ConfigNavWindowingKeyPrev: ImGuiKeyChord,
    pub NavWindowingTarget: *mut ImGuiWindow,
    pub NavWindowingTargetAnim: *mut ImGuiWindow,
    pub NavWindowingListWindow: *mut ImGuiWindow,
    pub NavWindowingTimer: f32,
    pub NavWindowingHighlightAlpha: f32,
    pub NavWindowingToggleLayer: bool,
    pub NavWindowingToggleKey: ImGuiKey,
    pub NavWindowingAccumDeltaPos: ImVec2,
    pub NavWindowingAccumDeltaSize: ImVec2,
    pub DimBgRatio: f32,
    pub DragDropActive: bool,
    pub DragDropWithinSource: bool,
    pub DragDropWithinTarget: bool,
    pub DragDropSourceFlags: ImGuiDragDropFlags,
    pub DragDropSourceFrameCount: ::std::os::raw::c_int,
    pub DragDropMouseButton: ::std::os::raw::c_int,
    pub DragDropPayload: ImGuiPayload,
    pub DragDropTargetRect: ImRect,
    pub DragDropTargetClipRect: ImRect,
    pub DragDropTargetId: ImGuiID,
    pub DragDropAcceptFlags: ImGuiDragDropFlags,
    pub DragDropAcceptIdCurrRectSurface: f32,
    pub DragDropAcceptIdCurr: ImGuiID,
    pub DragDropAcceptIdPrev: ImGuiID,
    pub DragDropAcceptFrameCount: ::std::os::raw::c_int,
    pub DragDropHoldJustPressedId: ImGuiID,
    pub DragDropPayloadBufHeap: ImVector_unsigned_char,
    pub DragDropPayloadBufLocal: [::std::os::raw::c_uchar; 16usize],
    pub ClipperTempDataStacked: ::std::os::raw::c_int,
    pub ClipperTempData: ImVector_ImGuiListClipperData,
    pub CurrentTable: *mut ImGuiTable,
    pub DebugBreakInTable: ImGuiID,
    pub TablesTempDataStacked: ::std::os::raw::c_int,
    pub TablesTempData: ImVector_ImGuiTableTempData,
    pub Tables: ImPool_ImGuiTable,
    pub TablesLastTimeActive: ImVector_float,
    pub DrawChannelsTempMergeBuffer: ImVector_ImDrawChannel,
    pub CurrentTabBar: *mut ImGuiTabBar,
    pub TabBars: ImPool_ImGuiTabBar,
    pub CurrentTabBarStack: ImVector_ImGuiPtrOrIndex,
    pub ShrinkWidthBuffer: ImVector_ImGuiShrinkWidthItem,
    pub HoverItemDelayId: ImGuiID,
    pub HoverItemDelayIdPreviousFrame: ImGuiID,
    pub HoverItemDelayTimer: f32,
    pub HoverItemDelayClearTimer: f32,
    pub HoverItemUnlockedStationaryId: ImGuiID,
    pub HoverWindowUnlockedStationaryId: ImGuiID,
    pub MouseCursor: ImGuiMouseCursor,
    pub MouseStationaryTimer: f32,
    pub MouseLastValidPos: ImVec2,
    pub InputTextState: ImGuiInputTextState,
    pub InputTextDeactivatedState: ImGuiInputTextDeactivatedState,
    pub InputTextPasswordFont: ImFont,
    pub TempInputId: ImGuiID,
    pub DataTypeZeroValue: ImGuiDataTypeStorage,
    pub BeginMenuDepth: ::std::os::raw::c_int,
    pub BeginComboDepth: ::std::os::raw::c_int,
    pub ColorEditOptions: ImGuiColorEditFlags,
    pub ColorEditCurrentID: ImGuiID,
    pub ColorEditSavedID: ImGuiID,
    pub ColorEditSavedHue: f32,
    pub ColorEditSavedSat: f32,
    pub ColorEditSavedColor: ImU32,
    pub ColorPickerRef: ImVec4,
    pub ComboPreviewData: ImGuiComboPreviewData,
    pub WindowResizeBorderExpectedRect: ImRect,
    pub WindowResizeRelativeMode: bool,
    pub ScrollbarSeekMode: ::std::os::raw::c_short,
    pub ScrollbarClickDeltaToGrabCenter: f32,
    pub SliderGrabClickOffset: f32,
    pub SliderCurrentAccum: f32,
    pub SliderCurrentAccumDirty: bool,
    pub DragCurrentAccumDirty: bool,
    pub DragCurrentAccum: f32,
    pub DragSpeedDefaultRatio: f32,
    pub DisabledAlphaBackup: f32,
    pub DisabledStackSize: ::std::os::raw::c_short,
    pub LockMarkEdited: ::std::os::raw::c_short,
    pub TooltipOverrideCount: ::std::os::raw::c_short,
    pub ClipboardHandlerData: ImVector_char,
    pub MenusIdSubmittedThisFrame: ImVector_ImGuiID,
    pub TypingSelectState: ImGuiTypingSelectState,
    pub PlatformImeData: ImGuiPlatformImeData,
    pub PlatformImeDataPrev: ImGuiPlatformImeData,
    pub PlatformImeViewport: ImGuiID,
    pub DockContext: ImGuiDockContext,
    pub DockNodeWindowMenuHandler: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            node: *mut ImGuiDockNode,
            tab_bar: *mut ImGuiTabBar,
        ),
    >,
    pub SettingsLoaded: bool,
    pub SettingsDirtyTimer: f32,
    pub SettingsIniData: ImGuiTextBuffer,
    pub SettingsHandlers: ImVector_ImGuiSettingsHandler,
    pub SettingsWindows: ImChunkStream_ImGuiWindowSettings,
    pub SettingsTables: ImChunkStream_ImGuiTableSettings,
    pub Hooks: ImVector_ImGuiContextHook,
    pub HookIdNext: ImGuiID,
    pub LocalizationTable: [*const ::std::os::raw::c_char; 11usize],
    pub LogEnabled: bool,
    pub LogType: ImGuiLogType,
    pub LogFile: ImFileHandle,
    pub LogBuffer: ImGuiTextBuffer,
    pub LogNextPrefix: *const ::std::os::raw::c_char,
    pub LogNextSuffix: *const ::std::os::raw::c_char,
    pub LogLinePosY: f32,
    pub LogLineFirstItem: bool,
    pub LogDepthRef: ::std::os::raw::c_int,
    pub LogDepthToExpand: ::std::os::raw::c_int,
    pub LogDepthToExpandDefault: ::std::os::raw::c_int,
    pub DebugLogFlags: ImGuiDebugLogFlags,
    pub DebugLogBuf: ImGuiTextBuffer,
    pub DebugLogIndex: ImGuiTextIndex,
    pub DebugLogAutoDisableFlags: ImGuiDebugLogFlags,
    pub DebugLogAutoDisableFrames: ImU8,
    pub DebugLocateFrames: ImU8,
    pub DebugBreakInLocateId: bool,
    pub DebugBreakKeyChord: ImGuiKeyChord,
    pub DebugBeginReturnValueCullDepth: ImS8,
    pub DebugItemPickerActive: bool,
    pub DebugItemPickerMouseButton: ImU8,
    pub DebugItemPickerBreakId: ImGuiID,
    pub DebugFlashStyleColorTime: f32,
    pub DebugFlashStyleColorBackup: ImVec4,
    pub DebugMetricsConfig: ImGuiMetricsConfig,
    pub DebugIDStackTool: ImGuiIDStackTool,
    pub DebugAllocInfo: ImGuiDebugAllocInfo,
    pub DebugHoveredDockNode: *mut ImGuiDockNode,
    pub FramerateSecPerFrame: [f32; 60usize],
    pub FramerateSecPerFrameIdx: ::std::os::raw::c_int,
    pub FramerateSecPerFrameCount: ::std::os::raw::c_int,
    pub FramerateSecPerFrameAccum: f32,
    pub WantCaptureMouseNextFrame: ::std::os::raw::c_int,
    pub WantCaptureKeyboardNextFrame: ::std::os::raw::c_int,
    pub WantTextInputNextFrame: ::std::os::raw::c_int,
    pub TempBuffer: ImVector_char,
    pub TempKeychordName: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_ImGuiContext() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiContext>(),
        14184usize,
        concat!("Size of: ", stringify!(ImGuiContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Initialized) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontAtlasOwnedByContext) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontAtlasOwnedByContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IO) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(IO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformIO) as usize - ptr as usize },
        3032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformIO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Style) as usize - ptr as usize },
        3248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigFlagsCurrFrame) as usize - ptr as usize },
        4388usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ConfigFlagsCurrFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigFlagsLastFrame) as usize - ptr as usize },
        4392usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ConfigFlagsLastFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Font) as usize - ptr as usize },
        4400usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontSize) as usize - ptr as usize },
        4408usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBaseSize) as usize - ptr as usize },
        4412usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontBaseSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentDpiScale) as usize - ptr as usize },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentDpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawListSharedData) as usize - ptr as usize },
        4424usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DrawListSharedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Time) as usize - ptr as usize },
        4952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameCount) as usize - ptr as usize },
        4960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameCountEnded) as usize - ptr as usize },
        4964usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountEnded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameCountPlatformEnded) as usize - ptr as usize },
        4968usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountPlatformEnded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameCountRendered) as usize - ptr as usize },
        4972usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountRendered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WithinFrameScope) as usize - ptr as usize },
        4976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinFrameScope)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).WithinFrameScopeWithImplicitWindow) as usize - ptr as usize
        },
        4977usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinFrameScopeWithImplicitWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WithinEndChild) as usize - ptr as usize },
        4978usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinEndChild)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GcCompactAll) as usize - ptr as usize },
        4979usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(GcCompactAll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TestEngineHookItems) as usize - ptr as usize },
        4980usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngineHookItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TestEngine) as usize - ptr as usize },
        4984usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputEventsQueue) as usize - ptr as usize },
        4992usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputEventsQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputEventsTrail) as usize - ptr as usize },
        5008usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputEventsTrail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputEventsNextMouseSource) as usize - ptr as usize },
        5024usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputEventsNextMouseSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputEventsNextEventId) as usize - ptr as usize },
        5028usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputEventsNextEventId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Windows) as usize - ptr as usize },
        5032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Windows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowsFocusOrder) as usize - ptr as usize },
        5048usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsFocusOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowsTempSortBuffer) as usize - ptr as usize },
        5064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsTempSortBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentWindowStack) as usize - ptr as usize },
        5080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentWindowStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowsById) as usize - ptr as usize },
        5096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsById)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowsActiveCount) as usize - ptr as usize },
        5112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsActiveCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowsHoverPadding) as usize - ptr as usize },
        5116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsHoverPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugBreakInWindow) as usize - ptr as usize },
        5124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugBreakInWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentWindow) as usize - ptr as usize },
        5128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredWindow) as usize - ptr as usize },
        5136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredWindow)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).HoveredWindowUnderMovingWindow) as usize - ptr as usize
        },
        5144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredWindowUnderMovingWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MovingWindow) as usize - ptr as usize },
        5152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MovingWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WheelingWindow) as usize - ptr as usize },
        5160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WheelingWindowRefMousePos) as usize - ptr as usize },
        5168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowRefMousePos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WheelingWindowStartFrame) as usize - ptr as usize },
        5176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowStartFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WheelingWindowScrolledFrame) as usize - ptr as usize },
        5180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowScrolledFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WheelingWindowReleaseTimer) as usize - ptr as usize },
        5184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowReleaseTimer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).WheelingWindowWheelRemainder) as usize - ptr as usize
        },
        5188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowWheelRemainder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WheelingAxisAvg) as usize - ptr as usize },
        5196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingAxisAvg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugHookIdInfo) as usize - ptr as usize },
        5204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugHookIdInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredId) as usize - ptr as usize },
        5208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredIdPreviousFrame) as usize - ptr as usize },
        5212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdPreviousFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredIdTimer) as usize - ptr as usize },
        5216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredIdNotActiveTimer) as usize - ptr as usize },
        5220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdNotActiveTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredIdAllowOverlap) as usize - ptr as usize },
        5224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdAllowOverlap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredIdDisabled) as usize - ptr as usize },
        5225usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdDisabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemUnclipByLog) as usize - ptr as usize },
        5226usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ItemUnclipByLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveId) as usize - ptr as usize },
        5228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdIsAlive) as usize - ptr as usize },
        5232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdTimer) as usize - ptr as usize },
        5236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdIsJustActivated) as usize - ptr as usize },
        5240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdIsJustActivated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdAllowOverlap) as usize - ptr as usize },
        5241usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdAllowOverlap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdNoClearOnFocusLoss) as usize - ptr as usize },
        5242usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdNoClearOnFocusLoss)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ActiveIdHasBeenPressedBefore) as usize - ptr as usize
        },
        5243usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenPressedBefore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdHasBeenEditedBefore) as usize - ptr as usize },
        5244usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenEditedBefore)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ActiveIdHasBeenEditedThisFrame) as usize - ptr as usize
        },
        5245usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenEditedThisFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdFromShortcut) as usize - ptr as usize },
        5246usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdFromShortcut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdClickOffset) as usize - ptr as usize },
        5248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdClickOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdWindow) as usize - ptr as usize },
        5256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdSource) as usize - ptr as usize },
        5264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdPreviousFrame) as usize - ptr as usize },
        5268usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrame)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ActiveIdPreviousFrameIsAlive) as usize - ptr as usize
        },
        5272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameIsAlive)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ActiveIdPreviousFrameHasBeenEditedBefore) as usize
                - ptr as usize
        },
        5273usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameHasBeenEditedBefore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdPreviousFrameWindow) as usize - ptr as usize },
        5280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastActiveId) as usize - ptr as usize },
        5288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastActiveId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastActiveIdTimer) as usize - ptr as usize },
        5292usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastActiveIdTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastKeyModsChangeTime) as usize - ptr as usize },
        5296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastKeyModsChangeTime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).LastKeyModsChangeFromNoneTime) as usize - ptr as usize
        },
        5304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastKeyModsChangeFromNoneTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastKeyboardKeyPressTime) as usize - ptr as usize },
        5312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastKeyboardKeyPressTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeysMayBeCharInput) as usize - ptr as usize },
        5320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(KeysMayBeCharInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeysOwnerData) as usize - ptr as usize },
        5340usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(KeysOwnerData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeysRoutingTable) as usize - ptr as usize },
        7192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(KeysRoutingTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveIdUsingNavDirMask) as usize - ptr as usize },
        7536usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingNavDirMask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ActiveIdUsingAllKeyboardKeys) as usize - ptr as usize
        },
        7540usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingAllKeyboardKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugBreakInShortcutRouting) as usize - ptr as usize },
        7544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugBreakInShortcutRouting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentFocusScopeId) as usize - ptr as usize },
        7548usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentFocusScopeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentItemFlags) as usize - ptr as usize },
        7552usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentItemFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugLocateId) as usize - ptr as usize },
        7556usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugLocateId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NextItemData) as usize - ptr as usize },
        7560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NextItemData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastItemData) as usize - ptr as usize },
        7600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastItemData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NextWindowData) as usize - ptr as usize },
        7680usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NextWindowData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugShowGroupRects) as usize - ptr as usize },
        7840usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugShowGroupRects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugFlashStyleColorIdx) as usize - ptr as usize },
        7844usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugFlashStyleColorIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorStack) as usize - ptr as usize },
        7848usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StyleVarStack) as usize - ptr as usize },
        7864usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(StyleVarStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontStack) as usize - ptr as usize },
        7880usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FocusScopeStack) as usize - ptr as usize },
        7896usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusScopeStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemFlagsStack) as usize - ptr as usize },
        7912usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ItemFlagsStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GroupStack) as usize - ptr as usize },
        7928usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(GroupStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OpenPopupStack) as usize - ptr as usize },
        7944usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(OpenPopupStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeginPopupStack) as usize - ptr as usize },
        7960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(BeginPopupStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavTreeNodeStack) as usize - ptr as usize },
        7976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavTreeNodeStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Viewports) as usize - ptr as usize },
        7992usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Viewports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentViewport) as usize - ptr as usize },
        8008usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseViewport) as usize - ptr as usize },
        8016usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseLastHoveredViewport) as usize - ptr as usize },
        8024usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseLastHoveredViewport)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).PlatformLastFocusedViewportId) as usize - ptr as usize
        },
        8032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformLastFocusedViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackMonitor) as usize - ptr as usize },
        8040usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FallbackMonitor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).PlatformMonitorsFullWorkRect) as usize - ptr as usize
        },
        8088usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformMonitorsFullWorkRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportCreatedCount) as usize - ptr as usize },
        8104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ViewportCreatedCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformWindowsCreatedCount) as usize - ptr as usize },
        8108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformWindowsCreatedCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportFocusedStampCount) as usize - ptr as usize },
        8112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ViewportFocusedStampCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindow) as usize - ptr as usize },
        8120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavId) as usize - ptr as usize },
        8128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavFocusScopeId) as usize - ptr as usize },
        8132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavFocusScopeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavActivateId) as usize - ptr as usize },
        8136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivateId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavActivateDownId) as usize - ptr as usize },
        8140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivateDownId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavActivatePressedId) as usize - ptr as usize },
        8144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivatePressedId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavActivateFlags) as usize - ptr as usize },
        8148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivateFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavFocusRoute) as usize - ptr as usize },
        8152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavFocusRoute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavHighlightActivatedId) as usize - ptr as usize },
        8168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavHighlightActivatedId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavHighlightActivatedTimer) as usize - ptr as usize },
        8172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavHighlightActivatedTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavJustMovedToId) as usize - ptr as usize },
        8176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavJustMovedToFocusScopeId) as usize - ptr as usize },
        8180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToFocusScopeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavJustMovedToKeyMods) as usize - ptr as usize },
        8184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToKeyMods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavNextActivateId) as usize - ptr as usize },
        8188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavNextActivateId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavNextActivateFlags) as usize - ptr as usize },
        8192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavNextActivateFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavInputSource) as usize - ptr as usize },
        8196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInputSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavLayer) as usize - ptr as usize },
        8200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavLayer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).NavLastValidSelectionUserData) as usize - ptr as usize
        },
        8208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavLastValidSelectionUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavIdIsAlive) as usize - ptr as usize },
        8216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMousePosDirty) as usize - ptr as usize },
        8217usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMousePosDirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavDisableHighlight) as usize - ptr as usize },
        8218usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavDisableHighlight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavDisableMouseHover) as usize - ptr as usize },
        8219usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavDisableMouseHover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavAnyRequest) as usize - ptr as usize },
        8220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavAnyRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavInitRequest) as usize - ptr as usize },
        8221usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavInitRequestFromMove) as usize - ptr as usize },
        8222usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitRequestFromMove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavInitResult) as usize - ptr as usize },
        8224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitResult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveSubmitted) as usize - ptr as usize },
        8280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveSubmitted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveScoringItems) as usize - ptr as usize },
        8281usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveScoringItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveForwardToNextFrame) as usize - ptr as usize },
        8282usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveForwardToNextFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveFlags) as usize - ptr as usize },
        8284usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveScrollFlags) as usize - ptr as usize },
        8288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveScrollFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveKeyMods) as usize - ptr as usize },
        8292usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveKeyMods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveDir) as usize - ptr as usize },
        8296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveDir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveDirForDebug) as usize - ptr as usize },
        8300usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveDirForDebug)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveClipDir) as usize - ptr as usize },
        8304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveClipDir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavScoringRect) as usize - ptr as usize },
        8308usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavScoringRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavScoringNoClipRect) as usize - ptr as usize },
        8324usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavScoringNoClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavScoringDebugCount) as usize - ptr as usize },
        8340usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavScoringDebugCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavTabbingDir) as usize - ptr as usize },
        8344usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavTabbingDir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavTabbingCounter) as usize - ptr as usize },
        8348usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavTabbingCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveResultLocal) as usize - ptr as usize },
        8352usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultLocal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveResultLocalVisible) as usize - ptr as usize },
        8408usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultLocalVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavMoveResultOther) as usize - ptr as usize },
        8464usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultOther)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavTabbingResultFirst) as usize - ptr as usize },
        8520usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavTabbingResultFirst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigNavWindowingKeyNext) as usize - ptr as usize },
        8576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ConfigNavWindowingKeyNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigNavWindowingKeyPrev) as usize - ptr as usize },
        8580usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ConfigNavWindowingKeyPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowingTarget) as usize - ptr as usize },
        8584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTarget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowingTargetAnim) as usize - ptr as usize },
        8592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTargetAnim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowingListWindow) as usize - ptr as usize },
        8600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingListWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowingTimer) as usize - ptr as usize },
        8608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowingHighlightAlpha) as usize - ptr as usize },
        8612usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingHighlightAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowingToggleLayer) as usize - ptr as usize },
        8616usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingToggleLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowingToggleKey) as usize - ptr as usize },
        8620usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingToggleKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowingAccumDeltaPos) as usize - ptr as usize },
        8624usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingAccumDeltaPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowingAccumDeltaSize) as usize - ptr as usize },
        8632usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingAccumDeltaSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DimBgRatio) as usize - ptr as usize },
        8640usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DimBgRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropActive) as usize - ptr as usize },
        8644usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropWithinSource) as usize - ptr as usize },
        8645usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropWithinSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropWithinTarget) as usize - ptr as usize },
        8646usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropWithinTarget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropSourceFlags) as usize - ptr as usize },
        8648usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropSourceFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropSourceFrameCount) as usize - ptr as usize },
        8652usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropSourceFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropMouseButton) as usize - ptr as usize },
        8656usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropMouseButton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropPayload) as usize - ptr as usize },
        8664usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropTargetRect) as usize - ptr as usize },
        8728usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropTargetRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropTargetClipRect) as usize - ptr as usize },
        8744usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropTargetClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropTargetId) as usize - ptr as usize },
        8760usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropTargetId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropAcceptFlags) as usize - ptr as usize },
        8764usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptFlags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).DragDropAcceptIdCurrRectSurface) as usize - ptr as usize
        },
        8768usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdCurrRectSurface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropAcceptIdCurr) as usize - ptr as usize },
        8772usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdCurr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropAcceptIdPrev) as usize - ptr as usize },
        8776usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropAcceptFrameCount) as usize - ptr as usize },
        8780usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropHoldJustPressedId) as usize - ptr as usize },
        8784usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropHoldJustPressedId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropPayloadBufHeap) as usize - ptr as usize },
        8792usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayloadBufHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragDropPayloadBufLocal) as usize - ptr as usize },
        8808usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayloadBufLocal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipperTempDataStacked) as usize - ptr as usize },
        8824usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ClipperTempDataStacked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipperTempData) as usize - ptr as usize },
        8832usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ClipperTempData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentTable) as usize - ptr as usize },
        8848usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugBreakInTable) as usize - ptr as usize },
        8856usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugBreakInTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TablesTempDataStacked) as usize - ptr as usize },
        8860usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TablesTempDataStacked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TablesTempData) as usize - ptr as usize },
        8864usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TablesTempData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Tables) as usize - ptr as usize },
        8880usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Tables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TablesLastTimeActive) as usize - ptr as usize },
        8920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TablesLastTimeActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawChannelsTempMergeBuffer) as usize - ptr as usize },
        8936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DrawChannelsTempMergeBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentTabBar) as usize - ptr as usize },
        8952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTabBar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabBars) as usize - ptr as usize },
        8960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabBars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentTabBarStack) as usize - ptr as usize },
        9000usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTabBarStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShrinkWidthBuffer) as usize - ptr as usize },
        9016usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ShrinkWidthBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverItemDelayId) as usize - ptr as usize },
        9032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoverItemDelayId)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).HoverItemDelayIdPreviousFrame) as usize - ptr as usize
        },
        9036usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoverItemDelayIdPreviousFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverItemDelayTimer) as usize - ptr as usize },
        9040usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoverItemDelayTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverItemDelayClearTimer) as usize - ptr as usize },
        9044usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoverItemDelayClearTimer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).HoverItemUnlockedStationaryId) as usize - ptr as usize
        },
        9048usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoverItemUnlockedStationaryId)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).HoverWindowUnlockedStationaryId) as usize - ptr as usize
        },
        9052usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoverWindowUnlockedStationaryId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseCursor) as usize - ptr as usize },
        9056usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseStationaryTimer) as usize - ptr as usize },
        9060usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseStationaryTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseLastValidPos) as usize - ptr as usize },
        9064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseLastValidPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputTextState) as usize - ptr as usize },
        9072usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputTextState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputTextDeactivatedState) as usize - ptr as usize },
        12808usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputTextDeactivatedState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputTextPasswordFont) as usize - ptr as usize },
        12832usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputTextPasswordFont)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempInputId) as usize - ptr as usize },
        12952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TempInputId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataTypeZeroValue) as usize - ptr as usize },
        12956usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DataTypeZeroValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeginMenuDepth) as usize - ptr as usize },
        12964usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(BeginMenuDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeginComboDepth) as usize - ptr as usize },
        12968usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(BeginComboDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorEditOptions) as usize - ptr as usize },
        12972usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorEditCurrentID) as usize - ptr as usize },
        12976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditCurrentID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorEditSavedID) as usize - ptr as usize },
        12980usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditSavedID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorEditSavedHue) as usize - ptr as usize },
        12984usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditSavedHue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorEditSavedSat) as usize - ptr as usize },
        12988usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditSavedSat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorEditSavedColor) as usize - ptr as usize },
        12992usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditSavedColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorPickerRef) as usize - ptr as usize },
        12996usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorPickerRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ComboPreviewData) as usize - ptr as usize },
        13012usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ComboPreviewData)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).WindowResizeBorderExpectedRect) as usize - ptr as usize
        },
        13060usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowResizeBorderExpectedRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowResizeRelativeMode) as usize - ptr as usize },
        13076usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowResizeRelativeMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarSeekMode) as usize - ptr as usize },
        13078usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ScrollbarSeekMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ScrollbarClickDeltaToGrabCenter) as usize - ptr as usize
        },
        13080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ScrollbarClickDeltaToGrabCenter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SliderGrabClickOffset) as usize - ptr as usize },
        13084usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SliderGrabClickOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SliderCurrentAccum) as usize - ptr as usize },
        13088usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SliderCurrentAccum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SliderCurrentAccumDirty) as usize - ptr as usize },
        13092usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SliderCurrentAccumDirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragCurrentAccumDirty) as usize - ptr as usize },
        13093usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragCurrentAccumDirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragCurrentAccum) as usize - ptr as usize },
        13096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragCurrentAccum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DragSpeedDefaultRatio) as usize - ptr as usize },
        13100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragSpeedDefaultRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisabledAlphaBackup) as usize - ptr as usize },
        13104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DisabledAlphaBackup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisabledStackSize) as usize - ptr as usize },
        13108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DisabledStackSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LockMarkEdited) as usize - ptr as usize },
        13110usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LockMarkEdited)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TooltipOverrideCount) as usize - ptr as usize },
        13112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TooltipOverrideCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipboardHandlerData) as usize - ptr as usize },
        13120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ClipboardHandlerData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MenusIdSubmittedThisFrame) as usize - ptr as usize },
        13136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MenusIdSubmittedThisFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TypingSelectState) as usize - ptr as usize },
        13152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TypingSelectState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformImeData) as usize - ptr as usize },
        13256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImeData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformImeDataPrev) as usize - ptr as usize },
        13272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImeDataPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformImeViewport) as usize - ptr as usize },
        13288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImeViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockContext) as usize - ptr as usize },
        13296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DockContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockNodeWindowMenuHandler) as usize - ptr as usize },
        13352usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DockNodeWindowMenuHandler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SettingsLoaded) as usize - ptr as usize },
        13360usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsLoaded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SettingsDirtyTimer) as usize - ptr as usize },
        13364usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsDirtyTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SettingsIniData) as usize - ptr as usize },
        13368usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsIniData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SettingsHandlers) as usize - ptr as usize },
        13384usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsHandlers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SettingsWindows) as usize - ptr as usize },
        13400usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SettingsTables) as usize - ptr as usize },
        13416usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsTables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hooks) as usize - ptr as usize },
        13432usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Hooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HookIdNext) as usize - ptr as usize },
        13448usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HookIdNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocalizationTable) as usize - ptr as usize },
        13456usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LocalizationTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogEnabled) as usize - ptr as usize },
        13544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogType) as usize - ptr as usize },
        13548usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogFile) as usize - ptr as usize },
        13552usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogBuffer) as usize - ptr as usize },
        13560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogNextPrefix) as usize - ptr as usize },
        13576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogNextPrefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogNextSuffix) as usize - ptr as usize },
        13584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogNextSuffix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogLinePosY) as usize - ptr as usize },
        13592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogLinePosY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogLineFirstItem) as usize - ptr as usize },
        13596usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogLineFirstItem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogDepthRef) as usize - ptr as usize },
        13600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogDepthToExpand) as usize - ptr as usize },
        13604usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthToExpand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogDepthToExpandDefault) as usize - ptr as usize },
        13608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthToExpandDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugLogFlags) as usize - ptr as usize },
        13612usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugLogFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugLogBuf) as usize - ptr as usize },
        13616usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugLogBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugLogIndex) as usize - ptr as usize },
        13632usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugLogIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugLogAutoDisableFlags) as usize - ptr as usize },
        13656usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugLogAutoDisableFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugLogAutoDisableFrames) as usize - ptr as usize },
        13660usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugLogAutoDisableFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugLocateFrames) as usize - ptr as usize },
        13661usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugLocateFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugBreakInLocateId) as usize - ptr as usize },
        13662usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugBreakInLocateId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugBreakKeyChord) as usize - ptr as usize },
        13664usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugBreakKeyChord)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).DebugBeginReturnValueCullDepth) as usize - ptr as usize
        },
        13668usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugBeginReturnValueCullDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugItemPickerActive) as usize - ptr as usize },
        13669usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugItemPickerActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugItemPickerMouseButton) as usize - ptr as usize },
        13670usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugItemPickerMouseButton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugItemPickerBreakId) as usize - ptr as usize },
        13672usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugItemPickerBreakId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugFlashStyleColorTime) as usize - ptr as usize },
        13676usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugFlashStyleColorTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugFlashStyleColorBackup) as usize - ptr as usize },
        13680usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugFlashStyleColorBackup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugMetricsConfig) as usize - ptr as usize },
        13696usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugMetricsConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugIDStackTool) as usize - ptr as usize },
        13728usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugIDStackTool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugAllocInfo) as usize - ptr as usize },
        13768usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugAllocInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DebugHoveredDockNode) as usize - ptr as usize },
        13832usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugHoveredDockNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramerateSecPerFrame) as usize - ptr as usize },
        13840usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramerateSecPerFrameIdx) as usize - ptr as usize },
        14080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrameIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramerateSecPerFrameCount) as usize - ptr as usize },
        14084usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramerateSecPerFrameAccum) as usize - ptr as usize },
        14088usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrameAccum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantCaptureMouseNextFrame) as usize - ptr as usize },
        14092usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantCaptureMouseNextFrame)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).WantCaptureKeyboardNextFrame) as usize - ptr as usize
        },
        14096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantCaptureKeyboardNextFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantTextInputNextFrame) as usize - ptr as usize },
        14100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantTextInputNextFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempBuffer) as usize - ptr as usize },
        14104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TempBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempKeychordName) as usize - ptr as usize },
        14120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TempKeychordName)
        )
    );
}
impl ImGuiContext {
    #[inline]
    pub fn ActiveIdMouseButton(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ActiveIdMouseButton(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ActiveIdMouseButton: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let ActiveIdMouseButton: u32 = unsafe { ::std::mem::transmute(ActiveIdMouseButton) };
            ActiveIdMouseButton as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowTempData {
    pub CursorPos: ImVec2,
    pub CursorPosPrevLine: ImVec2,
    pub CursorStartPos: ImVec2,
    pub CursorMaxPos: ImVec2,
    pub IdealMaxPos: ImVec2,
    pub CurrLineSize: ImVec2,
    pub PrevLineSize: ImVec2,
    pub CurrLineTextBaseOffset: f32,
    pub PrevLineTextBaseOffset: f32,
    pub IsSameLine: bool,
    pub IsSetPos: bool,
    pub Indent: ImVec1,
    pub ColumnsOffset: ImVec1,
    pub GroupOffset: ImVec1,
    pub CursorStartPosLossyness: ImVec2,
    pub NavLayerCurrent: ImGuiNavLayer,
    pub NavLayersActiveMask: ::std::os::raw::c_short,
    pub NavLayersActiveMaskNext: ::std::os::raw::c_short,
    pub NavIsScrollPushableX: bool,
    pub NavHideHighlightOneFrame: bool,
    pub NavWindowHasScrollY: bool,
    pub MenuBarAppending: bool,
    pub MenuBarOffset: ImVec2,
    pub MenuColumns: ImGuiMenuColumns,
    pub TreeDepth: ::std::os::raw::c_int,
    pub TreeJumpToParentOnPopMask: ImU32,
    pub ChildWindows: ImVector_ImGuiWindowPtr,
    pub StateStorage: *mut ImGuiStorage,
    pub CurrentColumns: *mut ImGuiOldColumns,
    pub CurrentTableIdx: ::std::os::raw::c_int,
    pub LayoutType: ImGuiLayoutType,
    pub ParentLayoutType: ImGuiLayoutType,
    pub ModalDimBgColor: ImU32,
    pub ItemWidth: f32,
    pub TextWrapPos: f32,
    pub ItemWidthStack: ImVector_float,
    pub TextWrapPosStack: ImVector_float,
}
#[test]
fn bindgen_test_layout_ImGuiWindowTempData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiWindowTempData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowTempData>(),
        232usize,
        concat!("Size of: ", stringify!(ImGuiWindowTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindowTempData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorPos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorPosPrevLine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorPosPrevLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorStartPos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorStartPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorMaxPos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorMaxPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IdealMaxPos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(IdealMaxPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrLineSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrLineSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrevLineSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(PrevLineSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrLineTextBaseOffset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrevLineTextBaseOffset) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(PrevLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSameLine) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(IsSameLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSetPos) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(IsSetPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Indent) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(Indent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsOffset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ColumnsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GroupOffset) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(GroupOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorStartPosLossyness) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorStartPosLossyness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavLayerCurrent) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavLayersActiveMask) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayersActiveMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavLayersActiveMaskNext) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayersActiveMaskNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavIsScrollPushableX) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavIsScrollPushableX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavHideHighlightOneFrame) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavHideHighlightOneFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavWindowHasScrollY) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavWindowHasScrollY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MenuBarAppending) as usize - ptr as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuBarAppending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MenuBarOffset) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuBarOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MenuColumns) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuColumns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TreeDepth) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TreeDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TreeJumpToParentOnPopMask) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TreeJumpToParentOnPopMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildWindows) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ChildWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StateStorage) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(StateStorage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentColumns) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrentColumns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentTableIdx) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrentTableIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LayoutType) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LayoutType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentLayoutType) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ParentLayoutType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ModalDimBgColor) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ModalDimBgColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemWidth) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextWrapPos) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TextWrapPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemWidthStack) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemWidthStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextWrapPosStack) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TextWrapPosStack)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumns {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumns,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiOldColumns() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiOldColumns> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiOldColumns>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiOldColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiOldColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiOldColumns))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumns),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumns),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumns),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindow {
    pub Ctx: *mut ImGuiContext,
    pub Name: *mut ::std::os::raw::c_char,
    pub ID: ImGuiID,
    pub Flags: ImGuiWindowFlags,
    pub FlagsPreviousFrame: ImGuiWindowFlags,
    pub ChildFlags: ImGuiChildFlags,
    pub WindowClass: ImGuiWindowClass,
    pub Viewport: *mut ImGuiViewportP,
    pub ViewportId: ImGuiID,
    pub ViewportPos: ImVec2,
    pub ViewportAllowPlatformMonitorExtend: ::std::os::raw::c_int,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeFull: ImVec2,
    pub ContentSize: ImVec2,
    pub ContentSizeIdeal: ImVec2,
    pub ContentSizeExplicit: ImVec2,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub TitleBarHeight: f32,
    pub MenuBarHeight: f32,
    pub DecoOuterSizeX1: f32,
    pub DecoOuterSizeY1: f32,
    pub DecoOuterSizeX2: f32,
    pub DecoOuterSizeY2: f32,
    pub DecoInnerSizeX1: f32,
    pub DecoInnerSizeY1: f32,
    pub NameBufLen: ::std::os::raw::c_int,
    pub MoveId: ImGuiID,
    pub TabId: ImGuiID,
    pub ChildId: ImGuiID,
    pub PopupId: ImGuiID,
    pub Scroll: ImVec2,
    pub ScrollMax: ImVec2,
    pub ScrollTarget: ImVec2,
    pub ScrollTargetCenterRatio: ImVec2,
    pub ScrollTargetEdgeSnapDist: ImVec2,
    pub ScrollbarSizes: ImVec2,
    pub ScrollbarX: bool,
    pub ScrollbarY: bool,
    pub ViewportOwned: bool,
    pub Active: bool,
    pub WasActive: bool,
    pub WriteAccessed: bool,
    pub Collapsed: bool,
    pub WantCollapseToggle: bool,
    pub SkipItems: bool,
    pub SkipRefresh: bool,
    pub Appearing: bool,
    pub Hidden: bool,
    pub IsFallbackWindow: bool,
    pub IsExplicitChild: bool,
    pub HasCloseButton: bool,
    pub ResizeBorderHovered: ::std::os::raw::c_schar,
    pub ResizeBorderHeld: ::std::os::raw::c_schar,
    pub BeginCount: ::std::os::raw::c_short,
    pub BeginCountPreviousFrame: ::std::os::raw::c_short,
    pub BeginOrderWithinParent: ::std::os::raw::c_short,
    pub BeginOrderWithinContext: ::std::os::raw::c_short,
    pub FocusOrder: ::std::os::raw::c_short,
    pub AutoFitFramesX: ImS8,
    pub AutoFitFramesY: ImS8,
    pub AutoFitOnlyGrows: bool,
    pub AutoPosLastDirection: ImGuiDir,
    pub HiddenFramesCanSkipItems: ImS8,
    pub HiddenFramesCannotSkipItems: ImS8,
    pub HiddenFramesForRenderOnly: ImS8,
    pub DisableInputsFrames: ImS8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub SetWindowPosVal: ImVec2,
    pub SetWindowPosPivot: ImVec2,
    pub IDStack: ImVector_ImGuiID,
    pub DC: ImGuiWindowTempData,
    pub OuterRectClipped: ImRect,
    pub InnerRect: ImRect,
    pub InnerClipRect: ImRect,
    pub WorkRect: ImRect,
    pub ParentWorkRect: ImRect,
    pub ClipRect: ImRect,
    pub ContentRegionRect: ImRect,
    pub HitTestHoleSize: ImVec2ih,
    pub HitTestHoleOffset: ImVec2ih,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameJustFocused: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub ItemWidthDefault: f32,
    pub StateStorage: ImGuiStorage,
    pub ColumnsStorage: ImVector_ImGuiOldColumns,
    pub FontWindowScale: f32,
    pub FontDpiScale: f32,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub DrawList: *mut ImDrawList,
    pub DrawListInst: ImDrawList,
    pub ParentWindow: *mut ImGuiWindow,
    pub ParentWindowInBeginStack: *mut ImGuiWindow,
    pub RootWindow: *mut ImGuiWindow,
    pub RootWindowPopupTree: *mut ImGuiWindow,
    pub RootWindowDockTree: *mut ImGuiWindow,
    pub RootWindowForTitleBarHighlight: *mut ImGuiWindow,
    pub RootWindowForNav: *mut ImGuiWindow,
    pub ParentWindowForFocusRoute: *mut ImGuiWindow,
    pub NavLastChildNavWindow: *mut ImGuiWindow,
    pub NavLastIds: [ImGuiID; 2usize],
    pub NavRectRel: [ImRect; 2usize],
    pub NavPreferredScoringPosRel: [ImVec2; 2usize],
    pub NavRootFocusScopeId: ImGuiID,
    pub MemoryDrawListIdxCapacity: ::std::os::raw::c_int,
    pub MemoryDrawListVtxCapacity: ::std::os::raw::c_int,
    pub MemoryCompacted: bool,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub DockOrder: ::std::os::raw::c_short,
    pub DockStyle: ImGuiWindowDockStyle,
    pub DockNode: *mut ImGuiDockNode,
    pub DockNodeAsHost: *mut ImGuiDockNode,
    pub DockId: ImGuiID,
    pub DockTabItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiWindow() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiWindow> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindow>(),
        1160usize,
        concat!("Size of: ", stringify!(ImGuiWindow))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindow>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FlagsPreviousFrame) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FlagsPreviousFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildFlags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ChildFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowClass) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Viewport) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Viewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportId) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportPos) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportPos)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ViewportAllowPlatformMonitorExtend) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportAllowPlatformMonitorExtend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeFull) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SizeFull)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentSize) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentSizeIdeal) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSizeIdeal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentSizeExplicit) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSizeExplicit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowPadding) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowRounding) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowBorderSize) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TitleBarHeight) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(TitleBarHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MenuBarHeight) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MenuBarHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecoOuterSizeX1) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DecoOuterSizeX1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecoOuterSizeY1) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DecoOuterSizeY1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecoOuterSizeX2) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DecoOuterSizeX2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecoOuterSizeY2) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DecoOuterSizeY2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecoInnerSizeX1) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DecoInnerSizeX1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DecoInnerSizeY1) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DecoInnerSizeY1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NameBufLen) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NameBufLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MoveId) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MoveId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabId) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(TabId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildId) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ChildId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopupId) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(PopupId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Scroll) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Scroll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollMax) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollTarget) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTarget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollTargetCenterRatio) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTargetCenterRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollTargetEdgeSnapDist) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTargetEdgeSnapDist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarSizes) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarX) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarY) as usize - ptr as usize },
        253usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportOwned) as usize - ptr as usize },
        254usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportOwned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Active) as usize - ptr as usize },
        255usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WasActive) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WasActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WriteAccessed) as usize - ptr as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WriteAccessed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Collapsed) as usize - ptr as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Collapsed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantCollapseToggle) as usize - ptr as usize },
        259usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WantCollapseToggle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SkipItems) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SkipItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SkipRefresh) as usize - ptr as usize },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SkipRefresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Appearing) as usize - ptr as usize },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Appearing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hidden) as usize - ptr as usize },
        263usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Hidden)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsFallbackWindow) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(IsFallbackWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsExplicitChild) as usize - ptr as usize },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(IsExplicitChild)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasCloseButton) as usize - ptr as usize },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HasCloseButton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResizeBorderHovered) as usize - ptr as usize },
        267usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ResizeBorderHovered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResizeBorderHeld) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ResizeBorderHeld)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeginCount) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeginCountPreviousFrame) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginCountPreviousFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeginOrderWithinParent) as usize - ptr as usize },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginOrderWithinParent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeginOrderWithinContext) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginOrderWithinContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FocusOrder) as usize - ptr as usize },
        278usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FocusOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AutoFitFramesX) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitFramesX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AutoFitFramesY) as usize - ptr as usize },
        281usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitFramesY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AutoFitOnlyGrows) as usize - ptr as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitOnlyGrows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AutoPosLastDirection) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoPosLastDirection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HiddenFramesCanSkipItems) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesCanSkipItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HiddenFramesCannotSkipItems) as usize - ptr as usize },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesCannotSkipItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HiddenFramesForRenderOnly) as usize - ptr as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesForRenderOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisableInputsFrames) as usize - ptr as usize },
        291usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DisableInputsFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetWindowPosVal) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetWindowPosPivot) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosPivot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IDStack) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(IDStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DC) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OuterRectClipped) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(OuterRectClipped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InnerRect) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(InnerRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InnerClipRect) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(InnerClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkRect) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WorkRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentWorkRect) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentRegionRect) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentRegionRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HitTestHoleSize) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HitTestHoleSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HitTestHoleOffset) as usize - ptr as usize },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HitTestHoleOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrameActive) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrameJustFocused) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastFrameJustFocused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastTimeActive) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastTimeActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemWidthDefault) as usize - ptr as usize },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ItemWidthDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StateStorage) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(StateStorage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsStorage) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ColumnsStorage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontWindowScale) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FontWindowScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDpiScale) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FontDpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SettingsOffset) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SettingsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawList) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DrawList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawListInst) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DrawListInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentWindow) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentWindowInBeginStack) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWindowInBeginStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RootWindow) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RootWindowPopupTree) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowPopupTree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RootWindowDockTree) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowDockTree)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RootWindowForTitleBarHighlight) as usize - ptr as usize
        },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowForTitleBarHighlight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RootWindowForNav) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowForNav)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentWindowForFocusRoute) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWindowForFocusRoute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavLastChildNavWindow) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavLastChildNavWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavLastIds) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavLastIds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavRectRel) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavRectRel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavPreferredScoringPosRel) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavPreferredScoringPosRel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavRootFocusScopeId) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavRootFocusScopeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MemoryDrawListIdxCapacity) as usize - ptr as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryDrawListIdxCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MemoryDrawListVtxCapacity) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryDrawListVtxCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MemoryCompacted) as usize - ptr as usize },
        1092usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryCompacted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockOrder) as usize - ptr as usize },
        1094usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockStyle) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockStyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockNode) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockNodeAsHost) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockNodeAsHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockId) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockTabItemStatusFlags) as usize - ptr as usize },
        1140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockTabItemStatusFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockTabItemRect) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockTabItemRect)
        )
    );
}
impl ImGuiWindow {
    #[inline]
    pub fn SetWindowPosAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowPosAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn SetWindowSizeAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowSizeAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn SetWindowCollapsedAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowCollapsedAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn SetWindowDockAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowDockAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SetWindowPosAllowFlags: ImGuiCond,
        SetWindowSizeAllowFlags: ImGuiCond,
        SetWindowCollapsedAllowFlags: ImGuiCond,
        SetWindowDockAllowFlags: ImGuiCond,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SetWindowPosAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowPosAllowFlags) };
            SetWindowPosAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let SetWindowSizeAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowSizeAllowFlags) };
            SetWindowSizeAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let SetWindowCollapsedAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowCollapsedAllowFlags) };
            SetWindowCollapsedAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let SetWindowDockAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowDockAllowFlags) };
            SetWindowDockAllowFlags as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn DockIsActive(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockIsActive(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockNodeIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockNodeIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockTabIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockTabWantClose(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabWantClose(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        DockIsActive: bool,
        DockNodeIsVisible: bool,
        DockTabIsVisible: bool,
        DockTabWantClose: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DockIsActive: u8 = unsafe { ::std::mem::transmute(DockIsActive) };
            DockIsActive as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let DockNodeIsVisible: u8 = unsafe { ::std::mem::transmute(DockNodeIsVisible) };
            DockNodeIsVisible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DockTabIsVisible: u8 = unsafe { ::std::mem::transmute(DockTabIsVisible) };
            DockTabIsVisible as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let DockTabWantClose: u8 = unsafe { ::std::mem::transmute(DockTabWantClose) };
            DockTabWantClose as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ImGuiTabBarFlags_DockNode: ImGuiTabBarFlagsPrivate_ = 1048576;
pub const ImGuiTabBarFlags_IsFocused: ImGuiTabBarFlagsPrivate_ = 2097152;
pub const ImGuiTabBarFlags_SaveSettings: ImGuiTabBarFlagsPrivate_ = 4194304;
pub type ImGuiTabBarFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiTabItemFlags_SectionMask_: ImGuiTabItemFlagsPrivate_ = 192;
pub const ImGuiTabItemFlags_NoCloseButton: ImGuiTabItemFlagsPrivate_ = 1048576;
pub const ImGuiTabItemFlags_Button: ImGuiTabItemFlagsPrivate_ = 2097152;
pub const ImGuiTabItemFlags_Unsorted: ImGuiTabItemFlagsPrivate_ = 4194304;
pub type ImGuiTabItemFlagsPrivate_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabItem {
    pub ID: ImGuiID,
    pub Flags: ImGuiTabItemFlags,
    pub Window: *mut ImGuiWindow,
    pub LastFrameVisible: ::std::os::raw::c_int,
    pub LastFrameSelected: ::std::os::raw::c_int,
    pub Offset: f32,
    pub Width: f32,
    pub ContentWidth: f32,
    pub RequestedWidth: f32,
    pub NameOffset: ImS32,
    pub BeginOrder: ImS16,
    pub IndexDuringLayout: ImS16,
    pub WantClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTabItem() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTabItem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabItem>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTabItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrameVisible) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(LastFrameVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrameSelected) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(LastFrameSelected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentWidth) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(ContentWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequestedWidth) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(RequestedWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NameOffset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(NameOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeginOrder) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(BeginOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndexDuringLayout) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(IndexDuringLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantClose) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(WantClose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabItem() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTabItem> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabBar {
    pub Tabs: ImVector_ImGuiTabItem,
    pub Flags: ImGuiTabBarFlags,
    pub ID: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub NextSelectedTabId: ImGuiID,
    pub VisibleTabId: ImGuiID,
    pub CurrFrameVisible: ::std::os::raw::c_int,
    pub PrevFrameVisible: ::std::os::raw::c_int,
    pub BarRect: ImRect,
    pub CurrTabsContentsHeight: f32,
    pub PrevTabsContentsHeight: f32,
    pub WidthAllTabs: f32,
    pub WidthAllTabsIdeal: f32,
    pub ScrollingAnim: f32,
    pub ScrollingTarget: f32,
    pub ScrollingTargetDistToVisibility: f32,
    pub ScrollingSpeed: f32,
    pub ScrollingRectMinX: f32,
    pub ScrollingRectMaxX: f32,
    pub SeparatorMinX: f32,
    pub SeparatorMaxX: f32,
    pub ReorderRequestTabId: ImGuiID,
    pub ReorderRequestOffset: ImS16,
    pub BeginCount: ImS8,
    pub WantLayout: bool,
    pub VisibleTabWasSubmitted: bool,
    pub TabsAddedNew: bool,
    pub TabsActiveCount: ImS16,
    pub LastTabItemIdx: ImS16,
    pub ItemSpacingY: f32,
    pub FramePadding: ImVec2,
    pub BackupCursorPos: ImVec2,
    pub TabsNames: ImGuiTextBuffer,
}
#[test]
fn bindgen_test_layout_ImGuiTabBar() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTabBar> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabBar>(),
        160usize,
        concat!("Size of: ", stringify!(ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTabBar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Tabs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(Tabs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectedTabId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(SelectedTabId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NextSelectedTabId) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(NextSelectedTabId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VisibleTabId) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(VisibleTabId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrFrameVisible) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(CurrFrameVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrevFrameVisible) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(PrevFrameVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BarRect) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(BarRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrTabsContentsHeight) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(CurrTabsContentsHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrevTabsContentsHeight) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(PrevTabsContentsHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WidthAllTabs) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WidthAllTabs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WidthAllTabsIdeal) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WidthAllTabsIdeal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollingAnim) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingAnim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollingTarget) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingTarget)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ScrollingTargetDistToVisibility) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingTargetDistToVisibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollingSpeed) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollingRectMinX) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingRectMinX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollingRectMaxX) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingRectMaxX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorMinX) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(SeparatorMinX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorMaxX) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(SeparatorMaxX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReorderRequestTabId) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ReorderRequestTabId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReorderRequestOffset) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ReorderRequestOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeginCount) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(BeginCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantLayout) as usize - ptr as usize },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WantLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VisibleTabWasSubmitted) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(VisibleTabWasSubmitted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabsAddedNew) as usize - ptr as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsAddedNew)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabsActiveCount) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsActiveCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastTabItemIdx) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(LastTabItemIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemSpacingY) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ItemSpacingY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramePadding) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackupCursorPos) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(BackupCursorPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabsNames) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsNames)
        )
    );
}
pub type ImGuiTableColumnIdx = ImS16;
pub type ImGuiTableDrawChannelIdx = ImU16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumn {
    pub Flags: ImGuiTableColumnFlags,
    pub WidthGiven: f32,
    pub MinX: f32,
    pub MaxX: f32,
    pub WidthRequest: f32,
    pub WidthAuto: f32,
    pub StretchWeight: f32,
    pub InitStretchWeightOrWidth: f32,
    pub ClipRect: ImRect,
    pub UserID: ImGuiID,
    pub WorkMinX: f32,
    pub WorkMaxX: f32,
    pub ItemWidth: f32,
    pub ContentMaxXFrozen: f32,
    pub ContentMaxXUnfrozen: f32,
    pub ContentMaxXHeadersUsed: f32,
    pub ContentMaxXHeadersIdeal: f32,
    pub NameOffset: ImS16,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub IndexWithinEnabledSet: ImGuiTableColumnIdx,
    pub PrevEnabledColumn: ImGuiTableColumnIdx,
    pub NextEnabledColumn: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub DrawChannelFrozen: ImGuiTableDrawChannelIdx,
    pub DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsEnabled: bool,
    pub IsUserEnabled: bool,
    pub IsUserEnabledNextFrame: bool,
    pub IsVisibleX: bool,
    pub IsVisibleY: bool,
    pub IsRequestOutput: bool,
    pub IsSkipItems: bool,
    pub IsPreserveWidthAuto: bool,
    pub NavLayerCurrent: ImS8,
    pub AutoFitQueue: ImU8,
    pub CannotSkipItemsQueue: ImU8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub SortDirectionsAvailList: ImU8,
}
#[test]
fn bindgen_test_layout_ImGuiTableColumn() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableColumn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumn>(),
        112usize,
        concat!("Size of: ", stringify!(ImGuiTableColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumn>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WidthGiven) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WidthGiven)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(MinX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaxX) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(MaxX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WidthRequest) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WidthRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WidthAuto) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WidthAuto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StretchWeight) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(StretchWeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InitStretchWeightOrWidth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(InitStretchWeightOrWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserID) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkMinX) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WorkMinX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkMaxX) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WorkMaxX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemWidth) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ItemWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentMaxXFrozen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ContentMaxXFrozen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentMaxXUnfrozen) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ContentMaxXUnfrozen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentMaxXHeadersUsed) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ContentMaxXHeadersUsed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContentMaxXHeadersIdeal) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ContentMaxXHeadersIdeal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NameOffset) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(NameOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayOrder) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(DisplayOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndexWithinEnabledSet) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IndexWithinEnabledSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrevEnabledColumn) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(PrevEnabledColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NextEnabledColumn) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(NextEnabledColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortOrder) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(SortOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawChannelCurrent) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(DrawChannelCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawChannelFrozen) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(DrawChannelFrozen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawChannelUnfrozen) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(DrawChannelUnfrozen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsUserEnabled) as usize - ptr as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsUserEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsUserEnabledNextFrame) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsUserEnabledNextFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsVisibleX) as usize - ptr as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsVisibleX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsVisibleY) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsVisibleY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsRequestOutput) as usize - ptr as usize },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsRequestOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSkipItems) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsSkipItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsPreserveWidthAuto) as usize - ptr as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsPreserveWidthAuto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavLayerCurrent) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(NavLayerCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AutoFitQueue) as usize - ptr as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(AutoFitQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CannotSkipItemsQueue) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(CannotSkipItemsQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortDirectionsAvailList) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(SortDirectionsAvailList)
        )
    );
}
impl ImGuiTableColumn {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn SortDirectionsAvailCount(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailCount(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn SortDirectionsAvailMask(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailMask(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        SortDirectionsAvailCount: ImU8,
        SortDirectionsAvailMask: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let SortDirectionsAvailCount: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailCount) };
            SortDirectionsAvailCount as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let SortDirectionsAvailMask: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailMask) };
            SortDirectionsAvailMask as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableCellData {
    pub BgColor: ImU32,
    pub Column: ImGuiTableColumnIdx,
}
#[test]
fn bindgen_test_layout_ImGuiTableCellData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableCellData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableCellData>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiTableCellData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableCellData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableCellData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BgColor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableCellData),
            "::",
            stringify!(BgColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Column) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableCellData),
            "::",
            stringify!(Column)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableHeaderData {
    pub Index: ImGuiTableColumnIdx,
    pub TextColor: ImU32,
    pub BgColor0: ImU32,
    pub BgColor1: ImU32,
}
#[test]
fn bindgen_test_layout_ImGuiTableHeaderData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableHeaderData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableHeaderData>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTableHeaderData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableHeaderData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableHeaderData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableHeaderData),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextColor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableHeaderData),
            "::",
            stringify!(TextColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BgColor0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableHeaderData),
            "::",
            stringify!(BgColor0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BgColor1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableHeaderData),
            "::",
            stringify!(BgColor1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableInstanceData {
    pub TableInstanceID: ImGuiID,
    pub LastOuterHeight: f32,
    pub LastTopHeadersRowHeight: f32,
    pub LastFrozenHeight: f32,
    pub HoveredRowLast: ::std::os::raw::c_int,
    pub HoveredRowNext: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiTableInstanceData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableInstanceData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableInstanceData>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiTableInstanceData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableInstanceData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableInstanceData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TableInstanceID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableInstanceData),
            "::",
            stringify!(TableInstanceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastOuterHeight) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableInstanceData),
            "::",
            stringify!(LastOuterHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastTopHeadersRowHeight) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableInstanceData),
            "::",
            stringify!(LastTopHeadersRowHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrozenHeight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableInstanceData),
            "::",
            stringify!(LastFrozenHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredRowLast) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableInstanceData),
            "::",
            stringify!(HoveredRowLast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredRowNext) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableInstanceData),
            "::",
            stringify!(HoveredRowNext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableColumn {
    pub Data: *mut ImGuiTableColumn,
    pub DataEnd: *mut ImGuiTableColumn,
}
#[test]
fn bindgen_test_layout_ImSpan_ImGuiTableColumn() {
    const UNINIT: ::std::mem::MaybeUninit<ImSpan_ImGuiTableColumn> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImSpan_ImGuiTableColumn>(),
        16usize,
        concat!("Size of: ", stringify!(ImSpan_ImGuiTableColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<ImSpan_ImGuiTableColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(ImSpan_ImGuiTableColumn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableColumn),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataEnd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableColumn),
            "::",
            stringify!(DataEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableColumnIdx {
    pub Data: *mut ImGuiTableColumnIdx,
    pub DataEnd: *mut ImGuiTableColumnIdx,
}
#[test]
fn bindgen_test_layout_ImSpan_ImGuiTableColumnIdx() {
    const UNINIT: ::std::mem::MaybeUninit<ImSpan_ImGuiTableColumnIdx> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImSpan_ImGuiTableColumnIdx>(),
        16usize,
        concat!("Size of: ", stringify!(ImSpan_ImGuiTableColumnIdx))
    );
    assert_eq!(
        ::std::mem::align_of::<ImSpan_ImGuiTableColumnIdx>(),
        8usize,
        concat!("Alignment of ", stringify!(ImSpan_ImGuiTableColumnIdx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableColumnIdx),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataEnd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableColumnIdx),
            "::",
            stringify!(DataEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableCellData {
    pub Data: *mut ImGuiTableCellData,
    pub DataEnd: *mut ImGuiTableCellData,
}
#[test]
fn bindgen_test_layout_ImSpan_ImGuiTableCellData() {
    const UNINIT: ::std::mem::MaybeUninit<ImSpan_ImGuiTableCellData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImSpan_ImGuiTableCellData>(),
        16usize,
        concat!("Size of: ", stringify!(ImSpan_ImGuiTableCellData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImSpan_ImGuiTableCellData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImSpan_ImGuiTableCellData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableCellData),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataEnd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableCellData),
            "::",
            stringify!(DataEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableInstanceData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableInstanceData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableInstanceData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTableInstanceData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableInstanceData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableInstanceData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableInstanceData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTableInstanceData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableInstanceData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableInstanceData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableInstanceData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableColumnSortSpecs {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableColumnSortSpecs,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableColumnSortSpecs() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTableColumnSortSpecs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableColumnSortSpecs>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableColumnSortSpecs>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTable {
    pub ID: ImGuiID,
    pub Flags: ImGuiTableFlags,
    pub RawData: *mut ::std::os::raw::c_void,
    pub TempData: *mut ImGuiTableTempData,
    pub Columns: ImSpan_ImGuiTableColumn,
    pub DisplayOrderToIndex: ImSpan_ImGuiTableColumnIdx,
    pub RowCellData: ImSpan_ImGuiTableCellData,
    pub EnabledMaskByDisplayOrder: ImBitArrayPtr,
    pub EnabledMaskByIndex: ImBitArrayPtr,
    pub VisibleMaskByIndex: ImBitArrayPtr,
    pub SettingsLoadedFlags: ImGuiTableFlags,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub ColumnsCount: ::std::os::raw::c_int,
    pub CurrentRow: ::std::os::raw::c_int,
    pub CurrentColumn: ::std::os::raw::c_int,
    pub InstanceCurrent: ImS16,
    pub InstanceInteracted: ImS16,
    pub RowPosY1: f32,
    pub RowPosY2: f32,
    pub RowMinHeight: f32,
    pub RowCellPaddingY: f32,
    pub RowTextBaseline: f32,
    pub RowIndentOffsetX: f32,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub RowBgColorCounter: ::std::os::raw::c_int,
    pub RowBgColor: [ImU32; 2usize],
    pub BorderColorStrong: ImU32,
    pub BorderColorLight: ImU32,
    pub BorderX1: f32,
    pub BorderX2: f32,
    pub HostIndentX: f32,
    pub MinColumnWidth: f32,
    pub OuterPaddingX: f32,
    pub CellPaddingX: f32,
    pub CellSpacingX1: f32,
    pub CellSpacingX2: f32,
    pub InnerWidth: f32,
    pub ColumnsGivenWidth: f32,
    pub ColumnsAutoFitWidth: f32,
    pub ColumnsStretchSumWeights: f32,
    pub ResizedColumnNextWidth: f32,
    pub ResizeLockMinContentsX2: f32,
    pub RefScale: f32,
    pub AngledHeadersHeight: f32,
    pub AngledHeadersSlope: f32,
    pub OuterRect: ImRect,
    pub InnerRect: ImRect,
    pub WorkRect: ImRect,
    pub InnerClipRect: ImRect,
    pub BgClipRect: ImRect,
    pub Bg0ClipRectForDrawCmd: ImRect,
    pub Bg2ClipRectForDrawCmd: ImRect,
    pub HostClipRect: ImRect,
    pub HostBackupInnerClipRect: ImRect,
    pub OuterWindow: *mut ImGuiWindow,
    pub InnerWindow: *mut ImGuiWindow,
    pub ColumnsNames: ImGuiTextBuffer,
    pub DrawSplitter: *mut ImDrawListSplitter,
    pub InstanceDataFirst: ImGuiTableInstanceData,
    pub InstanceDataExtra: ImVector_ImGuiTableInstanceData,
    pub SortSpecsSingle: ImGuiTableColumnSortSpecs,
    pub SortSpecsMulti: ImVector_ImGuiTableColumnSortSpecs,
    pub SortSpecs: ImGuiTableSortSpecs,
    pub SortSpecsCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledFixedCount: ImGuiTableColumnIdx,
    pub DeclColumnsCount: ImGuiTableColumnIdx,
    pub AngledHeadersCount: ImGuiTableColumnIdx,
    pub HoveredColumnBody: ImGuiTableColumnIdx,
    pub HoveredColumnBorder: ImGuiTableColumnIdx,
    pub HighlightColumnHeader: ImGuiTableColumnIdx,
    pub AutoFitSingleColumn: ImGuiTableColumnIdx,
    pub ResizedColumn: ImGuiTableColumnIdx,
    pub LastResizedColumn: ImGuiTableColumnIdx,
    pub HeldHeaderColumn: ImGuiTableColumnIdx,
    pub ReorderColumn: ImGuiTableColumnIdx,
    pub ReorderColumnDir: ImGuiTableColumnIdx,
    pub LeftMostEnabledColumn: ImGuiTableColumnIdx,
    pub RightMostEnabledColumn: ImGuiTableColumnIdx,
    pub LeftMostStretchedColumn: ImGuiTableColumnIdx,
    pub RightMostStretchedColumn: ImGuiTableColumnIdx,
    pub ContextPopupColumn: ImGuiTableColumnIdx,
    pub FreezeRowsRequest: ImGuiTableColumnIdx,
    pub FreezeRowsCount: ImGuiTableColumnIdx,
    pub FreezeColumnsRequest: ImGuiTableColumnIdx,
    pub FreezeColumnsCount: ImGuiTableColumnIdx,
    pub RowCellDataCurrent: ImGuiTableColumnIdx,
    pub DummyDrawChannel: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsLayoutLocked: bool,
    pub IsInsideRow: bool,
    pub IsInitializing: bool,
    pub IsSortSpecsDirty: bool,
    pub IsUsingHeaders: bool,
    pub IsContextPopupOpen: bool,
    pub DisableDefaultContextMenu: bool,
    pub IsSettingsRequestLoad: bool,
    pub IsSettingsDirty: bool,
    pub IsDefaultDisplayOrder: bool,
    pub IsResetAllRequest: bool,
    pub IsResetDisplayOrderRequest: bool,
    pub IsUnfrozenRows: bool,
    pub IsDefaultSizingPolicy: bool,
    pub IsActiveIdAliveBeforeTable: bool,
    pub IsActiveIdInTable: bool,
    pub HasScrollbarYCurr: bool,
    pub HasScrollbarYPrev: bool,
    pub MemoryCompacted: bool,
    pub HostSkipItems: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTable() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTable>(),
        592usize,
        concat!("Size of: ", stringify!(ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RawData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RawData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(TempData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Columns) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Columns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayOrderToIndex) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(DisplayOrderToIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowCellData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowCellData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EnabledMaskByDisplayOrder) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(EnabledMaskByDisplayOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EnabledMaskByIndex) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(EnabledMaskByIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VisibleMaskByIndex) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(VisibleMaskByIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SettingsLoadedFlags) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SettingsLoadedFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SettingsOffset) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SettingsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastFrameActive) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsCount) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentRow) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CurrentRow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentColumn) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CurrentColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InstanceCurrent) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InstanceCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InstanceInteracted) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InstanceInteracted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowPosY1) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowPosY1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowPosY2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowPosY2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowMinHeight) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowMinHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowCellPaddingY) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowCellPaddingY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowTextBaseline) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowTextBaseline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowIndentOffsetX) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowIndentOffsetX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowBgColorCounter) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowBgColorCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowBgColor) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowBgColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BorderColorStrong) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(BorderColorStrong)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BorderColorLight) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(BorderColorLight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BorderX1) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(BorderX1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BorderX2) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(BorderX2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostIndentX) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostIndentX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinColumnWidth) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(MinColumnWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OuterPaddingX) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(OuterPaddingX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CellPaddingX) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CellPaddingX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CellSpacingX1) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CellSpacingX1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CellSpacingX2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CellSpacingX2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InnerWidth) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InnerWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsGivenWidth) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsGivenWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsAutoFitWidth) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsAutoFitWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsStretchSumWeights) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsStretchSumWeights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResizedColumnNextWidth) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ResizedColumnNextWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResizeLockMinContentsX2) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ResizeLockMinContentsX2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefScale) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RefScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AngledHeadersHeight) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(AngledHeadersHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AngledHeadersSlope) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(AngledHeadersSlope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OuterRect) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(OuterRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InnerRect) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InnerRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkRect) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(WorkRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InnerClipRect) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InnerClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BgClipRect) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(BgClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bg0ClipRectForDrawCmd) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Bg0ClipRectForDrawCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bg2ClipRectForDrawCmd) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Bg2ClipRectForDrawCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostClipRect) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupInnerClipRect) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupInnerClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OuterWindow) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(OuterWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InnerWindow) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InnerWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsNames) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawSplitter) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(DrawSplitter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InstanceDataFirst) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InstanceDataFirst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InstanceDataExtra) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InstanceDataExtra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortSpecsSingle) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SortSpecsSingle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortSpecsMulti) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SortSpecsMulti)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortSpecs) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SortSpecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortSpecsCount) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SortSpecsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsEnabledCount) as usize - ptr as usize },
        514usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsEnabledCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsEnabledFixedCount) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsEnabledFixedCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeclColumnsCount) as usize - ptr as usize },
        518usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(DeclColumnsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AngledHeadersCount) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(AngledHeadersCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredColumnBody) as usize - ptr as usize },
        522usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HoveredColumnBody)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoveredColumnBorder) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HoveredColumnBorder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HighlightColumnHeader) as usize - ptr as usize },
        526usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HighlightColumnHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AutoFitSingleColumn) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(AutoFitSingleColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResizedColumn) as usize - ptr as usize },
        530usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ResizedColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastResizedColumn) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LastResizedColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HeldHeaderColumn) as usize - ptr as usize },
        534usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HeldHeaderColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReorderColumn) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ReorderColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReorderColumnDir) as usize - ptr as usize },
        538usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ReorderColumnDir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LeftMostEnabledColumn) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LeftMostEnabledColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RightMostEnabledColumn) as usize - ptr as usize },
        542usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RightMostEnabledColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LeftMostStretchedColumn) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LeftMostStretchedColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RightMostStretchedColumn) as usize - ptr as usize },
        546usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RightMostStretchedColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContextPopupColumn) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ContextPopupColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreezeRowsRequest) as usize - ptr as usize },
        550usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(FreezeRowsRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreezeRowsCount) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(FreezeRowsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreezeColumnsRequest) as usize - ptr as usize },
        554usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(FreezeColumnsRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreezeColumnsCount) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(FreezeColumnsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowCellDataCurrent) as usize - ptr as usize },
        558usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowCellDataCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DummyDrawChannel) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(DummyDrawChannel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bg2DrawChannelCurrent) as usize - ptr as usize },
        562usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Bg2DrawChannelCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bg2DrawChannelUnfrozen) as usize - ptr as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Bg2DrawChannelUnfrozen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsLayoutLocked) as usize - ptr as usize },
        566usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsLayoutLocked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsInsideRow) as usize - ptr as usize },
        567usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsInsideRow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsInitializing) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsInitializing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSortSpecsDirty) as usize - ptr as usize },
        569usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsSortSpecsDirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsUsingHeaders) as usize - ptr as usize },
        570usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsUsingHeaders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsContextPopupOpen) as usize - ptr as usize },
        571usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsContextPopupOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisableDefaultContextMenu) as usize - ptr as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(DisableDefaultContextMenu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSettingsRequestLoad) as usize - ptr as usize },
        573usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsSettingsRequestLoad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSettingsDirty) as usize - ptr as usize },
        574usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsSettingsDirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsDefaultDisplayOrder) as usize - ptr as usize },
        575usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsDefaultDisplayOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsResetAllRequest) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsResetAllRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsResetDisplayOrderRequest) as usize - ptr as usize },
        577usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsResetDisplayOrderRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsUnfrozenRows) as usize - ptr as usize },
        578usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsUnfrozenRows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsDefaultSizingPolicy) as usize - ptr as usize },
        579usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsDefaultSizingPolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsActiveIdAliveBeforeTable) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsActiveIdAliveBeforeTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsActiveIdInTable) as usize - ptr as usize },
        581usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsActiveIdInTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasScrollbarYCurr) as usize - ptr as usize },
        582usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HasScrollbarYCurr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasScrollbarYPrev) as usize - ptr as usize },
        583usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HasScrollbarYPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MemoryCompacted) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(MemoryCompacted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostSkipItems) as usize - ptr as usize },
        585usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostSkipItems)
        )
    );
}
impl ImGuiTable {
    #[inline]
    pub fn RowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_RowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn LastRowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_LastRowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RowFlags: ImGuiTableRowFlags,
        LastRowFlags: ImGuiTableRowFlags,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let RowFlags: u32 = unsafe { ::std::mem::transmute(RowFlags) };
            RowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let LastRowFlags: u32 = unsafe { ::std::mem::transmute(LastRowFlags) };
            LastRowFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableHeaderData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableHeaderData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableHeaderData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTableHeaderData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableHeaderData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableHeaderData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableHeaderData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTableHeaderData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableHeaderData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableHeaderData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableHeaderData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableTempData {
    pub TableIndex: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub AngledHeadersExtraWidth: f32,
    pub AngledHeadersRequests: ImVector_ImGuiTableHeaderData,
    pub UserOuterSize: ImVec2,
    pub DrawSplitter: ImDrawListSplitter,
    pub HostBackupWorkRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub HostBackupPrevLineSize: ImVec2,
    pub HostBackupCurrLineSize: ImVec2,
    pub HostBackupCursorMaxPos: ImVec2,
    pub HostBackupColumnsOffset: ImVec1,
    pub HostBackupItemWidth: f32,
    pub HostBackupItemWidthStackSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiTableTempData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableTempData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableTempData>(),
        136usize,
        concat!("Size of: ", stringify!(ImGuiTableTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTableTempData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TableIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(TableIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LastTimeActive) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(LastTimeActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AngledHeadersExtraWidth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(AngledHeadersExtraWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AngledHeadersRequests) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(AngledHeadersRequests)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserOuterSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(UserOuterSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawSplitter) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(DrawSplitter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupWorkRect) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(HostBackupWorkRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupParentWorkRect) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(HostBackupParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupPrevLineSize) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(HostBackupPrevLineSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupCurrLineSize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(HostBackupCurrLineSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupCursorMaxPos) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(HostBackupCursorMaxPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupColumnsOffset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(HostBackupColumnsOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostBackupItemWidth) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(HostBackupItemWidth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).HostBackupItemWidthStackSize) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableTempData),
            "::",
            stringify!(HostBackupItemWidthStackSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSettings {
    pub WidthOrWeight: f32,
    pub UserID: ImGuiID,
    pub Index: ImGuiTableColumnIdx,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_ImGuiTableColumnSettings() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableColumnSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumnSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTableColumnSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumnSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumnSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WidthOrWeight) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(WidthOrWeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserID) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayOrder) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(DisplayOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortOrder) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(SortOrder)
        )
    );
}
impl ImGuiTableColumnSettings {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn IsEnabled(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsEnabled(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsStretch(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsStretch(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        IsEnabled: ImU8,
        IsStretch: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IsEnabled: u8 = unsafe { ::std::mem::transmute(IsEnabled) };
            IsEnabled as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let IsStretch: u8 = unsafe { ::std::mem::transmute(IsStretch) };
            IsStretch as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSettings {
    pub ID: ImGuiID,
    pub SaveFlags: ImGuiTableFlags,
    pub RefScale: f32,
    pub ColumnsCount: ImGuiTableColumnIdx,
    pub ColumnsCountMax: ImGuiTableColumnIdx,
    pub WantApply: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTableSettings() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableSettings>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiTableSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SaveFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(SaveFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefScale) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(RefScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(ColumnsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsCountMax) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(ColumnsCountMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantApply) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(WantApply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontBuilderIO {
    pub FontBuilder_Build:
        ::std::option::Option<unsafe extern "C" fn(atlas: *mut ImFontAtlas) -> bool>,
}
#[test]
fn bindgen_test_layout_ImFontBuilderIO() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontBuilderIO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontBuilderIO>(),
        8usize,
        concat!("Size of: ", stringify!(ImFontBuilderIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontBuilderIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontBuilderIO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilder_Build) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontBuilderIO),
            "::",
            stringify!(FontBuilder_Build)
        )
    );
}
extern "C" {
    pub fn ImVec2_ImVec2_Nil() -> *mut ImVec2;
}
extern "C" {
    pub fn ImVec2_destroy(self_: *mut ImVec2);
}
extern "C" {
    pub fn ImVec2_ImVec2_Float(_x: f32, _y: f32) -> *mut ImVec2;
}
extern "C" {
    pub fn ImVec4_ImVec4_Nil() -> *mut ImVec4;
}
extern "C" {
    pub fn ImVec4_destroy(self_: *mut ImVec4);
}
extern "C" {
    pub fn ImVec4_ImVec4_Float(_x: f32, _y: f32, _z: f32, _w: f32) -> *mut ImVec4;
}
extern "C" {
    pub fn igCreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    pub fn igDestroyContext(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igGetCurrentContext() -> *mut ImGuiContext;
}
extern "C" {
    pub fn igSetCurrentContext(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igGetIO() -> *mut ImGuiIO;
}
extern "C" {
    pub fn igGetStyle() -> *mut ImGuiStyle;
}
extern "C" {
    pub fn igNewFrame();
}
extern "C" {
    pub fn igEndFrame();
}
extern "C" {
    pub fn igRender();
}
extern "C" {
    pub fn igGetDrawData() -> *mut ImDrawData;
}
extern "C" {
    pub fn igShowDemoWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowMetricsWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowDebugLogWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowIDStackToolWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowAboutWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowStyleEditor(ref_: *mut ImGuiStyle);
}
extern "C" {
    pub fn igShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn igShowFontSelector(label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igShowUserGuide();
}
extern "C" {
    pub fn igGetVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igStyleColorsDark(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn igStyleColorsLight(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn igStyleColorsClassic(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn igBegin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEnd();
}
extern "C" {
    pub fn igBeginChild_Str(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginChild_ID(
        id: ImGuiID,
        size: ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEndChild();
}
extern "C" {
    pub fn igIsWindowAppearing() -> bool;
}
extern "C" {
    pub fn igIsWindowCollapsed() -> bool;
}
extern "C" {
    pub fn igIsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
extern "C" {
    pub fn igIsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    pub fn igGetWindowDrawList() -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetWindowDpiScale() -> f32;
}
extern "C" {
    pub fn igGetWindowPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowSize(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowWidth() -> f32;
}
extern "C" {
    pub fn igGetWindowHeight() -> f32;
}
extern "C" {
    pub fn igGetWindowViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn igSetNextWindowPos(pos: ImVec2, cond: ImGuiCond, pivot: ImVec2);
}
extern "C" {
    pub fn igSetNextWindowSize(size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetNextWindowSizeConstraints(
        size_min: ImVec2,
        size_max: ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igSetNextWindowContentSize(size: ImVec2);
}
extern "C" {
    pub fn igSetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetNextWindowFocus();
}
extern "C" {
    pub fn igSetNextWindowScroll(scroll: ImVec2);
}
extern "C" {
    pub fn igSetNextWindowBgAlpha(alpha: f32);
}
extern "C" {
    pub fn igSetNextWindowViewport(viewport_id: ImGuiID);
}
extern "C" {
    pub fn igSetWindowPos_Vec2(pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowSize_Vec2(size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowCollapsed_Bool(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowFocus_Nil();
}
extern "C" {
    pub fn igSetWindowFontScale(scale: f32);
}
extern "C" {
    pub fn igSetWindowPos_Str(name: *const ::std::os::raw::c_char, pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowSize_Str(name: *const ::std::os::raw::c_char, size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowCollapsed_Str(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
extern "C" {
    pub fn igSetWindowFocus_Str(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igGetContentRegionAvail(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetContentRegionMax(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowContentRegionMin(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowContentRegionMax(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetScrollX() -> f32;
}
extern "C" {
    pub fn igGetScrollY() -> f32;
}
extern "C" {
    pub fn igSetScrollX_Float(scroll_x: f32);
}
extern "C" {
    pub fn igSetScrollY_Float(scroll_y: f32);
}
extern "C" {
    pub fn igGetScrollMaxX() -> f32;
}
extern "C" {
    pub fn igGetScrollMaxY() -> f32;
}
extern "C" {
    pub fn igSetScrollHereX(center_x_ratio: f32);
}
extern "C" {
    pub fn igSetScrollHereY(center_y_ratio: f32);
}
extern "C" {
    pub fn igSetScrollFromPosX_Float(local_x: f32, center_x_ratio: f32);
}
extern "C" {
    pub fn igSetScrollFromPosY_Float(local_y: f32, center_y_ratio: f32);
}
extern "C" {
    pub fn igPushFont(font: *mut ImFont);
}
extern "C" {
    pub fn igPopFont();
}
extern "C" {
    pub fn igPushStyleColor_U32(idx: ImGuiCol, col: ImU32);
}
extern "C" {
    pub fn igPushStyleColor_Vec4(idx: ImGuiCol, col: ImVec4);
}
extern "C" {
    pub fn igPopStyleColor(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igPushStyleVar_Float(idx: ImGuiStyleVar, val: f32);
}
extern "C" {
    pub fn igPushStyleVar_Vec2(idx: ImGuiStyleVar, val: ImVec2);
}
extern "C" {
    pub fn igPopStyleVar(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igPushTabStop(tab_stop: bool);
}
extern "C" {
    pub fn igPopTabStop();
}
extern "C" {
    pub fn igPushButtonRepeat(repeat: bool);
}
extern "C" {
    pub fn igPopButtonRepeat();
}
extern "C" {
    pub fn igPushItemWidth(item_width: f32);
}
extern "C" {
    pub fn igPopItemWidth();
}
extern "C" {
    pub fn igSetNextItemWidth(item_width: f32);
}
extern "C" {
    pub fn igCalcItemWidth() -> f32;
}
extern "C" {
    pub fn igPushTextWrapPos(wrap_local_pos_x: f32);
}
extern "C" {
    pub fn igPopTextWrapPos();
}
extern "C" {
    pub fn igGetFont() -> *mut ImFont;
}
extern "C" {
    pub fn igGetFontSize() -> f32;
}
extern "C" {
    pub fn igGetFontTexUvWhitePixel(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetColorU32_Col(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
extern "C" {
    pub fn igGetColorU32_Vec4(col: ImVec4) -> ImU32;
}
extern "C" {
    pub fn igGetColorU32_U32(col: ImU32, alpha_mul: f32) -> ImU32;
}
extern "C" {
    pub fn igGetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
extern "C" {
    pub fn igGetCursorScreenPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igSetCursorScreenPos(pos: ImVec2);
}
extern "C" {
    pub fn igGetCursorPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetCursorPosX() -> f32;
}
extern "C" {
    pub fn igGetCursorPosY() -> f32;
}
extern "C" {
    pub fn igSetCursorPos(local_pos: ImVec2);
}
extern "C" {
    pub fn igSetCursorPosX(local_x: f32);
}
extern "C" {
    pub fn igSetCursorPosY(local_y: f32);
}
extern "C" {
    pub fn igGetCursorStartPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igSeparator();
}
extern "C" {
    pub fn igSameLine(offset_from_start_x: f32, spacing: f32);
}
extern "C" {
    pub fn igNewLine();
}
extern "C" {
    pub fn igSpacing();
}
extern "C" {
    pub fn igDummy(size: ImVec2);
}
extern "C" {
    pub fn igIndent(indent_w: f32);
}
extern "C" {
    pub fn igUnindent(indent_w: f32);
}
extern "C" {
    pub fn igBeginGroup();
}
extern "C" {
    pub fn igEndGroup();
}
extern "C" {
    pub fn igAlignTextToFramePadding();
}
extern "C" {
    pub fn igGetTextLineHeight() -> f32;
}
extern "C" {
    pub fn igGetTextLineHeightWithSpacing() -> f32;
}
extern "C" {
    pub fn igGetFrameHeight() -> f32;
}
extern "C" {
    pub fn igGetFrameHeightWithSpacing() -> f32;
}
extern "C" {
    pub fn igPushID_Str(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igPushID_StrStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igPushID_Ptr(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn igPushID_Int(int_id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igPopID();
}
extern "C" {
    pub fn igGetID_Str(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
extern "C" {
    pub fn igGetID_StrStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igGetID_Ptr(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
extern "C" {
    pub fn igTextUnformatted(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igTextV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn igTextColored(col: ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igTextColoredV(
        col: ImVec4,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn igTextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igTextDisabledV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn igTextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igTextWrappedV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn igLabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn igLabelTextV(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn igBulletText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igBulletTextV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn igSeparatorText(label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igButton(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
extern "C" {
    pub fn igSmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn igInvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
extern "C" {
    pub fn igCheckbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
extern "C" {
    pub fn igCheckboxFlags_IntPtr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
        flags_value: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igCheckboxFlags_UintPtr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn igRadioButton_Bool(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
extern "C" {
    pub fn igRadioButton_IntPtr(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igProgressBar(fraction: f32, size_arg: ImVec2, overlay: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igBullet();
}
extern "C" {
    pub fn igImage(
        user_texture_id: ImTextureID,
        image_size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        tint_col: ImVec4,
        border_col: ImVec4,
    );
}
extern "C" {
    pub fn igImageButton(
        str_id: *const ::std::os::raw::c_char,
        user_texture_id: ImTextureID,
        image_size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
extern "C" {
    pub fn igBeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEndCombo();
}
extern "C" {
    pub fn igCombo_Str_arr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igCombo_Str(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igCombo_FnStrPtr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderAngle(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igVSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igVSliderInt(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igVSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        size: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputDouble(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn igColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn igColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn igColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
extern "C" {
    pub fn igColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: ImVec4,
        flags: ImGuiColorEditFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igSetColorEditOptions(flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igTreeNode_Str(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn igTreeNode_StrStr(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNode_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeV_Str(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeV_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeEx_Str(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeEx_StrStr(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeEx_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeExV_Str(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeExV_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    pub fn igTreePush_Str(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igTreePush_Ptr(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn igTreePop();
}
extern "C" {
    pub fn igGetTreeNodeToLabelSpacing() -> f32;
}
extern "C" {
    pub fn igCollapsingHeader_TreeNodeFlags(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn igCollapsingHeader_BoolPtr(
        label: *const ::std::os::raw::c_char,
        p_visible: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSelectable_Bool(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igSelectable_BoolPtr(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igBeginListBox(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
extern "C" {
    pub fn igEndListBox();
}
extern "C" {
    pub fn igListBox_Str_arr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igListBox_FnStrPtr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igPlotLines_FloatPtr(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igPlotLines_FnFloatPtr(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    pub fn igPlotHistogram_FloatPtr(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igPlotHistogram_FnFloatPtr(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    pub fn igValue_Bool(prefix: *const ::std::os::raw::c_char, b: bool);
}
extern "C" {
    pub fn igValue_Int(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igValue_Uint(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn igValue_Float(
        prefix: *const ::std::os::raw::c_char,
        v: f32,
        float_format: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igBeginMenuBar() -> bool;
}
extern "C" {
    pub fn igEndMenuBar();
}
extern "C" {
    pub fn igBeginMainMenuBar() -> bool;
}
extern "C" {
    pub fn igEndMainMenuBar();
}
extern "C" {
    pub fn igBeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
extern "C" {
    pub fn igEndMenu();
}
extern "C" {
    pub fn igMenuItem_Bool(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igMenuItem_BoolPtr(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igBeginTooltip() -> bool;
}
extern "C" {
    pub fn igEndTooltip();
}
extern "C" {
    pub fn igSetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igSetTooltipV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn igBeginItemTooltip() -> bool;
}
extern "C" {
    pub fn igSetItemTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igSetItemTooltipV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn igBeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igBeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEndPopup();
}
extern "C" {
    pub fn igOpenPopup_Str(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn igOpenPopup_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn igOpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
extern "C" {
    pub fn igCloseCurrentPopup();
}
extern "C" {
    pub fn igBeginPopupContextItem(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginPopupContextWindow(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginPopupContextVoid(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    pub fn igIsPopupOpen_Str(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags)
        -> bool;
}
extern "C" {
    pub fn igBeginTable(
        str_id: *const ::std::os::raw::c_char,
        column: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    pub fn igEndTable();
}
extern "C" {
    pub fn igTableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: f32);
}
extern "C" {
    pub fn igTableNextColumn() -> bool;
}
extern "C" {
    pub fn igTableSetColumnIndex(column_n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn igTableSetupColumn(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTableColumnFlags,
        init_width_or_weight: f32,
        user_id: ImGuiID,
    );
}
extern "C" {
    pub fn igTableSetupScrollFreeze(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableHeader(label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igTableHeadersRow();
}
extern "C" {
    pub fn igTableAngledHeadersRow();
}
extern "C" {
    pub fn igTableGetSortSpecs() -> *mut ImGuiTableSortSpecs;
}
extern "C" {
    pub fn igTableGetColumnCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTableGetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTableGetRowIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTableGetColumnName_Int(
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igTableGetColumnFlags(column_n: ::std::os::raw::c_int) -> ImGuiTableColumnFlags;
}
extern "C" {
    pub fn igTableSetColumnEnabled(column_n: ::std::os::raw::c_int, v: bool);
}
extern "C" {
    pub fn igTableSetBgColor(
        target: ImGuiTableBgTarget,
        color: ImU32,
        column_n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igColumns(count: ::std::os::raw::c_int, id: *const ::std::os::raw::c_char, border: bool);
}
extern "C" {
    pub fn igNextColumn();
}
extern "C" {
    pub fn igGetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igGetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn igSetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
extern "C" {
    pub fn igGetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn igSetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
extern "C" {
    pub fn igGetColumnsCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igBeginTabBar(str_id: *const ::std::os::raw::c_char, flags: ImGuiTabBarFlags) -> bool;
}
extern "C" {
    pub fn igEndTabBar();
}
extern "C" {
    pub fn igBeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEndTabItem();
}
extern "C" {
    pub fn igTabItemButton(label: *const ::std::os::raw::c_char, flags: ImGuiTabItemFlags) -> bool;
}
extern "C" {
    pub fn igSetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDockSpace(
        dockspace_id: ImGuiID,
        size: ImVec2,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igDockSpaceOverViewport(
        dockspace_id: ImGuiID,
        viewport: *const ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igSetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetNextWindowClass(window_class: *const ImGuiWindowClass);
}
extern "C" {
    pub fn igGetWindowDockID() -> ImGuiID;
}
extern "C" {
    pub fn igIsWindowDocked() -> bool;
}
extern "C" {
    pub fn igLogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igLogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igLogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igLogFinish();
}
extern "C" {
    pub fn igLogButtons();
}
extern "C" {
    pub fn igLogTextV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn igBeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
extern "C" {
    pub fn igSetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: usize,
        cond: ImGuiCond,
    ) -> bool;
}
extern "C" {
    pub fn igEndDragDropSource();
}
extern "C" {
    pub fn igBeginDragDropTarget() -> bool;
}
extern "C" {
    pub fn igAcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
extern "C" {
    pub fn igEndDragDropTarget();
}
extern "C" {
    pub fn igGetDragDropPayload() -> *const ImGuiPayload;
}
extern "C" {
    pub fn igBeginDisabled(disabled: bool);
}
extern "C" {
    pub fn igEndDisabled();
}
extern "C" {
    pub fn igPushClipRect(
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    pub fn igPopClipRect();
}
extern "C" {
    pub fn igSetItemDefaultFocus();
}
extern "C" {
    pub fn igSetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igSetNextItemAllowOverlap();
}
extern "C" {
    pub fn igIsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    pub fn igIsItemActive() -> bool;
}
extern "C" {
    pub fn igIsItemFocused() -> bool;
}
extern "C" {
    pub fn igIsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsItemVisible() -> bool;
}
extern "C" {
    pub fn igIsItemEdited() -> bool;
}
extern "C" {
    pub fn igIsItemActivated() -> bool;
}
extern "C" {
    pub fn igIsItemDeactivated() -> bool;
}
extern "C" {
    pub fn igIsItemDeactivatedAfterEdit() -> bool;
}
extern "C" {
    pub fn igIsItemToggledOpen() -> bool;
}
extern "C" {
    pub fn igIsAnyItemHovered() -> bool;
}
extern "C" {
    pub fn igIsAnyItemActive() -> bool;
}
extern "C" {
    pub fn igIsAnyItemFocused() -> bool;
}
extern "C" {
    pub fn igGetItemID() -> ImGuiID;
}
extern "C" {
    pub fn igGetItemRectMin(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetItemRectMax(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetItemRectSize(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetMainViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn igGetBackgroundDrawList_Nil() -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetForegroundDrawList_Nil() -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetBackgroundDrawList_ViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetForegroundDrawList_ViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    pub fn igIsRectVisible_Nil(size: ImVec2) -> bool;
}
extern "C" {
    pub fn igIsRectVisible_Vec2(rect_min: ImVec2, rect_max: ImVec2) -> bool;
}
extern "C" {
    pub fn igGetTime() -> f64;
}
extern "C" {
    pub fn igGetFrameCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igGetDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    pub fn igGetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igSetStateStorage(storage: *mut ImGuiStorage);
}
extern "C" {
    pub fn igGetStateStorage() -> *mut ImGuiStorage;
}
extern "C" {
    pub fn igCalcTextSize(
        pOut: *mut ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    );
}
extern "C" {
    pub fn igColorConvertU32ToFloat4(pOut: *mut ImVec4, in_: ImU32);
}
extern "C" {
    pub fn igColorConvertFloat4ToU32(in_: ImVec4) -> ImU32;
}
extern "C" {
    pub fn igColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
extern "C" {
    pub fn igColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
extern "C" {
    pub fn igIsKeyDown_Nil(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsKeyPressed_Bool(key: ImGuiKey, repeat: bool) -> bool;
}
extern "C" {
    pub fn igIsKeyReleased_Nil(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsKeyChordPressed_Nil(key_chord: ImGuiKeyChord) -> bool;
}
extern "C" {
    pub fn igGetKeyPressedAmount(
        key: ImGuiKey,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igGetKeyName(key: ImGuiKey) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igSetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool);
}
extern "C" {
    pub fn igShortcut_Nil(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags) -> bool;
}
extern "C" {
    pub fn igSetNextItemShortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags);
}
extern "C" {
    pub fn igIsMouseDown_Nil(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsMouseClicked_Bool(button: ImGuiMouseButton, repeat: bool) -> bool;
}
extern "C" {
    pub fn igIsMouseReleased_Nil(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsMouseDoubleClicked_Nil(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igGetMouseClickedCount(button: ImGuiMouseButton) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igIsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2, clip: bool) -> bool;
}
extern "C" {
    pub fn igIsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
extern "C" {
    pub fn igIsAnyMouseDown() -> bool;
}
extern "C" {
    pub fn igGetMousePos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetMousePosOnOpeningCurrentPopup(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igIsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    pub fn igGetMouseDragDelta(pOut: *mut ImVec2, button: ImGuiMouseButton, lock_threshold: f32);
}
extern "C" {
    pub fn igResetMouseDragDelta(button: ImGuiMouseButton);
}
extern "C" {
    pub fn igGetMouseCursor() -> ImGuiMouseCursor;
}
extern "C" {
    pub fn igSetMouseCursor(cursor_type: ImGuiMouseCursor);
}
extern "C" {
    pub fn igSetNextFrameWantCaptureMouse(want_capture_mouse: bool);
}
extern "C" {
    pub fn igGetClipboardText() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igSetClipboardText(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igLoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igLoadIniSettingsFromMemory(ini_data: *const ::std::os::raw::c_char, ini_size: usize);
}
extern "C" {
    pub fn igSaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igSaveIniSettingsToMemory(out_ini_size: *mut usize) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igDebugTextEncoding(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugFlashStyleColor(idx: ImGuiCol);
}
extern "C" {
    pub fn igDebugStartItemPicker();
}
extern "C" {
    pub fn igDebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: usize,
        sz_style: usize,
        sz_vec2: usize,
        sz_vec4: usize,
        sz_drawvert: usize,
        sz_drawidx: usize,
    ) -> bool;
}
extern "C" {
    pub fn igSetAllocatorFunctions(
        alloc_func: ImGuiMemAllocFunc,
        free_func: ImGuiMemFreeFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igGetAllocatorFunctions(
        p_alloc_func: *mut ImGuiMemAllocFunc,
        p_free_func: *mut ImGuiMemFreeFunc,
        p_user_data: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igMemAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn igMemFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn igGetPlatformIO() -> *mut ImGuiPlatformIO;
}
extern "C" {
    pub fn igUpdatePlatformWindows();
}
extern "C" {
    pub fn igRenderPlatformWindowsDefault(
        platform_render_arg: *mut ::std::os::raw::c_void,
        renderer_render_arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igDestroyPlatformWindows();
}
extern "C" {
    pub fn igFindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
extern "C" {
    pub fn igFindViewportByPlatformHandle(
        platform_handle: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiViewport;
}
extern "C" {
    pub fn ImGuiTableSortSpecs_ImGuiTableSortSpecs() -> *mut ImGuiTableSortSpecs;
}
extern "C" {
    pub fn ImGuiTableSortSpecs_destroy(self_: *mut ImGuiTableSortSpecs);
}
extern "C" {
    pub fn ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs() -> *mut ImGuiTableColumnSortSpecs;
}
extern "C" {
    pub fn ImGuiTableColumnSortSpecs_destroy(self_: *mut ImGuiTableColumnSortSpecs);
}
extern "C" {
    pub fn ImGuiStyle_ImGuiStyle() -> *mut ImGuiStyle;
}
extern "C" {
    pub fn ImGuiStyle_destroy(self_: *mut ImGuiStyle);
}
extern "C" {
    pub fn ImGuiStyle_ScaleAllSizes(self_: *mut ImGuiStyle, scale_factor: f32);
}
extern "C" {
    pub fn ImGuiIO_AddKeyEvent(self_: *mut ImGuiIO, key: ImGuiKey, down: bool);
}
extern "C" {
    pub fn ImGuiIO_AddKeyAnalogEvent(self_: *mut ImGuiIO, key: ImGuiKey, down: bool, v: f32);
}
extern "C" {
    pub fn ImGuiIO_AddMousePosEvent(self_: *mut ImGuiIO, x: f32, y: f32);
}
extern "C" {
    pub fn ImGuiIO_AddMouseButtonEvent(
        self_: *mut ImGuiIO,
        button: ::std::os::raw::c_int,
        down: bool,
    );
}
extern "C" {
    pub fn ImGuiIO_AddMouseWheelEvent(self_: *mut ImGuiIO, wheel_x: f32, wheel_y: f32);
}
extern "C" {
    pub fn ImGuiIO_AddMouseSourceEvent(self_: *mut ImGuiIO, source: ImGuiMouseSource);
}
extern "C" {
    pub fn ImGuiIO_AddMouseViewportEvent(self_: *mut ImGuiIO, id: ImGuiID);
}
extern "C" {
    pub fn ImGuiIO_AddFocusEvent(self_: *mut ImGuiIO, focused: bool);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharacter(self_: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharacterUTF16(self_: *mut ImGuiIO, c: ImWchar16);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharactersUTF8(self_: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGuiIO_SetKeyEventNativeData(
        self_: *mut ImGuiIO,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiIO_SetAppAcceptingEvents(self_: *mut ImGuiIO, accepting_events: bool);
}
extern "C" {
    pub fn ImGuiIO_ClearEventsQueue(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiIO_ClearInputKeys(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiIO_ImGuiIO() -> *mut ImGuiIO;
}
extern "C" {
    pub fn ImGuiIO_destroy(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData() -> *mut ImGuiInputTextCallbackData;
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_destroy(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_InsertChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_SelectAll(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_ClearSelection(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_HasSelection(self_: *mut ImGuiInputTextCallbackData) -> bool;
}
extern "C" {
    pub fn ImGuiWindowClass_ImGuiWindowClass() -> *mut ImGuiWindowClass;
}
extern "C" {
    pub fn ImGuiWindowClass_destroy(self_: *mut ImGuiWindowClass);
}
extern "C" {
    pub fn ImGuiPayload_ImGuiPayload() -> *mut ImGuiPayload;
}
extern "C" {
    pub fn ImGuiPayload_destroy(self_: *mut ImGuiPayload);
}
extern "C" {
    pub fn ImGuiPayload_Clear(self_: *mut ImGuiPayload);
}
extern "C" {
    pub fn ImGuiPayload_IsDataType(
        self_: *mut ImGuiPayload,
        type_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiPayload_IsPreview(self_: *mut ImGuiPayload) -> bool;
}
extern "C" {
    pub fn ImGuiPayload_IsDelivery(self_: *mut ImGuiPayload) -> bool;
}
extern "C" {
    pub fn ImGuiOnceUponAFrame_ImGuiOnceUponAFrame() -> *mut ImGuiOnceUponAFrame;
}
extern "C" {
    pub fn ImGuiOnceUponAFrame_destroy(self_: *mut ImGuiOnceUponAFrame);
}
extern "C" {
    pub fn ImGuiTextFilter_ImGuiTextFilter(
        default_filter: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiTextFilter;
}
extern "C" {
    pub fn ImGuiTextFilter_destroy(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_Draw(
        self_: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiTextFilter_PassFilter(
        self_: *mut ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiTextFilter_Build(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_Clear(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_IsActive(self_: *mut ImGuiTextFilter) -> bool;
}
extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRange_Nil() -> *mut ImGuiTextRange;
}
extern "C" {
    pub fn ImGuiTextRange_destroy(self_: *mut ImGuiTextRange);
}
extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRange_Str(
        _b: *const ::std::os::raw::c_char,
        _e: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiTextRange;
}
extern "C" {
    pub fn ImGuiTextRange_empty(self_: *mut ImGuiTextRange) -> bool;
}
extern "C" {
    pub fn ImGuiTextRange_split(
        self_: *mut ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector_ImGuiTextRange,
    );
}
extern "C" {
    pub fn ImGuiTextBuffer_ImGuiTextBuffer() -> *mut ImGuiTextBuffer;
}
extern "C" {
    pub fn ImGuiTextBuffer_destroy(self_: *mut ImGuiTextBuffer);
}
extern "C" {
    pub fn ImGuiTextBuffer_begin(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_end(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_size(self_: *mut ImGuiTextBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiTextBuffer_empty(self_: *mut ImGuiTextBuffer) -> bool;
}
extern "C" {
    pub fn ImGuiTextBuffer_clear(self_: *mut ImGuiTextBuffer);
}
extern "C" {
    pub fn ImGuiTextBuffer_reserve(self_: *mut ImGuiTextBuffer, capacity: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiTextBuffer_c_str(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_append(
        self_: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGuiTextBuffer_appendfv(
        self_: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePair_Int(
        _key: ImGuiID,
        _val: ::std::os::raw::c_int,
    ) -> *mut ImGuiStoragePair;
}
extern "C" {
    pub fn ImGuiStoragePair_destroy(self_: *mut ImGuiStoragePair);
}
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePair_Float(
        _key: ImGuiID,
        _val: f32,
    ) -> *mut ImGuiStoragePair;
}
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePair_Ptr(
        _key: ImGuiID,
        _val: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiStoragePair;
}
extern "C" {
    pub fn ImGuiStorage_Clear(self_: *mut ImGuiStorage);
}
extern "C" {
    pub fn ImGuiStorage_GetInt(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiStorage_SetInt(self_: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiStorage_GetBool(self_: *mut ImGuiStorage, key: ImGuiID, default_val: bool) -> bool;
}
extern "C" {
    pub fn ImGuiStorage_SetBool(self_: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
extern "C" {
    pub fn ImGuiStorage_GetFloat(self_: *mut ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
extern "C" {
    pub fn ImGuiStorage_SetFloat(self_: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
extern "C" {
    pub fn ImGuiStorage_GetVoidPtr(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ImGuiStorage_SetVoidPtr(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImGuiStorage_GetIntRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiStorage_GetBoolRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
extern "C" {
    pub fn ImGuiStorage_GetFloatRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
extern "C" {
    pub fn ImGuiStorage_GetVoidPtrRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ImGuiStorage_BuildSortByKey(self_: *mut ImGuiStorage);
}
extern "C" {
    pub fn ImGuiStorage_SetAllInt(self_: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiListClipper_ImGuiListClipper() -> *mut ImGuiListClipper;
}
extern "C" {
    pub fn ImGuiListClipper_destroy(self_: *mut ImGuiListClipper);
}
extern "C" {
    pub fn ImGuiListClipper_Begin(
        self_: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
extern "C" {
    pub fn ImGuiListClipper_End(self_: *mut ImGuiListClipper);
}
extern "C" {
    pub fn ImGuiListClipper_Step(self_: *mut ImGuiListClipper) -> bool;
}
extern "C" {
    pub fn ImGuiListClipper_IncludeItemByIndex(
        self_: *mut ImGuiListClipper,
        item_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiListClipper_IncludeItemsByIndex(
        self_: *mut ImGuiListClipper,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImColor_ImColor_Nil() -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_destroy(self_: *mut ImColor);
}
extern "C" {
    pub fn ImColor_ImColor_Float(r: f32, g: f32, b: f32, a: f32) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_ImColor_Vec4(col: ImVec4) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_ImColor_Int(
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
    ) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_ImColor_U32(rgba: ImU32) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_SetHSV(self_: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
extern "C" {
    pub fn ImColor_HSV(pOut: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
extern "C" {
    pub fn ImDrawCmd_ImDrawCmd() -> *mut ImDrawCmd;
}
extern "C" {
    pub fn ImDrawCmd_destroy(self_: *mut ImDrawCmd);
}
extern "C" {
    pub fn ImDrawCmd_GetTexID(self_: *mut ImDrawCmd) -> ImTextureID;
}
extern "C" {
    pub fn ImDrawListSplitter_ImDrawListSplitter() -> *mut ImDrawListSplitter;
}
extern "C" {
    pub fn ImDrawListSplitter_destroy(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_Clear(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_ClearFreeMemory(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_Split(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawListSplitter_Merge(self_: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawListSplitter_SetCurrentChannel(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_ImDrawList(shared_data: *mut ImDrawListSharedData) -> *mut ImDrawList;
}
extern "C" {
    pub fn ImDrawList_destroy(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PushClipRect(
        self_: *mut ImDrawList,
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    pub fn ImDrawList_PushClipRectFullScreen(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PopClipRect(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PushTextureID(self_: *mut ImDrawList, texture_id: ImTextureID);
}
extern "C" {
    pub fn ImDrawList_PopTextureID(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_GetClipRectMin(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_GetClipRectMax(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_AddLine(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddRect(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddRectFilled(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_AddRectFilledMultiColor(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddQuad(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddQuadFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddTriangle(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddTriangleFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddCircle(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddCircleFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddNgon(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddNgonFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddEllipse(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddEllipseFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddText_Vec2(
        self_: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImDrawList_AddText_FontPtr(
        self_: *mut ImDrawList,
        font: *const ImFont,
        font_size: f32,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
extern "C" {
    pub fn ImDrawList_AddBezierCubic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddBezierQuadratic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddPolyline(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddConvexPolyFilled(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddConcavePolyFilled(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddImage(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageQuad(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        uv1: ImVec2,
        uv2: ImVec2,
        uv3: ImVec2,
        uv4: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageRounded(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_PathClear(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PathLineTo(self_: *mut ImDrawList, pos: ImVec2);
}
extern "C" {
    pub fn ImDrawList_PathLineToMergeDuplicate(self_: *mut ImDrawList, pos: ImVec2);
}
extern "C" {
    pub fn ImDrawList_PathFillConvex(self_: *mut ImDrawList, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PathFillConcave(self_: *mut ImDrawList, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PathStroke(
        self_: *mut ImDrawList,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_PathArcTo(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathArcToFast(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathEllipticalArcTo(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: ImVec2,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathBezierCubicCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathBezierQuadraticCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathRect(
        self_: *mut ImDrawList,
        rect_min: ImVec2,
        rect_max: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_AddCallback(
        self_: *mut ImDrawList,
        callback: ImDrawCallback,
        callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImDrawList_AddDrawCmd(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_CloneOutput(self_: *mut ImDrawList) -> *mut ImDrawList;
}
extern "C" {
    pub fn ImDrawList_ChannelsSplit(self_: *mut ImDrawList, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImDrawList_ChannelsMerge(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_ChannelsSetCurrent(self_: *mut ImDrawList, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImDrawList_PrimReserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PrimUnreserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PrimRect(self_: *mut ImDrawList, a: ImVec2, b: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PrimRectUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_PrimQuadUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        d: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        uv_c: ImVec2,
        uv_d: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_PrimWriteVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PrimWriteIdx(self_: *mut ImDrawList, idx: ImDrawIdx);
}
extern "C" {
    pub fn ImDrawList_PrimVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList__ResetForNewFrame(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__ClearFreeMemory(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__PopUnusedDrawCmd(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__TryMergeDrawCmds(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedClipRect(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedTextureID(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedVtxOffset(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__CalcCircleAutoSegmentCount(
        self_: *mut ImDrawList,
        radius: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImDrawList__PathArcToFastEx(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList__PathArcToN(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawData_ImDrawData() -> *mut ImDrawData;
}
extern "C" {
    pub fn ImDrawData_destroy(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_Clear(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_AddDrawList(self_: *mut ImDrawData, draw_list: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawData_DeIndexAllBuffers(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_ScaleClipRects(self_: *mut ImDrawData, fb_scale: ImVec2);
}
extern "C" {
    pub fn ImFontConfig_ImFontConfig() -> *mut ImFontConfig;
}
extern "C" {
    pub fn ImFontConfig_destroy(self_: *mut ImFontConfig);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder() -> *mut ImFontGlyphRangesBuilder;
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_destroy(self_: *mut ImFontGlyphRangesBuilder);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_Clear(self_: *mut ImFontGlyphRangesBuilder);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_GetBit(self_: *mut ImFontGlyphRangesBuilder, n: usize) -> bool;
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_SetBit(self_: *mut ImFontGlyphRangesBuilder, n: usize);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddChar(self_: *mut ImFontGlyphRangesBuilder, c: ImWchar);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddText(
        self_: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector_ImWchar,
    );
}
extern "C" {
    pub fn ImFontAtlasCustomRect_ImFontAtlasCustomRect() -> *mut ImFontAtlasCustomRect;
}
extern "C" {
    pub fn ImFontAtlasCustomRect_destroy(self_: *mut ImFontAtlasCustomRect);
}
extern "C" {
    pub fn ImFontAtlasCustomRect_IsPacked(self_: *mut ImFontAtlasCustomRect) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_ImFontAtlas() -> *mut ImFontAtlas;
}
extern "C" {
    pub fn ImFontAtlas_destroy(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_AddFont(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontDefault(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromFileTTF(
        self_: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        self_: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        self_: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        self_: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_ClearInputData(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_ClearTexData(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_ClearFonts(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_Clear(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_Build(self_: *mut ImFontAtlas) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImFontAtlas_IsBuilt(self_: *mut ImFontAtlas) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_SetTexID(self_: *mut ImFontAtlas, id: ImTextureID);
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesDefault(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesGreek(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesKorean(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesJapanese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
        self_: *mut ImFontAtlas,
    ) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesThai(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_AddCustomRectRegular(
        self_: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        self_: *mut ImFontAtlas,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImFontAtlas_GetCustomRectByIndex(
        self_: *mut ImFontAtlas,
        index: ::std::os::raw::c_int,
    ) -> *mut ImFontAtlasCustomRect;
}
extern "C" {
    pub fn ImFontAtlas_CalcCustomRectUV(
        self_: *mut ImFontAtlas,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    );
}
extern "C" {
    pub fn ImFontAtlas_GetMouseCursorTexData(
        self_: *mut ImFontAtlas,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn ImFont_ImFont() -> *mut ImFont;
}
extern "C" {
    pub fn ImFont_destroy(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_FindGlyph(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    pub fn ImFont_FindGlyphNoFallback(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    pub fn ImFont_GetCharAdvance(self_: *mut ImFont, c: ImWchar) -> f32;
}
extern "C" {
    pub fn ImFont_IsLoaded(self_: *mut ImFont) -> bool;
}
extern "C" {
    pub fn ImFont_GetDebugName(self_: *mut ImFont) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImFont_CalcTextSizeA(
        pOut: *mut ImVec2,
        self_: *mut ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImFont_CalcWordWrapPositionA(
        self_: *mut ImFont,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImFont_RenderChar(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        c: ImWchar,
    );
}
extern "C" {
    pub fn ImFont_RenderText(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        clip_rect: ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
extern "C" {
    pub fn ImFont_BuildLookupTable(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_ClearOutputData(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_GrowIndex(self_: *mut ImFont, new_size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImFont_AddGlyph(
        self_: *mut ImFont,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    );
}
extern "C" {
    pub fn ImFont_AddRemapChar(self_: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}
extern "C" {
    pub fn ImFont_SetGlyphVisible(self_: *mut ImFont, c: ImWchar, visible: bool);
}
extern "C" {
    pub fn ImFont_IsGlyphRangeUnused(
        self_: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiViewport_ImGuiViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn ImGuiViewport_destroy(self_: *mut ImGuiViewport);
}
extern "C" {
    pub fn ImGuiViewport_GetCenter(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
extern "C" {
    pub fn ImGuiViewport_GetWorkCenter(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
extern "C" {
    pub fn ImGuiPlatformIO_ImGuiPlatformIO() -> *mut ImGuiPlatformIO;
}
extern "C" {
    pub fn ImGuiPlatformIO_destroy(self_: *mut ImGuiPlatformIO);
}
extern "C" {
    pub fn ImGuiPlatformMonitor_ImGuiPlatformMonitor() -> *mut ImGuiPlatformMonitor;
}
extern "C" {
    pub fn ImGuiPlatformMonitor_destroy(self_: *mut ImGuiPlatformMonitor);
}
extern "C" {
    pub fn ImGuiPlatformImeData_ImGuiPlatformImeData() -> *mut ImGuiPlatformImeData;
}
extern "C" {
    pub fn ImGuiPlatformImeData_destroy(self_: *mut ImGuiPlatformImeData);
}
extern "C" {
    pub fn igImHashData(
        data: *const ::std::os::raw::c_void,
        data_size: usize,
        seed: ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igImHashStr(
        data: *const ::std::os::raw::c_char,
        data_size: usize,
        seed: ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igImQsort(
        base: *mut ::std::os::raw::c_void,
        count: usize,
        size_of_element: usize,
        compare_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn igImAlphaBlendColors(col_a: ImU32, col_b: ImU32) -> ImU32;
}
extern "C" {
    pub fn igImIsPowerOfTwo_Int(v: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn igImIsPowerOfTwo_U64(v: ImU64) -> bool;
}
extern "C" {
    pub fn igImUpperPowerOfTwo(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImStricmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImStrnicmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImStrncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        count: usize,
    );
}
extern "C" {
    pub fn igImStrdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStrdupcpy(
        dst: *mut ::std::os::raw::c_char,
        p_dst_size: *mut usize,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStrchrRange(
        str_begin: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStreolRange(
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStristr(
        haystack: *const ::std::os::raw::c_char,
        haystack_end: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStrTrimBlanks(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn igImStrSkipBlank(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStrlenW(str_: *const ImWchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImStrbolW(buf_mid_line: *const ImWchar, buf_begin: *const ImWchar) -> *const ImWchar;
}
extern "C" {
    pub fn igImToUpper(c: ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImCharIsBlankA(c: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn igImCharIsBlankW(c: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn igImFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImFormatStringV(
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImFormatStringToTempBuffer(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn igImFormatStringToTempBufferV(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn igImParseFormatFindStart(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImParseFormatFindEnd(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImParseFormatTrimDecorations(
        format: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImParseFormatSanitizeForPrinting(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: usize,
    );
}
extern "C" {
    pub fn igImParseFormatSanitizeForScanning(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImParseFormatPrecision(
        format: *const ::std::os::raw::c_char,
        default_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCharToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        c: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImTextStrToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCharFromUtf8(
        out_char: *mut ::std::os::raw::c_uint,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextStrFromUtf8(
        out_buf: *mut ImWchar,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
        in_remaining: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCountCharsFromUtf8(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCountUtf8BytesFromChar(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCountUtf8BytesFromStr(
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextFindPreviousUtf8Codepoint(
        in_text_start: *const ::std::os::raw::c_char,
        in_text_curr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImTextCountLines(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImFileOpen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ImFileHandle;
}
extern "C" {
    pub fn igImFileClose(file: ImFileHandle) -> bool;
}
extern "C" {
    pub fn igImFileGetSize(file: ImFileHandle) -> ImU64;
}
extern "C" {
    pub fn igImFileRead(
        data: *mut ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
extern "C" {
    pub fn igImFileWrite(
        data: *const ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
extern "C" {
    pub fn igImFileLoadToMemory(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        out_file_size: *mut usize,
        padding_bytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn igImPow_Float(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn igImPow_double(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn igImLog_Float(x: f32) -> f32;
}
extern "C" {
    pub fn igImLog_double(x: f64) -> f64;
}
extern "C" {
    pub fn igImAbs_Int(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImAbs_Float(x: f32) -> f32;
}
extern "C" {
    pub fn igImAbs_double(x: f64) -> f64;
}
extern "C" {
    pub fn igImSign_Float(x: f32) -> f32;
}
extern "C" {
    pub fn igImSign_double(x: f64) -> f64;
}
extern "C" {
    pub fn igImRsqrt_Float(x: f32) -> f32;
}
extern "C" {
    pub fn igImRsqrt_double(x: f64) -> f64;
}
extern "C" {
    pub fn igImMin(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
extern "C" {
    pub fn igImMax(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
extern "C" {
    pub fn igImClamp(pOut: *mut ImVec2, v: ImVec2, mn: ImVec2, mx: ImVec2);
}
extern "C" {
    pub fn igImLerp_Vec2Float(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: f32);
}
extern "C" {
    pub fn igImLerp_Vec2Vec2(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: ImVec2);
}
extern "C" {
    pub fn igImLerp_Vec4(pOut: *mut ImVec4, a: ImVec4, b: ImVec4, t: f32);
}
extern "C" {
    pub fn igImSaturate(f: f32) -> f32;
}
extern "C" {
    pub fn igImLengthSqr_Vec2(lhs: ImVec2) -> f32;
}
extern "C" {
    pub fn igImLengthSqr_Vec4(lhs: ImVec4) -> f32;
}
extern "C" {
    pub fn igImInvLength(lhs: ImVec2, fail_value: f32) -> f32;
}
extern "C" {
    pub fn igImTrunc_Float(f: f32) -> f32;
}
extern "C" {
    pub fn igImTrunc_Vec2(pOut: *mut ImVec2, v: ImVec2);
}
extern "C" {
    pub fn igImFloor_Float(f: f32) -> f32;
}
extern "C" {
    pub fn igImFloor_Vec2(pOut: *mut ImVec2, v: ImVec2);
}
extern "C" {
    pub fn igImModPositive(
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImDot(a: ImVec2, b: ImVec2) -> f32;
}
extern "C" {
    pub fn igImRotate(pOut: *mut ImVec2, v: ImVec2, cos_a: f32, sin_a: f32);
}
extern "C" {
    pub fn igImLinearSweep(current: f32, target: f32, speed: f32) -> f32;
}
extern "C" {
    pub fn igImMul(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
extern "C" {
    pub fn igImIsFloatAboveGuaranteedIntegerPrecision(f: f32) -> bool;
}
extern "C" {
    pub fn igImExponentialMovingAverage(avg: f32, sample: f32, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn igImBezierCubicCalc(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        t: f32,
    );
}
extern "C" {
    pub fn igImBezierCubicClosestPoint(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igImBezierCubicClosestPointCasteljau(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        tess_tol: f32,
    );
}
extern "C" {
    pub fn igImBezierQuadraticCalc(pOut: *mut ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, t: f32);
}
extern "C" {
    pub fn igImLineClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, p: ImVec2);
}
extern "C" {
    pub fn igImTriangleContainsPoint(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2) -> bool;
}
extern "C" {
    pub fn igImTriangleClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2);
}
extern "C" {
    pub fn igImTriangleBarycentricCoords(
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        p: ImVec2,
        out_u: *mut f32,
        out_v: *mut f32,
        out_w: *mut f32,
    );
}
extern "C" {
    pub fn igImTriangleArea(a: ImVec2, b: ImVec2, c: ImVec2) -> f32;
}
extern "C" {
    pub fn igImTriangleIsClockwise(a: ImVec2, b: ImVec2, c: ImVec2) -> bool;
}
extern "C" {
    pub fn ImVec1_ImVec1_Nil() -> *mut ImVec1;
}
extern "C" {
    pub fn ImVec1_destroy(self_: *mut ImVec1);
}
extern "C" {
    pub fn ImVec1_ImVec1_Float(_x: f32) -> *mut ImVec1;
}
extern "C" {
    pub fn ImVec2ih_ImVec2ih_Nil() -> *mut ImVec2ih;
}
extern "C" {
    pub fn ImVec2ih_destroy(self_: *mut ImVec2ih);
}
extern "C" {
    pub fn ImVec2ih_ImVec2ih_short(
        _x: ::std::os::raw::c_short,
        _y: ::std::os::raw::c_short,
    ) -> *mut ImVec2ih;
}
extern "C" {
    pub fn ImVec2ih_ImVec2ih_Vec2(rhs: ImVec2) -> *mut ImVec2ih;
}
extern "C" {
    pub fn ImRect_ImRect_Nil() -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_destroy(self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_ImRect_Vec2(min: ImVec2, max: ImVec2) -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_ImRect_Vec4(v: ImVec4) -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_ImRect_Float(x1: f32, y1: f32, x2: f32, y2: f32) -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_GetCenter(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetSize(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetWidth(self_: *mut ImRect) -> f32;
}
extern "C" {
    pub fn ImRect_GetHeight(self_: *mut ImRect) -> f32;
}
extern "C" {
    pub fn ImRect_GetArea(self_: *mut ImRect) -> f32;
}
extern "C" {
    pub fn ImRect_GetTL(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetTR(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetBL(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetBR(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_Contains_Vec2(self_: *mut ImRect, p: ImVec2) -> bool;
}
extern "C" {
    pub fn ImRect_Contains_Rect(self_: *mut ImRect, r: ImRect) -> bool;
}
extern "C" {
    pub fn ImRect_ContainsWithPad(self_: *mut ImRect, p: ImVec2, pad: ImVec2) -> bool;
}
extern "C" {
    pub fn ImRect_Overlaps(self_: *mut ImRect, r: ImRect) -> bool;
}
extern "C" {
    pub fn ImRect_Add_Vec2(self_: *mut ImRect, p: ImVec2);
}
extern "C" {
    pub fn ImRect_Add_Rect(self_: *mut ImRect, r: ImRect);
}
extern "C" {
    pub fn ImRect_Expand_Float(self_: *mut ImRect, amount: f32);
}
extern "C" {
    pub fn ImRect_Expand_Vec2(self_: *mut ImRect, amount: ImVec2);
}
extern "C" {
    pub fn ImRect_Translate(self_: *mut ImRect, d: ImVec2);
}
extern "C" {
    pub fn ImRect_TranslateX(self_: *mut ImRect, dx: f32);
}
extern "C" {
    pub fn ImRect_TranslateY(self_: *mut ImRect, dy: f32);
}
extern "C" {
    pub fn ImRect_ClipWith(self_: *mut ImRect, r: ImRect);
}
extern "C" {
    pub fn ImRect_ClipWithFull(self_: *mut ImRect, r: ImRect);
}
extern "C" {
    pub fn ImRect_Floor(self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_IsInverted(self_: *mut ImRect) -> bool;
}
extern "C" {
    pub fn ImRect_ToVec4(pOut: *mut ImVec4, self_: *mut ImRect);
}
extern "C" {
    pub fn igImBitArrayGetStorageSizeInBytes(bitcount: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn igImBitArrayClearAllBits(arr: *mut ImU32, bitcount: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igImBitArrayTestBit(arr: *const ImU32, n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn igImBitArrayClearBit(arr: *mut ImU32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igImBitArraySetBit(arr: *mut ImU32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igImBitArraySetBitRange(
        arr: *mut ImU32,
        n: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImBitVector_Create(self_: *mut ImBitVector, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImBitVector_Clear(self_: *mut ImBitVector);
}
extern "C" {
    pub fn ImBitVector_TestBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ImBitVector_SetBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImBitVector_ClearBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiTextIndex_clear(self_: *mut ImGuiTextIndex);
}
extern "C" {
    pub fn ImGuiTextIndex_size(self_: *mut ImGuiTextIndex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiTextIndex_get_line_begin(
        self_: *mut ImGuiTextIndex,
        base: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextIndex_get_line_end(
        self_: *mut ImGuiTextIndex,
        base: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextIndex_append(
        self_: *mut ImGuiTextIndex,
        base: *const ::std::os::raw::c_char,
        old_size: ::std::os::raw::c_int,
        new_size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawListSharedData_ImDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    pub fn ImDrawListSharedData_destroy(self_: *mut ImDrawListSharedData);
}
extern "C" {
    pub fn ImDrawListSharedData_SetCircleTessellationMaxError(
        self_: *mut ImDrawListSharedData,
        max_error: f32,
    );
}
extern "C" {
    pub fn ImDrawDataBuilder_ImDrawDataBuilder() -> *mut ImDrawDataBuilder;
}
extern "C" {
    pub fn ImDrawDataBuilder_destroy(self_: *mut ImDrawDataBuilder);
}
extern "C" {
    pub fn ImGuiDataVarInfo_GetVarPtr(
        self_: *mut ImGuiDataVarInfo,
        parent: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleMod_Int(
        idx: ImGuiStyleVar,
        v: ::std::os::raw::c_int,
    ) -> *mut ImGuiStyleMod;
}
extern "C" {
    pub fn ImGuiStyleMod_destroy(self_: *mut ImGuiStyleMod);
}
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleMod_Float(idx: ImGuiStyleVar, v: f32) -> *mut ImGuiStyleMod;
}
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleMod_Vec2(idx: ImGuiStyleVar, v: ImVec2) -> *mut ImGuiStyleMod;
}
extern "C" {
    pub fn ImGuiComboPreviewData_ImGuiComboPreviewData() -> *mut ImGuiComboPreviewData;
}
extern "C" {
    pub fn ImGuiComboPreviewData_destroy(self_: *mut ImGuiComboPreviewData);
}
extern "C" {
    pub fn ImGuiMenuColumns_ImGuiMenuColumns() -> *mut ImGuiMenuColumns;
}
extern "C" {
    pub fn ImGuiMenuColumns_destroy(self_: *mut ImGuiMenuColumns);
}
extern "C" {
    pub fn ImGuiMenuColumns_Update(
        self_: *mut ImGuiMenuColumns,
        spacing: f32,
        window_reappearing: bool,
    );
}
extern "C" {
    pub fn ImGuiMenuColumns_DeclColumns(
        self_: *mut ImGuiMenuColumns,
        w_icon: f32,
        w_label: f32,
        w_shortcut: f32,
        w_mark: f32,
    ) -> f32;
}
extern "C" {
    pub fn ImGuiMenuColumns_CalcNextTotalWidth(self_: *mut ImGuiMenuColumns, update_offsets: bool);
}
extern "C" {
    pub fn ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState(
    ) -> *mut ImGuiInputTextDeactivatedState;
}
extern "C" {
    pub fn ImGuiInputTextDeactivatedState_destroy(self_: *mut ImGuiInputTextDeactivatedState);
}
extern "C" {
    pub fn ImGuiInputTextDeactivatedState_ClearFreeMemory(
        self_: *mut ImGuiInputTextDeactivatedState,
    );
}
extern "C" {
    pub fn ImGuiInputTextState_ImGuiInputTextState() -> *mut ImGuiInputTextState;
}
extern "C" {
    pub fn ImGuiInputTextState_destroy(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_ClearText(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_ClearFreeMemory(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_GetUndoAvailCount(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_GetRedoAvailCount(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_OnKeyPressed(
        self_: *mut ImGuiInputTextState,
        key: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiInputTextState_CursorAnimReset(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_CursorClamp(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_HasSelection(self_: *mut ImGuiInputTextState) -> bool;
}
extern "C" {
    pub fn ImGuiInputTextState_ClearSelection(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_GetCursorPos(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_GetSelectionStart(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_GetSelectionEnd(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_SelectAll(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_ReloadUserBufAndSelectAll(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_ReloadUserBufAndKeepSelection(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_ReloadUserBufAndMoveToEnd(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiNextWindowData_ImGuiNextWindowData() -> *mut ImGuiNextWindowData;
}
extern "C" {
    pub fn ImGuiNextWindowData_destroy(self_: *mut ImGuiNextWindowData);
}
extern "C" {
    pub fn ImGuiNextWindowData_ClearFlags(self_: *mut ImGuiNextWindowData);
}
extern "C" {
    pub fn ImGuiNextItemData_ImGuiNextItemData() -> *mut ImGuiNextItemData;
}
extern "C" {
    pub fn ImGuiNextItemData_destroy(self_: *mut ImGuiNextItemData);
}
extern "C" {
    pub fn ImGuiNextItemData_ClearFlags(self_: *mut ImGuiNextItemData);
}
extern "C" {
    pub fn ImGuiLastItemData_ImGuiLastItemData() -> *mut ImGuiLastItemData;
}
extern "C" {
    pub fn ImGuiLastItemData_destroy(self_: *mut ImGuiLastItemData);
}
extern "C" {
    pub fn ImGuiStackSizes_ImGuiStackSizes() -> *mut ImGuiStackSizes;
}
extern "C" {
    pub fn ImGuiStackSizes_destroy(self_: *mut ImGuiStackSizes);
}
extern "C" {
    pub fn ImGuiStackSizes_SetToContextState(self_: *mut ImGuiStackSizes, ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn ImGuiStackSizes_CompareWithContextState(
        self_: *mut ImGuiStackSizes,
        ctx: *mut ImGuiContext,
    );
}
extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiPtrOrIndex;
}
extern "C" {
    pub fn ImGuiPtrOrIndex_destroy(self_: *mut ImGuiPtrOrIndex);
}
extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(
        index: ::std::os::raw::c_int,
    ) -> *mut ImGuiPtrOrIndex;
}
extern "C" {
    pub fn ImGuiPopupData_ImGuiPopupData() -> *mut ImGuiPopupData;
}
extern "C" {
    pub fn ImGuiPopupData_destroy(self_: *mut ImGuiPopupData);
}
extern "C" {
    pub fn ImGuiInputEvent_ImGuiInputEvent() -> *mut ImGuiInputEvent;
}
extern "C" {
    pub fn ImGuiInputEvent_destroy(self_: *mut ImGuiInputEvent);
}
extern "C" {
    pub fn ImGuiKeyRoutingData_ImGuiKeyRoutingData() -> *mut ImGuiKeyRoutingData;
}
extern "C" {
    pub fn ImGuiKeyRoutingData_destroy(self_: *mut ImGuiKeyRoutingData);
}
extern "C" {
    pub fn ImGuiKeyRoutingTable_ImGuiKeyRoutingTable() -> *mut ImGuiKeyRoutingTable;
}
extern "C" {
    pub fn ImGuiKeyRoutingTable_destroy(self_: *mut ImGuiKeyRoutingTable);
}
extern "C" {
    pub fn ImGuiKeyRoutingTable_Clear(self_: *mut ImGuiKeyRoutingTable);
}
extern "C" {
    pub fn ImGuiKeyOwnerData_ImGuiKeyOwnerData() -> *mut ImGuiKeyOwnerData;
}
extern "C" {
    pub fn ImGuiKeyOwnerData_destroy(self_: *mut ImGuiKeyOwnerData);
}
extern "C" {
    pub fn ImGuiListClipperRange_FromIndices(
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> ImGuiListClipperRange;
}
extern "C" {
    pub fn ImGuiListClipperRange_FromPositions(
        y1: f32,
        y2: f32,
        off_min: ::std::os::raw::c_int,
        off_max: ::std::os::raw::c_int,
    ) -> ImGuiListClipperRange;
}
extern "C" {
    pub fn ImGuiListClipperData_ImGuiListClipperData() -> *mut ImGuiListClipperData;
}
extern "C" {
    pub fn ImGuiListClipperData_destroy(self_: *mut ImGuiListClipperData);
}
extern "C" {
    pub fn ImGuiListClipperData_Reset(
        self_: *mut ImGuiListClipperData,
        clipper: *mut ImGuiListClipper,
    );
}
extern "C" {
    pub fn ImGuiNavItemData_ImGuiNavItemData() -> *mut ImGuiNavItemData;
}
extern "C" {
    pub fn ImGuiNavItemData_destroy(self_: *mut ImGuiNavItemData);
}
extern "C" {
    pub fn ImGuiNavItemData_Clear(self_: *mut ImGuiNavItemData);
}
extern "C" {
    pub fn ImGuiTypingSelectState_ImGuiTypingSelectState() -> *mut ImGuiTypingSelectState;
}
extern "C" {
    pub fn ImGuiTypingSelectState_destroy(self_: *mut ImGuiTypingSelectState);
}
extern "C" {
    pub fn ImGuiTypingSelectState_Clear(self_: *mut ImGuiTypingSelectState);
}
extern "C" {
    pub fn ImGuiOldColumnData_ImGuiOldColumnData() -> *mut ImGuiOldColumnData;
}
extern "C" {
    pub fn ImGuiOldColumnData_destroy(self_: *mut ImGuiOldColumnData);
}
extern "C" {
    pub fn ImGuiOldColumns_ImGuiOldColumns() -> *mut ImGuiOldColumns;
}
extern "C" {
    pub fn ImGuiOldColumns_destroy(self_: *mut ImGuiOldColumns);
}
extern "C" {
    pub fn ImGuiDockNode_ImGuiDockNode(id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn ImGuiDockNode_destroy(self_: *mut ImGuiDockNode);
}
extern "C" {
    pub fn ImGuiDockNode_IsRootNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsDockSpace(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsFloatingNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsCentralNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsHiddenTabBar(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsNoTabBar(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsSplitNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsLeafNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsEmpty(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_Rect(pOut: *mut ImRect, self_: *mut ImGuiDockNode);
}
extern "C" {
    pub fn ImGuiDockNode_SetLocalFlags(self_: *mut ImGuiDockNode, flags: ImGuiDockNodeFlags);
}
extern "C" {
    pub fn ImGuiDockNode_UpdateMergedFlags(self_: *mut ImGuiDockNode);
}
extern "C" {
    pub fn ImGuiDockContext_ImGuiDockContext() -> *mut ImGuiDockContext;
}
extern "C" {
    pub fn ImGuiDockContext_destroy(self_: *mut ImGuiDockContext);
}
extern "C" {
    pub fn ImGuiViewportP_ImGuiViewportP() -> *mut ImGuiViewportP;
}
extern "C" {
    pub fn ImGuiViewportP_destroy(self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_ClearRequestFlags(self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_CalcWorkRectPos(
        pOut: *mut ImVec2,
        self_: *mut ImGuiViewportP,
        off_min: ImVec2,
    );
}
extern "C" {
    pub fn ImGuiViewportP_CalcWorkRectSize(
        pOut: *mut ImVec2,
        self_: *mut ImGuiViewportP,
        off_min: ImVec2,
        off_max: ImVec2,
    );
}
extern "C" {
    pub fn ImGuiViewportP_UpdateWorkRect(self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_GetMainRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_GetWorkRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_GetBuildWorkRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiWindowSettings_ImGuiWindowSettings() -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn ImGuiWindowSettings_destroy(self_: *mut ImGuiWindowSettings);
}
extern "C" {
    pub fn ImGuiWindowSettings_GetName(
        self_: *mut ImGuiWindowSettings,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiSettingsHandler_ImGuiSettingsHandler() -> *mut ImGuiSettingsHandler;
}
extern "C" {
    pub fn ImGuiSettingsHandler_destroy(self_: *mut ImGuiSettingsHandler);
}
extern "C" {
    pub fn ImGuiDebugAllocInfo_ImGuiDebugAllocInfo() -> *mut ImGuiDebugAllocInfo;
}
extern "C" {
    pub fn ImGuiDebugAllocInfo_destroy(self_: *mut ImGuiDebugAllocInfo);
}
extern "C" {
    pub fn ImGuiStackLevelInfo_ImGuiStackLevelInfo() -> *mut ImGuiStackLevelInfo;
}
extern "C" {
    pub fn ImGuiStackLevelInfo_destroy(self_: *mut ImGuiStackLevelInfo);
}
extern "C" {
    pub fn ImGuiIDStackTool_ImGuiIDStackTool() -> *mut ImGuiIDStackTool;
}
extern "C" {
    pub fn ImGuiIDStackTool_destroy(self_: *mut ImGuiIDStackTool);
}
extern "C" {
    pub fn ImGuiContextHook_ImGuiContextHook() -> *mut ImGuiContextHook;
}
extern "C" {
    pub fn ImGuiContextHook_destroy(self_: *mut ImGuiContextHook);
}
extern "C" {
    pub fn ImGuiContext_ImGuiContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    pub fn ImGuiContext_destroy(self_: *mut ImGuiContext);
}
extern "C" {
    pub fn ImGuiWindow_ImGuiWindow(
        context: *mut ImGuiContext,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn ImGuiWindow_destroy(self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiWindow_GetID_Str(
        self_: *mut ImGuiWindow,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetID_Ptr(
        self_: *mut ImGuiWindow,
        ptr: *const ::std::os::raw::c_void,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetID_Int(self_: *mut ImGuiWindow, n: ::std::os::raw::c_int) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetIDFromRectangle(self_: *mut ImGuiWindow, r_abs: ImRect) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_Rect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiWindow_CalcFontSize(self_: *mut ImGuiWindow) -> f32;
}
extern "C" {
    pub fn ImGuiWindow_TitleBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiWindow_MenuBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiTabItem_ImGuiTabItem() -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn ImGuiTabItem_destroy(self_: *mut ImGuiTabItem);
}
extern "C" {
    pub fn ImGuiTabBar_ImGuiTabBar() -> *mut ImGuiTabBar;
}
extern "C" {
    pub fn ImGuiTabBar_destroy(self_: *mut ImGuiTabBar);
}
extern "C" {
    pub fn ImGuiTableColumn_ImGuiTableColumn() -> *mut ImGuiTableColumn;
}
extern "C" {
    pub fn ImGuiTableColumn_destroy(self_: *mut ImGuiTableColumn);
}
extern "C" {
    pub fn ImGuiTableInstanceData_ImGuiTableInstanceData() -> *mut ImGuiTableInstanceData;
}
extern "C" {
    pub fn ImGuiTableInstanceData_destroy(self_: *mut ImGuiTableInstanceData);
}
extern "C" {
    pub fn ImGuiTable_ImGuiTable() -> *mut ImGuiTable;
}
extern "C" {
    pub fn ImGuiTable_destroy(self_: *mut ImGuiTable);
}
extern "C" {
    pub fn ImGuiTableTempData_ImGuiTableTempData() -> *mut ImGuiTableTempData;
}
extern "C" {
    pub fn ImGuiTableTempData_destroy(self_: *mut ImGuiTableTempData);
}
extern "C" {
    pub fn ImGuiTableColumnSettings_ImGuiTableColumnSettings() -> *mut ImGuiTableColumnSettings;
}
extern "C" {
    pub fn ImGuiTableColumnSettings_destroy(self_: *mut ImGuiTableColumnSettings);
}
extern "C" {
    pub fn ImGuiTableSettings_ImGuiTableSettings() -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn ImGuiTableSettings_destroy(self_: *mut ImGuiTableSettings);
}
extern "C" {
    pub fn ImGuiTableSettings_GetColumnSettings(
        self_: *mut ImGuiTableSettings,
    ) -> *mut ImGuiTableColumnSettings;
}
extern "C" {
    pub fn igGetCurrentWindowRead() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igGetCurrentWindow() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindWindowByID(id: ImGuiID) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindWindowByName(name: *const ::std::os::raw::c_char) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igUpdateWindowParentAndRootLinks(
        window: *mut ImGuiWindow,
        flags: ImGuiWindowFlags,
        parent_window: *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igUpdateWindowSkipRefresh(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igCalcWindowNextAutoFitSize(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igIsWindowChildOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
        popup_hierarchy: bool,
        dock_hierarchy: bool,
    ) -> bool;
}
extern "C" {
    pub fn igIsWindowWithinBeginStackOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    pub fn igIsWindowAbove(
        potential_above: *mut ImGuiWindow,
        potential_below: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    pub fn igIsWindowNavFocusable(window: *mut ImGuiWindow) -> bool;
}
extern "C" {
    pub fn igSetWindowPos_WindowPtr(window: *mut ImGuiWindow, pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowSize_WindowPtr(window: *mut ImGuiWindow, size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowCollapsed_WindowPtr(
        window: *mut ImGuiWindow,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
extern "C" {
    pub fn igSetWindowHitTestHole(window: *mut ImGuiWindow, pos: ImVec2, size: ImVec2);
}
extern "C" {
    pub fn igSetWindowHiddenAndSkipItemsForCurrentFrame(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetWindowParentWindowForFocusRoute(
        window: *mut ImGuiWindow,
        parent_window: *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igWindowRectAbsToRel(pOut: *mut ImRect, window: *mut ImGuiWindow, r: ImRect);
}
extern "C" {
    pub fn igWindowRectRelToAbs(pOut: *mut ImRect, window: *mut ImGuiWindow, r: ImRect);
}
extern "C" {
    pub fn igWindowPosRelToAbs(pOut: *mut ImVec2, window: *mut ImGuiWindow, p: ImVec2);
}
extern "C" {
    pub fn igFocusWindow(window: *mut ImGuiWindow, flags: ImGuiFocusRequestFlags);
}
extern "C" {
    pub fn igFocusTopMostWindowUnderOne(
        under_this_window: *mut ImGuiWindow,
        ignore_window: *mut ImGuiWindow,
        filter_viewport: *mut ImGuiViewport,
        flags: ImGuiFocusRequestFlags,
    );
}
extern "C" {
    pub fn igBringWindowToFocusFront(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBringWindowToDisplayFront(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBringWindowToDisplayBack(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBringWindowToDisplayBehind(window: *mut ImGuiWindow, above_window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igFindWindowDisplayIndex(window: *mut ImGuiWindow) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igFindBottomMostVisibleWindowWithinBeginStack(
        window: *mut ImGuiWindow,
    ) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igSetNextWindowRefreshPolicy(flags: ImGuiWindowRefreshFlags);
}
extern "C" {
    pub fn igSetCurrentFont(font: *mut ImFont);
}
extern "C" {
    pub fn igGetDefaultFont() -> *mut ImFont;
}
extern "C" {
    pub fn igGetForegroundDrawList_WindowPtr(window: *mut ImGuiWindow) -> *mut ImDrawList;
}
extern "C" {
    pub fn igAddDrawListToDrawDataEx(
        draw_data: *mut ImDrawData,
        out_list: *mut ImVector_ImDrawListPtr,
        draw_list: *mut ImDrawList,
    );
}
extern "C" {
    pub fn igInitialize();
}
extern "C" {
    pub fn igShutdown();
}
extern "C" {
    pub fn igUpdateInputEvents(trickle_fast_inputs: bool);
}
extern "C" {
    pub fn igUpdateHoveredWindowAndCaptureFlags();
}
extern "C" {
    pub fn igFindHoveredWindowEx(
        pos: ImVec2,
        find_first_and_in_any_viewport: bool,
        out_hovered_window: *mut *mut ImGuiWindow,
        out_hovered_window_under_moving_window: *mut *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igStartMouseMovingWindow(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igStartMouseMovingWindowOrNode(
        window: *mut ImGuiWindow,
        node: *mut ImGuiDockNode,
        undock: bool,
    );
}
extern "C" {
    pub fn igUpdateMouseMovingWindowNewFrame();
}
extern "C" {
    pub fn igUpdateMouseMovingWindowEndFrame();
}
extern "C" {
    pub fn igAddContextHook(context: *mut ImGuiContext, hook: *const ImGuiContextHook) -> ImGuiID;
}
extern "C" {
    pub fn igRemoveContextHook(context: *mut ImGuiContext, hook_to_remove: ImGuiID);
}
extern "C" {
    pub fn igCallContextHooks(context: *mut ImGuiContext, type_: ImGuiContextHookType);
}
extern "C" {
    pub fn igTranslateWindowsInViewport(
        viewport: *mut ImGuiViewportP,
        old_pos: ImVec2,
        new_pos: ImVec2,
    );
}
extern "C" {
    pub fn igScaleWindowsInViewport(viewport: *mut ImGuiViewportP, scale: f32);
}
extern "C" {
    pub fn igDestroyPlatformWindow(viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igSetWindowViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igSetCurrentViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igGetViewportPlatformMonitor(
        viewport: *mut ImGuiViewport,
    ) -> *const ImGuiPlatformMonitor;
}
extern "C" {
    pub fn igFindHoveredViewportFromPlatformWindowStack(
        mouse_platform_pos: ImVec2,
    ) -> *mut ImGuiViewportP;
}
extern "C" {
    pub fn igMarkIniSettingsDirty_Nil();
}
extern "C" {
    pub fn igMarkIniSettingsDirty_WindowPtr(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igClearIniSettings();
}
extern "C" {
    pub fn igAddSettingsHandler(handler: *const ImGuiSettingsHandler);
}
extern "C" {
    pub fn igRemoveSettingsHandler(type_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igFindSettingsHandler(
        type_name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiSettingsHandler;
}
extern "C" {
    pub fn igCreateNewWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn igFindWindowSettingsByID(id: ImGuiID) -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn igFindWindowSettingsByWindow(window: *mut ImGuiWindow) -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn igClearWindowSettings(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igLocalizeRegisterEntries(entries: *const ImGuiLocEntry, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igLocalizeGetMsg(key: ImGuiLocKey) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igSetScrollX_WindowPtr(window: *mut ImGuiWindow, scroll_x: f32);
}
extern "C" {
    pub fn igSetScrollY_WindowPtr(window: *mut ImGuiWindow, scroll_y: f32);
}
extern "C" {
    pub fn igSetScrollFromPosX_WindowPtr(
        window: *mut ImGuiWindow,
        local_x: f32,
        center_x_ratio: f32,
    );
}
extern "C" {
    pub fn igSetScrollFromPosY_WindowPtr(
        window: *mut ImGuiWindow,
        local_y: f32,
        center_y_ratio: f32,
    );
}
extern "C" {
    pub fn igScrollToItem(flags: ImGuiScrollFlags);
}
extern "C" {
    pub fn igScrollToRect(window: *mut ImGuiWindow, rect: ImRect, flags: ImGuiScrollFlags);
}
extern "C" {
    pub fn igScrollToRectEx(
        pOut: *mut ImVec2,
        window: *mut ImGuiWindow,
        rect: ImRect,
        flags: ImGuiScrollFlags,
    );
}
extern "C" {
    pub fn igScrollToBringRectIntoView(window: *mut ImGuiWindow, rect: ImRect);
}
extern "C" {
    pub fn igGetItemStatusFlags() -> ImGuiItemStatusFlags;
}
extern "C" {
    pub fn igGetItemFlags() -> ImGuiItemFlags;
}
extern "C" {
    pub fn igGetActiveID() -> ImGuiID;
}
extern "C" {
    pub fn igGetFocusID() -> ImGuiID;
}
extern "C" {
    pub fn igSetActiveID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetFocusID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igClearActiveID();
}
extern "C" {
    pub fn igGetHoveredID() -> ImGuiID;
}
extern "C" {
    pub fn igSetHoveredID(id: ImGuiID);
}
extern "C" {
    pub fn igKeepAliveID(id: ImGuiID);
}
extern "C" {
    pub fn igMarkItemEdited(id: ImGuiID);
}
extern "C" {
    pub fn igPushOverrideID(id: ImGuiID);
}
extern "C" {
    pub fn igGetIDWithSeed_Str(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
        seed: ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igGetIDWithSeed_Int(n: ::std::os::raw::c_int, seed: ImGuiID) -> ImGuiID;
}
extern "C" {
    pub fn igItemSize_Vec2(size: ImVec2, text_baseline_y: f32);
}
extern "C" {
    pub fn igItemSize_Rect(bb: ImRect, text_baseline_y: f32);
}
extern "C" {
    pub fn igItemAdd(
        bb: ImRect,
        id: ImGuiID,
        nav_bb: *const ImRect,
        extra_flags: ImGuiItemFlags,
    ) -> bool;
}
extern "C" {
    pub fn igItemHoverable(bb: ImRect, id: ImGuiID, item_flags: ImGuiItemFlags) -> bool;
}
extern "C" {
    pub fn igIsWindowContentHoverable(window: *mut ImGuiWindow, flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    pub fn igIsClippedEx(bb: ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igSetLastItemData(
        item_id: ImGuiID,
        in_flags: ImGuiItemFlags,
        status_flags: ImGuiItemStatusFlags,
        item_rect: ImRect,
    );
}
extern "C" {
    pub fn igCalcItemSize(pOut: *mut ImVec2, size: ImVec2, default_w: f32, default_h: f32);
}
extern "C" {
    pub fn igCalcWrapWidthForPos(pos: ImVec2, wrap_pos_x: f32) -> f32;
}
extern "C" {
    pub fn igPushMultiItemsWidths(components: ::std::os::raw::c_int, width_full: f32);
}
extern "C" {
    pub fn igIsItemToggledSelection() -> bool;
}
extern "C" {
    pub fn igGetContentRegionMaxAbs(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igShrinkWidths(
        items: *mut ImGuiShrinkWidthItem,
        count: ::std::os::raw::c_int,
        width_excess: f32,
    );
}
extern "C" {
    pub fn igPushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
extern "C" {
    pub fn igPopItemFlag();
}
extern "C" {
    pub fn igGetStyleVarInfo(idx: ImGuiStyleVar) -> *const ImGuiDataVarInfo;
}
extern "C" {
    pub fn igBeginDisabledOverrideReenable();
}
extern "C" {
    pub fn igEndDisabledOverrideReenable();
}
extern "C" {
    pub fn igLogBegin(type_: ImGuiLogType, auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igLogToBuffer(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igLogRenderedText(
        ref_pos: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igLogSetNextTextDecoration(
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igBeginChildEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        size_arg: ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igOpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn igClosePopupToLevel(
        remaining: ::std::os::raw::c_int,
        restore_focus_to_window_under_popup: bool,
    );
}
extern "C" {
    pub fn igClosePopupsOverWindow(
        ref_window: *mut ImGuiWindow,
        restore_focus_to_window_under_popup: bool,
    );
}
extern "C" {
    pub fn igClosePopupsExceptModals();
}
extern "C" {
    pub fn igIsPopupOpen_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags) -> bool;
}
extern "C" {
    pub fn igBeginPopupEx(id: ImGuiID, extra_flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igBeginTooltipEx(
        tooltip_flags: ImGuiTooltipFlags,
        extra_window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginTooltipHidden() -> bool;
}
extern "C" {
    pub fn igGetPopupAllowedExtentRect(pOut: *mut ImRect, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igGetTopMostPopupModal() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igGetTopMostAndVisiblePopupModal() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindBlockingModal(window: *mut ImGuiWindow) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindBestWindowPosForPopup(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igFindBestWindowPosForPopupEx(
        pOut: *mut ImVec2,
        ref_pos: ImVec2,
        size: ImVec2,
        last_dir: *mut ImGuiDir,
        r_outer: ImRect,
        r_avoid: ImRect,
        policy: ImGuiPopupPositionPolicy,
    );
}
extern "C" {
    pub fn igBeginViewportSideBar(
        name: *const ::std::os::raw::c_char,
        viewport: *mut ImGuiViewport,
        dir: ImGuiDir,
        size: f32,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginMenuEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igMenuItemEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igBeginComboPopup(popup_id: ImGuiID, bb: ImRect, flags: ImGuiComboFlags) -> bool;
}
extern "C" {
    pub fn igBeginComboPreview() -> bool;
}
extern "C" {
    pub fn igEndComboPreview();
}
extern "C" {
    pub fn igNavInitWindow(window: *mut ImGuiWindow, force_reinit: bool);
}
extern "C" {
    pub fn igNavInitRequestApplyResult();
}
extern "C" {
    pub fn igNavMoveRequestButNoResultYet() -> bool;
}
extern "C" {
    pub fn igNavMoveRequestSubmit(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
extern "C" {
    pub fn igNavMoveRequestForward(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
extern "C" {
    pub fn igNavMoveRequestResolveWithLastItem(result: *mut ImGuiNavItemData);
}
extern "C" {
    pub fn igNavMoveRequestResolveWithPastTreeNode(
        result: *mut ImGuiNavItemData,
        tree_node_data: *mut ImGuiNavTreeNodeData,
    );
}
extern "C" {
    pub fn igNavMoveRequestCancel();
}
extern "C" {
    pub fn igNavMoveRequestApplyResult();
}
extern "C" {
    pub fn igNavMoveRequestTryWrapping(window: *mut ImGuiWindow, move_flags: ImGuiNavMoveFlags);
}
extern "C" {
    pub fn igNavHighlightActivated(id: ImGuiID);
}
extern "C" {
    pub fn igNavClearPreferredPosForAxis(axis: ImGuiAxis);
}
extern "C" {
    pub fn igNavRestoreHighlightAfterMove();
}
extern "C" {
    pub fn igNavUpdateCurrentWindowIsScrollPushableX();
}
extern "C" {
    pub fn igSetNavWindow(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetNavID(
        id: ImGuiID,
        nav_layer: ImGuiNavLayer,
        focus_scope_id: ImGuiID,
        rect_rel: ImRect,
    );
}
extern "C" {
    pub fn igSetNavFocusScope(focus_scope_id: ImGuiID);
}
extern "C" {
    pub fn igFocusItem();
}
extern "C" {
    pub fn igActivateItemByID(id: ImGuiID);
}
extern "C" {
    pub fn igIsNamedKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsNamedKeyOrMod(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsLegacyKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsKeyboardKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsGamepadKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsMouseKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsAliasKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsModKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igFixupKeyChord(key_chord: ImGuiKeyChord) -> ImGuiKeyChord;
}
extern "C" {
    pub fn igConvertSingleModFlagToKey(key: ImGuiKey) -> ImGuiKey;
}
extern "C" {
    pub fn igGetKeyData_ContextPtr(ctx: *mut ImGuiContext, key: ImGuiKey) -> *mut ImGuiKeyData;
}
extern "C" {
    pub fn igGetKeyData_Key(key: ImGuiKey) -> *mut ImGuiKeyData;
}
extern "C" {
    pub fn igGetKeyChordName(key_chord: ImGuiKeyChord) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igMouseButtonToKey(button: ImGuiMouseButton) -> ImGuiKey;
}
extern "C" {
    pub fn igIsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    pub fn igGetKeyMagnitude2d(
        pOut: *mut ImVec2,
        key_left: ImGuiKey,
        key_right: ImGuiKey,
        key_up: ImGuiKey,
        key_down: ImGuiKey,
    );
}
extern "C" {
    pub fn igGetNavTweakPressedAmount(axis: ImGuiAxis) -> f32;
}
extern "C" {
    pub fn igCalcTypematicRepeatAmount(
        t0: f32,
        t1: f32,
        repeat_delay: f32,
        repeat_rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igGetTypematicRepeatRate(
        flags: ImGuiInputFlags,
        repeat_delay: *mut f32,
        repeat_rate: *mut f32,
    );
}
extern "C" {
    pub fn igTeleportMousePos(pos: ImVec2);
}
extern "C" {
    pub fn igSetActiveIdUsingAllKeyboardKeys();
}
extern "C" {
    pub fn igIsActiveIdUsingNavDir(dir: ImGuiDir) -> bool;
}
extern "C" {
    pub fn igGetKeyOwner(key: ImGuiKey) -> ImGuiID;
}
extern "C" {
    pub fn igSetKeyOwner(key: ImGuiKey, owner_id: ImGuiID, flags: ImGuiInputFlags);
}
extern "C" {
    pub fn igSetKeyOwnersForKeyChord(key: ImGuiKeyChord, owner_id: ImGuiID, flags: ImGuiInputFlags);
}
extern "C" {
    pub fn igSetItemKeyOwner(key: ImGuiKey, flags: ImGuiInputFlags);
}
extern "C" {
    pub fn igTestKeyOwner(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igGetKeyOwnerData(ctx: *mut ImGuiContext, key: ImGuiKey) -> *mut ImGuiKeyOwnerData;
}
extern "C" {
    pub fn igIsKeyDown_ID(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igIsKeyPressed_InputFlags(
        key: ImGuiKey,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
extern "C" {
    pub fn igIsKeyReleased_ID(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igIsKeyChordPressed_InputFlags(
        key_chord: ImGuiKeyChord,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
extern "C" {
    pub fn igIsMouseDown_ID(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igIsMouseClicked_InputFlags(
        button: ImGuiMouseButton,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
extern "C" {
    pub fn igIsMouseReleased_ID(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igIsMouseDoubleClicked_ID(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igShortcut_ID(
        key_chord: ImGuiKeyChord,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
extern "C" {
    pub fn igSetShortcutRouting(
        key_chord: ImGuiKeyChord,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
extern "C" {
    pub fn igTestShortcutRouting(key_chord: ImGuiKeyChord, owner_id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igGetShortcutRoutingData(key_chord: ImGuiKeyChord) -> *mut ImGuiKeyRoutingData;
}
extern "C" {
    pub fn igDockContextInitialize(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextShutdown(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextClearNodes(
        ctx: *mut ImGuiContext,
        root_id: ImGuiID,
        clear_settings_refs: bool,
    );
}
extern "C" {
    pub fn igDockContextRebuildNodes(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextNewFrameUpdateUndocking(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextNewFrameUpdateDocking(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextEndFrame(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextGenNodeID(ctx: *mut ImGuiContext) -> ImGuiID;
}
extern "C" {
    pub fn igDockContextQueueDock(
        ctx: *mut ImGuiContext,
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_ratio: f32,
        split_outer: bool,
    );
}
extern "C" {
    pub fn igDockContextQueueUndockWindow(ctx: *mut ImGuiContext, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igDockContextQueueUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
extern "C" {
    pub fn igDockContextProcessUndockWindow(
        ctx: *mut ImGuiContext,
        window: *mut ImGuiWindow,
        clear_persistent_docking_ref: bool,
    );
}
extern "C" {
    pub fn igDockContextProcessUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
extern "C" {
    pub fn igDockContextCalcDropPosForDocking(
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload_window: *mut ImGuiWindow,
        payload_node: *mut ImGuiDockNode,
        split_dir: ImGuiDir,
        split_outer: bool,
        out_pos: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igDockContextFindNodeByID(ctx: *mut ImGuiContext, id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockNodeWindowMenuHandler_Default(
        ctx: *mut ImGuiContext,
        node: *mut ImGuiDockNode,
        tab_bar: *mut ImGuiTabBar,
    );
}
extern "C" {
    pub fn igDockNodeBeginAmendTabBar(node: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn igDockNodeEndAmendTabBar();
}
extern "C" {
    pub fn igDockNodeGetRootNode(node: *mut ImGuiDockNode) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockNodeIsInHierarchyOf(node: *mut ImGuiDockNode, parent: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn igDockNodeGetDepth(node: *const ImGuiDockNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igDockNodeGetWindowMenuButtonId(node: *const ImGuiDockNode) -> ImGuiID;
}
extern "C" {
    pub fn igGetWindowDockNode() -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igGetWindowAlwaysWantOwnTabBar(window: *mut ImGuiWindow) -> bool;
}
extern "C" {
    pub fn igBeginDocked(window: *mut ImGuiWindow, p_open: *mut bool);
}
extern "C" {
    pub fn igBeginDockableDragDropSource(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBeginDockableDragDropTarget(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetWindowDock(window: *mut ImGuiWindow, dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    pub fn igDockBuilderDockWindow(window_name: *const ::std::os::raw::c_char, node_id: ImGuiID);
}
extern "C" {
    pub fn igDockBuilderGetNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockBuilderGetCentralNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockBuilderAddNode(node_id: ImGuiID, flags: ImGuiDockNodeFlags) -> ImGuiID;
}
extern "C" {
    pub fn igDockBuilderRemoveNode(node_id: ImGuiID);
}
extern "C" {
    pub fn igDockBuilderRemoveNodeDockedWindows(node_id: ImGuiID, clear_settings_refs: bool);
}
extern "C" {
    pub fn igDockBuilderRemoveNodeChildNodes(node_id: ImGuiID);
}
extern "C" {
    pub fn igDockBuilderSetNodePos(node_id: ImGuiID, pos: ImVec2);
}
extern "C" {
    pub fn igDockBuilderSetNodeSize(node_id: ImGuiID, size: ImVec2);
}
extern "C" {
    pub fn igDockBuilderSplitNode(
        node_id: ImGuiID,
        split_dir: ImGuiDir,
        size_ratio_for_node_at_dir: f32,
        out_id_at_dir: *mut ImGuiID,
        out_id_at_opposite_dir: *mut ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igDockBuilderCopyDockSpace(
        src_dockspace_id: ImGuiID,
        dst_dockspace_id: ImGuiID,
        in_window_remap_pairs: *mut ImVector_const_charPtr,
    );
}
extern "C" {
    pub fn igDockBuilderCopyNode(
        src_node_id: ImGuiID,
        dst_node_id: ImGuiID,
        out_node_remap_pairs: *mut ImVector_ImGuiID,
    );
}
extern "C" {
    pub fn igDockBuilderCopyWindowSettings(
        src_name: *const ::std::os::raw::c_char,
        dst_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igDockBuilderFinish(node_id: ImGuiID);
}
extern "C" {
    pub fn igPushFocusScope(id: ImGuiID);
}
extern "C" {
    pub fn igPopFocusScope();
}
extern "C" {
    pub fn igGetCurrentFocusScope() -> ImGuiID;
}
extern "C" {
    pub fn igIsDragDropActive() -> bool;
}
extern "C" {
    pub fn igBeginDragDropTargetCustom(bb: ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igClearDragDrop();
}
extern "C" {
    pub fn igIsDragDropPayloadBeingAccepted() -> bool;
}
extern "C" {
    pub fn igRenderDragDropTargetRect(bb: ImRect, item_clip_rect: ImRect);
}
extern "C" {
    pub fn igGetTypingSelectRequest(flags: ImGuiTypingSelectFlags)
        -> *mut ImGuiTypingSelectRequest;
}
extern "C" {
    pub fn igTypingSelectFindMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        nav_item_idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTypingSelectFindNextSingleCharMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        nav_item_idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTypingSelectFindBestLeadingMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igSetWindowClipRectBeforeSetChannel(window: *mut ImGuiWindow, clip_rect: ImRect);
}
extern "C" {
    pub fn igBeginColumns(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        flags: ImGuiOldColumnFlags,
    );
}
extern "C" {
    pub fn igEndColumns();
}
extern "C" {
    pub fn igPushColumnClipRect(column_index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igPushColumnsBackground();
}
extern "C" {
    pub fn igPopColumnsBackground();
}
extern "C" {
    pub fn igGetColumnsID(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igFindOrCreateColumns(window: *mut ImGuiWindow, id: ImGuiID) -> *mut ImGuiOldColumns;
}
extern "C" {
    pub fn igGetColumnOffsetFromNorm(columns: *const ImGuiOldColumns, offset_norm: f32) -> f32;
}
extern "C" {
    pub fn igGetColumnNormFromOffset(columns: *const ImGuiOldColumns, offset: f32) -> f32;
}
extern "C" {
    pub fn igTableOpenContextMenu(column_n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableSetColumnWidth(column_n: ::std::os::raw::c_int, width: f32);
}
extern "C" {
    pub fn igTableSetColumnSortDirection(
        column_n: ::std::os::raw::c_int,
        sort_direction: ImGuiSortDirection,
        append_to_sort_specs: bool,
    );
}
extern "C" {
    pub fn igTableGetHoveredColumn() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTableGetHoveredRow() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTableGetHeaderRowHeight() -> f32;
}
extern "C" {
    pub fn igTableGetHeaderAngledMaxLabelWidth() -> f32;
}
extern "C" {
    pub fn igTablePushBackgroundChannel();
}
extern "C" {
    pub fn igTablePopBackgroundChannel();
}
extern "C" {
    pub fn igTableAngledHeadersRowEx(
        row_id: ImGuiID,
        angle: f32,
        max_label_width: f32,
        data: *const ImGuiTableHeaderData,
        data_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igGetCurrentTable() -> *mut ImGuiTable;
}
extern "C" {
    pub fn igTableFindByID(id: ImGuiID) -> *mut ImGuiTable;
}
extern "C" {
    pub fn igBeginTableEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    pub fn igTableBeginInitMemory(table: *mut ImGuiTable, columns_count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableBeginApplyRequests(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSetupDrawChannels(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableUpdateLayout(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableUpdateBorders(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableUpdateColumnsWeightFromWidth(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableDrawBorders(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableDrawDefaultContextMenu(
        table: *mut ImGuiTable,
        flags_for_section_to_display: ImGuiTableFlags,
    );
}
extern "C" {
    pub fn igTableBeginContextMenuPopup(table: *mut ImGuiTable) -> bool;
}
extern "C" {
    pub fn igTableMergeDrawChannels(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetInstanceData(
        table: *mut ImGuiTable,
        instance_no: ::std::os::raw::c_int,
    ) -> *mut ImGuiTableInstanceData;
}
extern "C" {
    pub fn igTableGetInstanceID(
        table: *mut ImGuiTable,
        instance_no: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igTableSortSpecsSanitize(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSortSpecsBuild(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetColumnNextSortDirection(column: *mut ImGuiTableColumn) -> ImGuiSortDirection;
}
extern "C" {
    pub fn igTableFixColumnSortDirection(table: *mut ImGuiTable, column: *mut ImGuiTableColumn);
}
extern "C" {
    pub fn igTableGetColumnWidthAuto(table: *mut ImGuiTable, column: *mut ImGuiTableColumn) -> f32;
}
extern "C" {
    pub fn igTableBeginRow(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableEndRow(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableBeginCell(table: *mut ImGuiTable, column_n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableEndCell(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetCellBgRect(
        pOut: *mut ImRect,
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igTableGetColumnName_TablePtr(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igTableGetColumnResizeID(
        table: *mut ImGuiTable,
        column_n: ::std::os::raw::c_int,
        instance_no: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igTableGetMaxColumnWidth(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn igTableSetColumnWidthAutoSingle(table: *mut ImGuiTable, column_n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableSetColumnWidthAutoAll(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableRemove(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGcCompactTransientBuffers_TablePtr(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGcCompactTransientBuffers_TableTempDataPtr(table: *mut ImGuiTableTempData);
}
extern "C" {
    pub fn igTableGcCompactSettings();
}
extern "C" {
    pub fn igTableLoadSettings(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSaveSettings(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableResetSettings(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetBoundSettings(table: *mut ImGuiTable) -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn igTableSettingsAddSettingsHandler();
}
extern "C" {
    pub fn igTableSettingsCreate(
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
    ) -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn igTableSettingsFindByID(id: ImGuiID) -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn igGetCurrentTabBar() -> *mut ImGuiTabBar;
}
extern "C" {
    pub fn igBeginTabBarEx(tab_bar: *mut ImGuiTabBar, bb: ImRect, flags: ImGuiTabBarFlags) -> bool;
}
extern "C" {
    pub fn igTabBarFindTabByID(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID) -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn igTabBarFindTabByOrder(
        tab_bar: *mut ImGuiTabBar,
        order: ::std::os::raw::c_int,
    ) -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn igTabBarFindMostRecentlySelectedTabForActiveWindow(
        tab_bar: *mut ImGuiTabBar,
    ) -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn igTabBarGetCurrentTab(tab_bar: *mut ImGuiTabBar) -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn igTabBarGetTabOrder(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTabBarGetTabName(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igTabBarAddTab(
        tab_bar: *mut ImGuiTabBar,
        tab_flags: ImGuiTabItemFlags,
        window: *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igTabBarRemoveTab(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID);
}
extern "C" {
    pub fn igTabBarCloseTab(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
extern "C" {
    pub fn igTabBarQueueFocus(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
extern "C" {
    pub fn igTabBarQueueReorder(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
        offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igTabBarQueueReorderFromMousePos(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
        mouse_pos: ImVec2,
    );
}
extern "C" {
    pub fn igTabBarProcessReorder(tab_bar: *mut ImGuiTabBar) -> bool;
}
extern "C" {
    pub fn igTabItemEx(
        tab_bar: *mut ImGuiTabBar,
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
        docked_window: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    pub fn igTabItemCalcSize_Str(
        pOut: *mut ImVec2,
        label: *const ::std::os::raw::c_char,
        has_close_button_or_unsaved_marker: bool,
    );
}
extern "C" {
    pub fn igTabItemCalcSize_WindowPtr(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igTabItemBackground(
        draw_list: *mut ImDrawList,
        bb: ImRect,
        flags: ImGuiTabItemFlags,
        col: ImU32,
    );
}
extern "C" {
    pub fn igTabItemLabelAndCloseButton(
        draw_list: *mut ImDrawList,
        bb: ImRect,
        flags: ImGuiTabItemFlags,
        frame_padding: ImVec2,
        label: *const ::std::os::raw::c_char,
        tab_id: ImGuiID,
        close_button_id: ImGuiID,
        is_contents_visible: bool,
        out_just_closed: *mut bool,
        out_text_clipped: *mut bool,
    );
}
extern "C" {
    pub fn igRenderText(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_hash: bool,
    );
}
extern "C" {
    pub fn igRenderTextWrapped(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    );
}
extern "C" {
    pub fn igRenderTextClipped(
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    pub fn igRenderTextClippedEx(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    pub fn igRenderTextEllipsis(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        clip_max_x: f32,
        ellipsis_max_x: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
    );
}
extern "C" {
    pub fn igRenderFrame(
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        border: bool,
        rounding: f32,
    );
}
extern "C" {
    pub fn igRenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: f32);
}
extern "C" {
    pub fn igRenderColorRectWithAlphaCheckerboard(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        grid_step: f32,
        grid_off: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn igRenderNavHighlight(bb: ImRect, id: ImGuiID, flags: ImGuiNavHighlightFlags);
}
extern "C" {
    pub fn igFindRenderedTextEnd(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igRenderMouseCursor(
        pos: ImVec2,
        scale: f32,
        mouse_cursor: ImGuiMouseCursor,
        col_fill: ImU32,
        col_border: ImU32,
        col_shadow: ImU32,
    );
}
extern "C" {
    pub fn igRenderArrow(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        dir: ImGuiDir,
        scale: f32,
    );
}
extern "C" {
    pub fn igRenderBullet(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32);
}
extern "C" {
    pub fn igRenderCheckMark(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32, sz: f32);
}
extern "C" {
    pub fn igRenderArrowPointingAt(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        half_sz: ImVec2,
        direction: ImGuiDir,
        col: ImU32,
    );
}
extern "C" {
    pub fn igRenderArrowDockMenu(draw_list: *mut ImDrawList, p_min: ImVec2, sz: f32, col: ImU32);
}
extern "C" {
    pub fn igRenderRectFilledRangeH(
        draw_list: *mut ImDrawList,
        rect: ImRect,
        col: ImU32,
        x_start_norm: f32,
        x_end_norm: f32,
        rounding: f32,
    );
}
extern "C" {
    pub fn igRenderRectFilledWithHole(
        draw_list: *mut ImDrawList,
        outer: ImRect,
        inner: ImRect,
        col: ImU32,
        rounding: f32,
    );
}
extern "C" {
    pub fn igCalcRoundingFlagsForRectInRect(
        r_in: ImRect,
        r_outer: ImRect,
        threshold: f32,
    ) -> ImDrawFlags;
}
extern "C" {
    pub fn igTextEx(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        flags: ImGuiTextFlags,
    );
}
extern "C" {
    pub fn igButtonEx(
        label: *const ::std::os::raw::c_char,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igArrowButtonEx(
        str_id: *const ::std::os::raw::c_char,
        dir: ImGuiDir,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igImageButtonEx(
        id: ImGuiID,
        texture_id: ImTextureID,
        image_size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        bg_col: ImVec4,
        tint_col: ImVec4,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSeparatorEx(flags: ImGuiSeparatorFlags, thickness: f32);
}
extern "C" {
    pub fn igSeparatorTextEx(
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
        extra_width: f32,
    );
}
extern "C" {
    pub fn igCheckboxFlags_S64Ptr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImS64,
        flags_value: ImS64,
    ) -> bool;
}
extern "C" {
    pub fn igCheckboxFlags_U64Ptr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImU64,
        flags_value: ImU64,
    ) -> bool;
}
extern "C" {
    pub fn igCloseButton(id: ImGuiID, pos: ImVec2) -> bool;
}
extern "C" {
    pub fn igCollapseButton(id: ImGuiID, pos: ImVec2, dock_node: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn igScrollbar(axis: ImGuiAxis);
}
extern "C" {
    pub fn igScrollbarEx(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        p_scroll_v: *mut ImS64,
        avail_v: ImS64,
        contents_v: ImS64,
        flags: ImDrawFlags,
    ) -> bool;
}
extern "C" {
    pub fn igGetWindowScrollbarRect(pOut: *mut ImRect, window: *mut ImGuiWindow, axis: ImGuiAxis);
}
extern "C" {
    pub fn igGetWindowScrollbarID(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImGuiID;
}
extern "C" {
    pub fn igGetWindowResizeCornerID(window: *mut ImGuiWindow, n: ::std::os::raw::c_int)
        -> ImGuiID;
}
extern "C" {
    pub fn igGetWindowResizeBorderID(window: *mut ImGuiWindow, dir: ImGuiDir) -> ImGuiID;
}
extern "C" {
    pub fn igButtonBehavior(
        bb: ImRect,
        id: ImGuiID,
        out_hovered: *mut bool,
        out_held: *mut bool,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragBehavior(
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderBehavior(
        bb: ImRect,
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
        out_grab_bb: *mut ImRect,
    ) -> bool;
}
extern "C" {
    pub fn igSplitterBehavior(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        size1: *mut f32,
        size2: *mut f32,
        min_size1: f32,
        min_size2: f32,
        hover_extend: f32,
        hover_visibility_delay: f32,
        bg_col: ImU32,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeBehavior(
        id: ImGuiID,
        flags: ImGuiTreeNodeFlags,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn igTreePushOverrideID(id: ImGuiID);
}
extern "C" {
    pub fn igTreeNodeSetOpen(id: ImGuiID, open: bool);
}
extern "C" {
    pub fn igTreeNodeUpdateNextOpen(id: ImGuiID, flags: ImGuiTreeNodeFlags) -> bool;
}
extern "C" {
    pub fn igSetNextItemSelectionUserData(selection_user_data: ImGuiSelectionUserData);
}
extern "C" {
    pub fn igDataTypeGetInfo(data_type: ImGuiDataType) -> *const ImGuiDataTypeInfo;
}
extern "C" {
    pub fn igDataTypeFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        data_type: ImGuiDataType,
        p_data: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igDataTypeApplyOp(
        data_type: ImGuiDataType,
        op: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_void,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igDataTypeApplyFromText(
        buf: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_data_when_empty: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igDataTypeCompare(
        data_type: ImGuiDataType,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igDataTypeClamp(
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextEx(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        size_arg: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextDeactivateHook(id: ImGuiID);
}
extern "C" {
    pub fn igTempInputText(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igTempInputScalar(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_clamp_min: *const ::std::os::raw::c_void,
        p_clamp_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igTempInputIsActive(id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igGetInputTextState(id: ImGuiID) -> *mut ImGuiInputTextState;
}
extern "C" {
    pub fn igSetNextItemRefVal(data_type: ImGuiDataType, p_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn igColorTooltip(
        text: *const ::std::os::raw::c_char,
        col: *const f32,
        flags: ImGuiColorEditFlags,
    );
}
extern "C" {
    pub fn igColorEditOptionsPopup(col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igColorPickerOptionsPopup(ref_col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igPlotEx(
        plot_type: ImGuiPlotType,
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        size_arg: ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igShadeVertsLinearColorGradientKeepAlpha(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        gradient_p0: ImVec2,
        gradient_p1: ImVec2,
        col0: ImU32,
        col1: ImU32,
    );
}
extern "C" {
    pub fn igShadeVertsLinearUV(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        clamp: bool,
    );
}
extern "C" {
    pub fn igShadeVertsTransformPos(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        pivot_in: ImVec2,
        cos_a: f32,
        sin_a: f32,
        pivot_out: ImVec2,
    );
}
extern "C" {
    pub fn igGcCompactTransientMiscBuffers();
}
extern "C" {
    pub fn igGcCompactTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igGcAwakeTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igDebugLog(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igDebugLogV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn igDebugAllocHook(
        info: *mut ImGuiDebugAllocInfo,
        frame_count: ::std::os::raw::c_int,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    pub fn igErrorCheckEndFrameRecover(
        log_callback: ImGuiErrorLogCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igErrorCheckEndWindowRecover(
        log_callback: ImGuiErrorLogCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igErrorCheckUsingSetCursorPosToExtendParentBoundaries();
}
extern "C" {
    pub fn igDebugDrawCursorPos(col: ImU32);
}
extern "C" {
    pub fn igDebugDrawLineExtents(col: ImU32);
}
extern "C" {
    pub fn igDebugDrawItemRect(col: ImU32);
}
extern "C" {
    pub fn igDebugTextUnformattedWithLocateItem(
        line_begin: *const ::std::os::raw::c_char,
        line_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igDebugLocateItem(target_id: ImGuiID);
}
extern "C" {
    pub fn igDebugLocateItemOnHover(target_id: ImGuiID);
}
extern "C" {
    pub fn igDebugLocateItemResolveWithLastItem();
}
extern "C" {
    pub fn igDebugBreakClearData();
}
extern "C" {
    pub fn igDebugBreakButton(
        label: *const ::std::os::raw::c_char,
        description_of_location: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn igDebugBreakButtonTooltip(
        keyboard_only: bool,
        description_of_location: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igShowFontAtlas(atlas: *mut ImFontAtlas);
}
extern "C" {
    pub fn igDebugHookIdInfo(
        id: ImGuiID,
        data_type: ImGuiDataType,
        data_id: *const ::std::os::raw::c_void,
        data_id_end: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igDebugNodeColumns(columns: *mut ImGuiOldColumns);
}
extern "C" {
    pub fn igDebugNodeDockNode(node: *mut ImGuiDockNode, label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugNodeDrawList(
        window: *mut ImGuiWindow,
        viewport: *mut ImGuiViewportP,
        draw_list: *const ImDrawList,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igDebugNodeDrawCmdShowMeshAndBoundingBox(
        out_draw_list: *mut ImDrawList,
        draw_list: *const ImDrawList,
        draw_cmd: *const ImDrawCmd,
        show_mesh: bool,
        show_aabb: bool,
    );
}
extern "C" {
    pub fn igDebugNodeFont(font: *mut ImFont);
}
extern "C" {
    pub fn igDebugNodeFontGlyph(font: *mut ImFont, glyph: *const ImFontGlyph);
}
extern "C" {
    pub fn igDebugNodeStorage(storage: *mut ImGuiStorage, label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugNodeTabBar(tab_bar: *mut ImGuiTabBar, label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugNodeTable(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igDebugNodeTableSettings(settings: *mut ImGuiTableSettings);
}
extern "C" {
    pub fn igDebugNodeInputTextState(state: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn igDebugNodeTypingSelectState(state: *mut ImGuiTypingSelectState);
}
extern "C" {
    pub fn igDebugNodeWindow(window: *mut ImGuiWindow, label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugNodeWindowSettings(settings: *mut ImGuiWindowSettings);
}
extern "C" {
    pub fn igDebugNodeWindowsList(
        windows: *mut ImVector_ImGuiWindowPtr,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igDebugNodeWindowsListByBeginStackParent(
        windows: *mut *mut ImGuiWindow,
        windows_size: ::std::os::raw::c_int,
        parent_in_begin_stack: *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igDebugNodeViewport(viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igDebugRenderKeyboardPreview(draw_list: *mut ImDrawList);
}
extern "C" {
    pub fn igDebugRenderViewportThumbnail(
        draw_list: *mut ImDrawList,
        viewport: *mut ImGuiViewportP,
        bb: ImRect,
    );
}
extern "C" {
    pub fn igImFontAtlasGetBuilderForStbTruetype() -> *const ImFontBuilderIO;
}
extern "C" {
    pub fn igImFontAtlasUpdateConfigDataPointers(atlas: *mut ImFontAtlas);
}
extern "C" {
    pub fn igImFontAtlasBuildInit(atlas: *mut ImFontAtlas);
}
extern "C" {
    pub fn igImFontAtlasBuildSetupFont(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_config: *mut ImFontConfig,
        ascent: f32,
        descent: f32,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildPackCustomRects(
        atlas: *mut ImFontAtlas,
        stbrp_context_opaque: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildFinish(atlas: *mut ImFontAtlas);
}
extern "C" {
    pub fn igImFontAtlasBuildRender8bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildRender32bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildMultiplyCalcLookupTable(
        out_table: *mut ::std::os::raw::c_uchar,
        in_multiply_factor: f32,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildMultiplyRectAlpha8(
        table: *const ::std::os::raw::c_uchar,
        pixels: *mut ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = "hand written functions"]
    pub fn igLogText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGuiTextBuffer_appendf(
        buffer: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn igGET_FLT_MAX() -> f32;
}
extern "C" {
    pub fn igGET_FLT_MIN() -> f32;
}
extern "C" {
    pub fn ImVector_ImWchar_create() -> *mut ImVector_ImWchar;
}
extern "C" {
    pub fn ImVector_ImWchar_destroy(self_: *mut ImVector_ImWchar);
}
extern "C" {
    pub fn ImVector_ImWchar_Init(p: *mut ImVector_ImWchar);
}
extern "C" {
    pub fn ImVector_ImWchar_UnInit(p: *mut ImVector_ImWchar);
}
extern "C" {
    pub fn ImGuiPlatformIO_Set_Platform_GetWindowPos(
        platform_io: *mut ImGuiPlatformIO,
        user_callback: ::std::option::Option<
            unsafe extern "C" fn(vp: *mut ImGuiViewport, out_pos: *mut ImVec2),
        >,
    );
}
extern "C" {
    pub fn ImGuiPlatformIO_Set_Platform_GetWindowSize(
        platform_io: *mut ImGuiPlatformIO,
        user_callback: ::std::option::Option<
            unsafe extern "C" fn(vp: *mut ImGuiViewport, out_size: *mut ImVec2),
        >,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
